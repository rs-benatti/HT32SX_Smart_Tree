
HT32SX-Generic-Push-Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000100  08080000  08081000  00030000  2**0
                  ALLOC
  2 .text         00006378  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008a4  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006cdc  08006cdc  0002018c  2**0
                  CONTENTS
  5 .ARM          00000008  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08006ce4  08006ce4  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000018c  20000000  08006cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000570  2000018c  08006e78  0002018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006fc  08006e78  000206fc  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bda3  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000644e  00000000  00000000  0004bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000103f4  00000000  00000000  000523ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001540  00000000  00000000  000627a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ec0  00000000  00000000  00063ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bea7  00000000  00000000  00065ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000267df  00000000  00000000  00081a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00090bac  00000000  00000000  000a8226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000002f8  00000000  00000000  00138dd2  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  00000026  00000000  00000000  001390ca  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000004  00000000  00000000  001390f0  2**2
                  CONTENTS, READONLY
 24 .debug_frame  00004e44  00000000  00000000  001390f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000018c 	.word	0x2000018c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006420 	.word	0x08006420

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000190 	.word	0x20000190
 8000104:	08006420 	.word	0x08006420

08000108 <KeyExpansion_dec>:
 8000108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800010a:	4880      	ldr	r0, [pc, #512]	; (800030c <.text_14>)
 800010c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800010e:	4880      	ldr	r0, [pc, #512]	; (8000310 <.text_15>)
 8000110:	780a      	ldrb	r2, [r1, #0]
 8000112:	7002      	strb	r2, [r0, #0]
 8000114:	784a      	ldrb	r2, [r1, #1]
 8000116:	7042      	strb	r2, [r0, #1]
 8000118:	788a      	ldrb	r2, [r1, #2]
 800011a:	7082      	strb	r2, [r0, #2]
 800011c:	78ca      	ldrb	r2, [r1, #3]
 800011e:	70c2      	strb	r2, [r0, #3]
 8000120:	790a      	ldrb	r2, [r1, #4]
 8000122:	7102      	strb	r2, [r0, #4]
 8000124:	794a      	ldrb	r2, [r1, #5]
 8000126:	7142      	strb	r2, [r0, #5]
 8000128:	798a      	ldrb	r2, [r1, #6]
 800012a:	7182      	strb	r2, [r0, #6]
 800012c:	79ca      	ldrb	r2, [r1, #7]
 800012e:	71c2      	strb	r2, [r0, #7]
 8000130:	7a0a      	ldrb	r2, [r1, #8]
 8000132:	7202      	strb	r2, [r0, #8]
 8000134:	7a4a      	ldrb	r2, [r1, #9]
 8000136:	7242      	strb	r2, [r0, #9]
 8000138:	7a8a      	ldrb	r2, [r1, #10]
 800013a:	7282      	strb	r2, [r0, #10]
 800013c:	7aca      	ldrb	r2, [r1, #11]
 800013e:	72c2      	strb	r2, [r0, #11]
 8000140:	7b0a      	ldrb	r2, [r1, #12]
 8000142:	7302      	strb	r2, [r0, #12]
 8000144:	7b4a      	ldrb	r2, [r1, #13]
 8000146:	7342      	strb	r2, [r0, #13]
 8000148:	7b8a      	ldrb	r2, [r1, #14]
 800014a:	7382      	strb	r2, [r0, #14]
 800014c:	7bc9      	ldrb	r1, [r1, #15]
 800014e:	73c1      	strb	r1, [r0, #15]
 8000150:	e01c      	b.n	800018c <.text_9>

08000152 <KeyExpansion_enc>:
 8000152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000154:	2200      	movs	r2, #0
 8000156:	4b6d      	ldr	r3, [pc, #436]	; (800030c <.text_14>)
 8000158:	7c19      	ldrb	r1, [r3, #16]
 800015a:	2010      	movs	r0, #16
 800015c:	1a44      	subs	r4, r0, r1
 800015e:	486c      	ldr	r0, [pc, #432]	; (8000310 <.text_15>)
 8000160:	d009      	beq.n	8000176 <KeyExpansion_enc+0x24>
 8000162:	0005      	movs	r5, r0
 8000164:	350f      	adds	r5, #15
 8000166:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8000168:	7837      	ldrb	r7, [r6, #0]
 800016a:	702f      	strb	r7, [r5, #0]
 800016c:	1c52      	adds	r2, r2, #1
 800016e:	1c76      	adds	r6, r6, #1
 8000170:	1e6d      	subs	r5, r5, #1
 8000172:	42a2      	cmp	r2, r4
 8000174:	d1f8      	bne.n	8000168 <KeyExpansion_enc+0x16>
 8000176:	2900      	cmp	r1, #0
 8000178:	d008      	beq.n	800018c <.text_9>
 800017a:	0004      	movs	r4, r0
 800017c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800017e:	189a      	adds	r2, r3, r2
 8000180:	7813      	ldrb	r3, [r2, #0]
 8000182:	7023      	strb	r3, [r4, #0]
 8000184:	1c52      	adds	r2, r2, #1
 8000186:	1c64      	adds	r4, r4, #1
 8000188:	1e49      	subs	r1, r1, #1
 800018a:	d1f9      	bne.n	8000180 <KeyExpansion_enc+0x2e>

0800018c <.text_9>:
 800018c:	2604      	movs	r6, #4
 800018e:	0007      	movs	r7, r0
 8000190:	3710      	adds	r7, #16
 8000192:	4c60      	ldr	r4, [pc, #384]	; (8000314 <.text_16>)
 8000194:	466d      	mov	r5, sp
 8000196:	2204      	movs	r2, #4
 8000198:	1f39      	subs	r1, r7, #4
 800019a:	4668      	mov	r0, sp
 800019c:	f005 f881 	bl	80052a2 <__aeabi_memcpy>
 80001a0:	07b0      	lsls	r0, r6, #30
 80001a2:	d117      	bne.n	80001d4 <.text_9+0x48>
 80001a4:	782a      	ldrb	r2, [r5, #0]
 80001a6:	7868      	ldrb	r0, [r5, #1]
 80001a8:	7028      	strb	r0, [r5, #0]
 80001aa:	78a8      	ldrb	r0, [r5, #2]
 80001ac:	7068      	strb	r0, [r5, #1]
 80001ae:	78e9      	ldrb	r1, [r5, #3]
 80001b0:	70a9      	strb	r1, [r5, #2]
 80001b2:	70ea      	strb	r2, [r5, #3]
 80001b4:	782a      	ldrb	r2, [r5, #0]
 80001b6:	5ca2      	ldrb	r2, [r4, r2]
 80001b8:	702a      	strb	r2, [r5, #0]
 80001ba:	5c20      	ldrb	r0, [r4, r0]
 80001bc:	7068      	strb	r0, [r5, #1]
 80001be:	5c60      	ldrb	r0, [r4, r1]
 80001c0:	70a8      	strb	r0, [r5, #2]
 80001c2:	78e8      	ldrb	r0, [r5, #3]
 80001c4:	5c20      	ldrb	r0, [r4, r0]
 80001c6:	70e8      	strb	r0, [r5, #3]
 80001c8:	7828      	ldrb	r0, [r5, #0]
 80001ca:	4953      	ldr	r1, [pc, #332]	; (8000318 <.text_17>)
 80001cc:	08b2      	lsrs	r2, r6, #2
 80001ce:	5c89      	ldrb	r1, [r1, r2]
 80001d0:	4041      	eors	r1, r0
 80001d2:	7029      	strb	r1, [r5, #0]
 80001d4:	0038      	movs	r0, r7
 80001d6:	3810      	subs	r0, #16
 80001d8:	7800      	ldrb	r0, [r0, #0]
 80001da:	7829      	ldrb	r1, [r5, #0]
 80001dc:	4041      	eors	r1, r0
 80001de:	7039      	strb	r1, [r7, #0]
 80001e0:	0038      	movs	r0, r7
 80001e2:	380f      	subs	r0, #15
 80001e4:	7800      	ldrb	r0, [r0, #0]
 80001e6:	7869      	ldrb	r1, [r5, #1]
 80001e8:	4041      	eors	r1, r0
 80001ea:	7079      	strb	r1, [r7, #1]
 80001ec:	0038      	movs	r0, r7
 80001ee:	380e      	subs	r0, #14
 80001f0:	7800      	ldrb	r0, [r0, #0]
 80001f2:	78a9      	ldrb	r1, [r5, #2]
 80001f4:	4041      	eors	r1, r0
 80001f6:	70b9      	strb	r1, [r7, #2]
 80001f8:	0038      	movs	r0, r7
 80001fa:	380d      	subs	r0, #13
 80001fc:	7800      	ldrb	r0, [r0, #0]
 80001fe:	78e9      	ldrb	r1, [r5, #3]
 8000200:	4041      	eors	r1, r0
 8000202:	70f9      	strb	r1, [r7, #3]
 8000204:	1c76      	adds	r6, r6, #1
 8000206:	1d3f      	adds	r7, r7, #4
 8000208:	2e2c      	cmp	r6, #44	; 0x2c
 800020a:	d3c4      	bcc.n	8000196 <.text_9+0xa>
 800020c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800020e <AddRoundKey>:
 800020e:	b410      	push	{r4}
 8000210:	493e      	ldr	r1, [pc, #248]	; (800030c <.text_14>)
 8000212:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000214:	4a3e      	ldr	r2, [pc, #248]	; (8000310 <.text_15>)
 8000216:	0100      	lsls	r0, r0, #4
 8000218:	1810      	adds	r0, r2, r0
 800021a:	2204      	movs	r2, #4
 800021c:	780b      	ldrb	r3, [r1, #0]
 800021e:	7804      	ldrb	r4, [r0, #0]
 8000220:	405c      	eors	r4, r3
 8000222:	700c      	strb	r4, [r1, #0]
 8000224:	784b      	ldrb	r3, [r1, #1]
 8000226:	7844      	ldrb	r4, [r0, #1]
 8000228:	405c      	eors	r4, r3
 800022a:	704c      	strb	r4, [r1, #1]
 800022c:	788b      	ldrb	r3, [r1, #2]
 800022e:	7884      	ldrb	r4, [r0, #2]
 8000230:	405c      	eors	r4, r3
 8000232:	708c      	strb	r4, [r1, #2]
 8000234:	78cb      	ldrb	r3, [r1, #3]
 8000236:	78c4      	ldrb	r4, [r0, #3]
 8000238:	405c      	eors	r4, r3
 800023a:	70cc      	strb	r4, [r1, #3]
 800023c:	1d00      	adds	r0, r0, #4
 800023e:	1d09      	adds	r1, r1, #4
 8000240:	1e52      	subs	r2, r2, #1
 8000242:	d1eb      	bne.n	800021c <AddRoundKey+0xe>
 8000244:	bc10      	pop	{r4}
 8000246:	4770      	bx	lr

08000248 <SubBytes>:
 8000248:	4830      	ldr	r0, [pc, #192]	; (800030c <.text_14>)
 800024a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800024c:	2204      	movs	r2, #4
 800024e:	4831      	ldr	r0, [pc, #196]	; (8000314 <.text_16>)
 8000250:	e201      	b.n	8000656 <.text_20>

08000252 <ShiftRows>:
 8000252:	482e      	ldr	r0, [pc, #184]	; (800030c <.text_14>)
 8000254:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000256:	7841      	ldrb	r1, [r0, #1]
 8000258:	7942      	ldrb	r2, [r0, #5]
 800025a:	7042      	strb	r2, [r0, #1]
 800025c:	7a42      	ldrb	r2, [r0, #9]
 800025e:	7142      	strb	r2, [r0, #5]
 8000260:	7b42      	ldrb	r2, [r0, #13]
 8000262:	7242      	strb	r2, [r0, #9]
 8000264:	7341      	strb	r1, [r0, #13]
 8000266:	7881      	ldrb	r1, [r0, #2]
 8000268:	7a82      	ldrb	r2, [r0, #10]
 800026a:	7082      	strb	r2, [r0, #2]
 800026c:	7281      	strb	r1, [r0, #10]
 800026e:	7981      	ldrb	r1, [r0, #6]
 8000270:	7b82      	ldrb	r2, [r0, #14]
 8000272:	7182      	strb	r2, [r0, #6]
 8000274:	7381      	strb	r1, [r0, #14]
 8000276:	78c1      	ldrb	r1, [r0, #3]
 8000278:	7bc2      	ldrb	r2, [r0, #15]
 800027a:	70c2      	strb	r2, [r0, #3]
 800027c:	7ac2      	ldrb	r2, [r0, #11]
 800027e:	73c2      	strb	r2, [r0, #15]
 8000280:	79c2      	ldrb	r2, [r0, #7]
 8000282:	72c2      	strb	r2, [r0, #11]
 8000284:	71c1      	strb	r1, [r0, #7]
 8000286:	4770      	bx	lr

08000288 <MixColumns>:
 8000288:	b4fc      	push	{r2, r3, r4, r5, r6, r7}
 800028a:	4820      	ldr	r0, [pc, #128]	; (800030c <.text_14>)
 800028c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800028e:	2104      	movs	r1, #4
 8000290:	7806      	ldrb	r6, [r0, #0]
 8000292:	466a      	mov	r2, sp
 8000294:	7116      	strb	r6, [r2, #4]
 8000296:	7847      	ldrb	r7, [r0, #1]
 8000298:	003d      	movs	r5, r7
 800029a:	4075      	eors	r5, r6
 800029c:	78c2      	ldrb	r2, [r0, #3]
 800029e:	7883      	ldrb	r3, [r0, #2]
 80002a0:	001c      	movs	r4, r3
 80002a2:	406c      	eors	r4, r5
 80002a4:	4054      	eors	r4, r2
 80002a6:	9600      	str	r6, [sp, #0]
 80002a8:	006e      	lsls	r6, r5, #1
 80002aa:	46b4      	mov	ip, r6
 80002ac:	09ee      	lsrs	r6, r5, #7
 80002ae:	251b      	movs	r5, #27
 80002b0:	436e      	muls	r6, r5
 80002b2:	4665      	mov	r5, ip
 80002b4:	406e      	eors	r6, r5
 80002b6:	4066      	eors	r6, r4
 80002b8:	9d00      	ldr	r5, [sp, #0]
 80002ba:	406e      	eors	r6, r5
 80002bc:	7006      	strb	r6, [r0, #0]
 80002be:	001d      	movs	r5, r3
 80002c0:	407d      	eors	r5, r7
 80002c2:	006e      	lsls	r6, r5, #1
 80002c4:	46b4      	mov	ip, r6
 80002c6:	09ee      	lsrs	r6, r5, #7
 80002c8:	251b      	movs	r5, #27
 80002ca:	436e      	muls	r6, r5
 80002cc:	4665      	mov	r5, ip
 80002ce:	406e      	eors	r6, r5
 80002d0:	4066      	eors	r6, r4
 80002d2:	407e      	eors	r6, r7
 80002d4:	7046      	strb	r6, [r0, #1]
 80002d6:	0016      	movs	r6, r2
 80002d8:	405e      	eors	r6, r3
 80002da:	0075      	lsls	r5, r6, #1
 80002dc:	09f6      	lsrs	r6, r6, #7
 80002de:	271b      	movs	r7, #27
 80002e0:	437e      	muls	r6, r7
 80002e2:	406e      	eors	r6, r5
 80002e4:	4066      	eors	r6, r4
 80002e6:	405e      	eors	r6, r3
 80002e8:	7086      	strb	r6, [r0, #2]
 80002ea:	466b      	mov	r3, sp
 80002ec:	791b      	ldrb	r3, [r3, #4]
 80002ee:	4053      	eors	r3, r2
 80002f0:	005d      	lsls	r5, r3, #1
 80002f2:	09db      	lsrs	r3, r3, #7
 80002f4:	261b      	movs	r6, #27
 80002f6:	4373      	muls	r3, r6
 80002f8:	406b      	eors	r3, r5
 80002fa:	405c      	eors	r4, r3
 80002fc:	4054      	eors	r4, r2
 80002fe:	70c4      	strb	r4, [r0, #3]
 8000300:	1d00      	adds	r0, r0, #4
 8000302:	1e49      	subs	r1, r1, #1
 8000304:	d1c4      	bne.n	8000290 <MixColumns+0x8>
 8000306:	bcf3      	pop	{r0, r1, r4, r5, r6, r7}
 8000308:	4770      	bx	lr
	...

0800030c <.text_14>:
 800030c:	20000000 	.word	0x20000000

08000310 <.text_15>:
 8000310:	200001a8 	.word	0x200001a8

08000314 <.text_16>:
 8000314:	08006438 	.word	0x08006438

08000318 <.text_17>:
 8000318:	08006638 	.word	0x08006638

0800031c <InvMixColumns>:
 800031c:	b4f0      	push	{r4, r5, r6, r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	48e2      	ldr	r0, [pc, #904]	; (80006ac <.text_22>)
 8000322:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000324:	2004      	movs	r0, #4
 8000326:	9008      	str	r0, [sp, #32]
 8000328:	7808      	ldrb	r0, [r1, #0]
 800032a:	466a      	mov	r2, sp
 800032c:	7090      	strb	r0, [r2, #2]
 800032e:	7848      	ldrb	r0, [r1, #1]
 8000330:	7150      	strb	r0, [r2, #5]
 8000332:	7888      	ldrb	r0, [r1, #2]
 8000334:	7110      	strb	r0, [r2, #4]
 8000336:	78c8      	ldrb	r0, [r1, #3]
 8000338:	70d0      	strb	r0, [r2, #3]
 800033a:	4668      	mov	r0, sp
 800033c:	7880      	ldrb	r0, [r0, #2]
 800033e:	09c0      	lsrs	r0, r0, #7
 8000340:	221b      	movs	r2, #27
 8000342:	4350      	muls	r0, r2
 8000344:	466a      	mov	r2, sp
 8000346:	7610      	strb	r0, [r2, #24]
 8000348:	4668      	mov	r0, sp
 800034a:	7880      	ldrb	r0, [r0, #2]
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	76d0      	strb	r0, [r2, #27]
 8000350:	4668      	mov	r0, sp
 8000352:	7ec0      	ldrb	r0, [r0, #27]
 8000354:	7e12      	ldrb	r2, [r2, #24]
 8000356:	4042      	eors	r2, r0
 8000358:	4668      	mov	r0, sp
 800035a:	7042      	strb	r2, [r0, #1]
 800035c:	7840      	ldrb	r0, [r0, #1]
 800035e:	466a      	mov	r2, sp
 8000360:	7710      	strb	r0, [r2, #28]
 8000362:	4668      	mov	r0, sp
 8000364:	7840      	ldrb	r0, [r0, #1]
 8000366:	09c2      	lsrs	r2, r0, #7
 8000368:	231b      	movs	r3, #27
 800036a:	435a      	muls	r2, r3
 800036c:	466b      	mov	r3, sp
 800036e:	75da      	strb	r2, [r3, #23]
 8000370:	0040      	lsls	r0, r0, #1
 8000372:	466a      	mov	r2, sp
 8000374:	7dd2      	ldrb	r2, [r2, #23]
 8000376:	4042      	eors	r2, r0
 8000378:	4668      	mov	r0, sp
 800037a:	7342      	strb	r2, [r0, #13]
 800037c:	7b40      	ldrb	r0, [r0, #13]
 800037e:	466a      	mov	r2, sp
 8000380:	7690      	strb	r0, [r2, #26]
 8000382:	4668      	mov	r0, sp
 8000384:	7940      	ldrb	r0, [r0, #5]
 8000386:	09c0      	lsrs	r0, r0, #7
 8000388:	221b      	movs	r2, #27
 800038a:	4350      	muls	r0, r2
 800038c:	466a      	mov	r2, sp
 800038e:	7590      	strb	r0, [r2, #22]
 8000390:	4668      	mov	r0, sp
 8000392:	7940      	ldrb	r0, [r0, #5]
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	7550      	strb	r0, [r2, #21]
 8000398:	4668      	mov	r0, sp
 800039a:	7d40      	ldrb	r0, [r0, #21]
 800039c:	7d92      	ldrb	r2, [r2, #22]
 800039e:	4042      	eors	r2, r0
 80003a0:	09d0      	lsrs	r0, r2, #7
 80003a2:	231b      	movs	r3, #27
 80003a4:	4358      	muls	r0, r3
 80003a6:	466b      	mov	r3, sp
 80003a8:	7518      	strb	r0, [r3, #20]
 80003aa:	0050      	lsls	r0, r2, #1
 80003ac:	7d1b      	ldrb	r3, [r3, #20]
 80003ae:	4043      	eors	r3, r0
 80003b0:	4668      	mov	r0, sp
 80003b2:	7303      	strb	r3, [r0, #12]
 80003b4:	7b00      	ldrb	r0, [r0, #12]
 80003b6:	466b      	mov	r3, sp
 80003b8:	7658      	strb	r0, [r3, #25]
 80003ba:	4668      	mov	r0, sp
 80003bc:	7900      	ldrb	r0, [r0, #4]
 80003be:	09c0      	lsrs	r0, r0, #7
 80003c0:	231b      	movs	r3, #27
 80003c2:	4358      	muls	r0, r3
 80003c4:	466b      	mov	r3, sp
 80003c6:	74d8      	strb	r0, [r3, #19]
 80003c8:	4668      	mov	r0, sp
 80003ca:	7900      	ldrb	r0, [r0, #4]
 80003cc:	0040      	lsls	r0, r0, #1
 80003ce:	7498      	strb	r0, [r3, #18]
 80003d0:	4668      	mov	r0, sp
 80003d2:	7c9b      	ldrb	r3, [r3, #18]
 80003d4:	466c      	mov	r4, sp
 80003d6:	7ce4      	ldrb	r4, [r4, #19]
 80003d8:	405c      	eors	r4, r3
 80003da:	7004      	strb	r4, [r0, #0]
 80003dc:	7804      	ldrb	r4, [r0, #0]
 80003de:	09e3      	lsrs	r3, r4, #7
 80003e0:	251b      	movs	r5, #27
 80003e2:	436b      	muls	r3, r5
 80003e4:	466d      	mov	r5, sp
 80003e6:	746b      	strb	r3, [r5, #17]
 80003e8:	0060      	lsls	r0, r4, #1
 80003ea:	466b      	mov	r3, sp
 80003ec:	7c5b      	ldrb	r3, [r3, #17]
 80003ee:	4043      	eors	r3, r0
 80003f0:	4668      	mov	r0, sp
 80003f2:	72c3      	strb	r3, [r0, #11]
 80003f4:	7ac5      	ldrb	r5, [r0, #11]
 80003f6:	78c0      	ldrb	r0, [r0, #3]
 80003f8:	09c0      	lsrs	r0, r0, #7
 80003fa:	231b      	movs	r3, #27
 80003fc:	4358      	muls	r0, r3
 80003fe:	466b      	mov	r3, sp
 8000400:	7418      	strb	r0, [r3, #16]
 8000402:	4668      	mov	r0, sp
 8000404:	78c0      	ldrb	r0, [r0, #3]
 8000406:	0040      	lsls	r0, r0, #1
 8000408:	73d8      	strb	r0, [r3, #15]
 800040a:	4668      	mov	r0, sp
 800040c:	7bc0      	ldrb	r0, [r0, #15]
 800040e:	7c1b      	ldrb	r3, [r3, #16]
 8000410:	4043      	eors	r3, r0
 8000412:	09d8      	lsrs	r0, r3, #7
 8000414:	261b      	movs	r6, #27
 8000416:	4370      	muls	r0, r6
 8000418:	466e      	mov	r6, sp
 800041a:	73b0      	strb	r0, [r6, #14]
 800041c:	0058      	lsls	r0, r3, #1
 800041e:	7bb6      	ldrb	r6, [r6, #14]
 8000420:	4046      	eors	r6, r0
 8000422:	4668      	mov	r0, sp
 8000424:	7286      	strb	r6, [r0, #10]
 8000426:	7a86      	ldrb	r6, [r0, #10]
 8000428:	09f0      	lsrs	r0, r6, #7
 800042a:	271b      	movs	r7, #27
 800042c:	4378      	muls	r0, r7
 800042e:	466f      	mov	r7, sp
 8000430:	7278      	strb	r0, [r7, #9]
 8000432:	09e8      	lsrs	r0, r5, #7
 8000434:	271b      	movs	r7, #27
 8000436:	4378      	muls	r0, r7
 8000438:	466f      	mov	r7, sp
 800043a:	7238      	strb	r0, [r7, #8]
 800043c:	4668      	mov	r0, sp
 800043e:	7e40      	ldrb	r0, [r0, #25]
 8000440:	09c0      	lsrs	r0, r0, #7
 8000442:	271b      	movs	r7, #27
 8000444:	4378      	muls	r0, r7
 8000446:	466f      	mov	r7, sp
 8000448:	71f8      	strb	r0, [r7, #7]
 800044a:	4668      	mov	r0, sp
 800044c:	7e80      	ldrb	r0, [r0, #26]
 800044e:	09c0      	lsrs	r0, r0, #7
 8000450:	271b      	movs	r7, #27
 8000452:	4378      	muls	r0, r7
 8000454:	466f      	mov	r7, sp
 8000456:	71b8      	strb	r0, [r7, #6]
 8000458:	4668      	mov	r0, sp
 800045a:	7880      	ldrb	r0, [r0, #2]
 800045c:	7f3f      	ldrb	r7, [r7, #28]
 800045e:	4047      	eors	r7, r0
 8000460:	0078      	lsls	r0, r7, #1
 8000462:	466f      	mov	r7, sp
 8000464:	7e3f      	ldrb	r7, [r7, #24]
 8000466:	4047      	eors	r7, r0
 8000468:	4668      	mov	r0, sp
 800046a:	7dc0      	ldrb	r0, [r0, #23]
 800046c:	4078      	eors	r0, r7
 800046e:	466f      	mov	r7, sp
 8000470:	7ebf      	ldrb	r7, [r7, #26]
 8000472:	007f      	lsls	r7, r7, #1
 8000474:	4047      	eors	r7, r0
 8000476:	4668      	mov	r0, sp
 8000478:	7980      	ldrb	r0, [r0, #6]
 800047a:	4078      	eors	r0, r7
 800047c:	466f      	mov	r7, sp
 800047e:	797f      	ldrb	r7, [r7, #5]
 8000480:	4047      	eors	r7, r0
 8000482:	4668      	mov	r0, sp
 8000484:	7d40      	ldrb	r0, [r0, #21]
 8000486:	4078      	eors	r0, r7
 8000488:	466f      	mov	r7, sp
 800048a:	7dbf      	ldrb	r7, [r7, #22]
 800048c:	4047      	eors	r7, r0
 800048e:	4668      	mov	r0, sp
 8000490:	7e40      	ldrb	r0, [r0, #25]
 8000492:	0040      	lsls	r0, r0, #1
 8000494:	4078      	eors	r0, r7
 8000496:	466f      	mov	r7, sp
 8000498:	79ff      	ldrb	r7, [r7, #7]
 800049a:	4047      	eors	r7, r0
 800049c:	4668      	mov	r0, sp
 800049e:	7900      	ldrb	r0, [r0, #4]
 80004a0:	4078      	eors	r0, r7
 80004a2:	0064      	lsls	r4, r4, #1
 80004a4:	4044      	eors	r4, r0
 80004a6:	4668      	mov	r0, sp
 80004a8:	7c40      	ldrb	r0, [r0, #17]
 80004aa:	4060      	eors	r0, r4
 80004ac:	006c      	lsls	r4, r5, #1
 80004ae:	4044      	eors	r4, r0
 80004b0:	4668      	mov	r0, sp
 80004b2:	7a00      	ldrb	r0, [r0, #8]
 80004b4:	4060      	eors	r0, r4
 80004b6:	466c      	mov	r4, sp
 80004b8:	78e4      	ldrb	r4, [r4, #3]
 80004ba:	4044      	eors	r4, r0
 80004bc:	0070      	lsls	r0, r6, #1
 80004be:	4060      	eors	r0, r4
 80004c0:	466c      	mov	r4, sp
 80004c2:	7a64      	ldrb	r4, [r4, #9]
 80004c4:	4044      	eors	r4, r0
 80004c6:	700c      	strb	r4, [r1, #0]
 80004c8:	4668      	mov	r0, sp
 80004ca:	7b47      	ldrb	r7, [r0, #13]
 80004cc:	7b04      	ldrb	r4, [r0, #12]
 80004ce:	7ac5      	ldrb	r5, [r0, #11]
 80004d0:	7a86      	ldrb	r6, [r0, #10]
 80004d2:	7880      	ldrb	r0, [r0, #2]
 80004d4:	007f      	lsls	r7, r7, #1
 80004d6:	4047      	eors	r7, r0
 80004d8:	4668      	mov	r0, sp
 80004da:	7980      	ldrb	r0, [r0, #6]
 80004dc:	4078      	eors	r0, r7
 80004de:	4684      	mov	ip, r0
 80004e0:	4668      	mov	r0, sp
 80004e2:	7d47      	ldrb	r7, [r0, #21]
 80004e4:	4660      	mov	r0, ip
 80004e6:	4047      	eors	r7, r0
 80004e8:	4668      	mov	r0, sp
 80004ea:	7d80      	ldrb	r0, [r0, #22]
 80004ec:	4078      	eors	r0, r7
 80004ee:	0057      	lsls	r7, r2, #1
 80004f0:	4047      	eors	r7, r0
 80004f2:	4668      	mov	r0, sp
 80004f4:	7d00      	ldrb	r0, [r0, #20]
 80004f6:	4078      	eors	r0, r7
 80004f8:	0064      	lsls	r4, r4, #1
 80004fa:	4044      	eors	r4, r0
 80004fc:	4668      	mov	r0, sp
 80004fe:	79c0      	ldrb	r0, [r0, #7]
 8000500:	4060      	eors	r0, r4
 8000502:	466c      	mov	r4, sp
 8000504:	7924      	ldrb	r4, [r4, #4]
 8000506:	4044      	eors	r4, r0
 8000508:	4668      	mov	r0, sp
 800050a:	7c80      	ldrb	r0, [r0, #18]
 800050c:	4060      	eors	r0, r4
 800050e:	466c      	mov	r4, sp
 8000510:	7ce4      	ldrb	r4, [r4, #19]
 8000512:	4044      	eors	r4, r0
 8000514:	0068      	lsls	r0, r5, #1
 8000516:	4060      	eors	r0, r4
 8000518:	466c      	mov	r4, sp
 800051a:	7a24      	ldrb	r4, [r4, #8]
 800051c:	4044      	eors	r4, r0
 800051e:	4668      	mov	r0, sp
 8000520:	78c0      	ldrb	r0, [r0, #3]
 8000522:	4060      	eors	r0, r4
 8000524:	005c      	lsls	r4, r3, #1
 8000526:	4044      	eors	r4, r0
 8000528:	4668      	mov	r0, sp
 800052a:	7b80      	ldrb	r0, [r0, #14]
 800052c:	4060      	eors	r0, r4
 800052e:	0074      	lsls	r4, r6, #1
 8000530:	4044      	eors	r4, r0
 8000532:	4668      	mov	r0, sp
 8000534:	7a40      	ldrb	r0, [r0, #9]
 8000536:	4060      	eors	r0, r4
 8000538:	7048      	strb	r0, [r1, #1]
 800053a:	4668      	mov	r0, sp
 800053c:	7846      	ldrb	r6, [r0, #1]
 800053e:	7b40      	ldrb	r0, [r0, #13]
 8000540:	466c      	mov	r4, sp
 8000542:	75a0      	strb	r0, [r4, #22]
 8000544:	4668      	mov	r0, sp
 8000546:	7b00      	ldrb	r0, [r0, #12]
 8000548:	7824      	ldrb	r4, [r4, #0]
 800054a:	466d      	mov	r5, sp
 800054c:	756c      	strb	r4, [r5, #21]
 800054e:	466c      	mov	r4, sp
 8000550:	7ae4      	ldrb	r4, [r4, #11]
 8000552:	7aad      	ldrb	r5, [r5, #10]
 8000554:	466f      	mov	r7, sp
 8000556:	78bf      	ldrb	r7, [r7, #2]
 8000558:	0076      	lsls	r6, r6, #1
 800055a:	407e      	eors	r6, r7
 800055c:	466f      	mov	r7, sp
 800055e:	7dff      	ldrb	r7, [r7, #23]
 8000560:	4077      	eors	r7, r6
 8000562:	466e      	mov	r6, sp
 8000564:	7db6      	ldrb	r6, [r6, #22]
 8000566:	0076      	lsls	r6, r6, #1
 8000568:	407e      	eors	r6, r7
 800056a:	466f      	mov	r7, sp
 800056c:	79bf      	ldrb	r7, [r7, #6]
 800056e:	4077      	eors	r7, r6
 8000570:	466e      	mov	r6, sp
 8000572:	7976      	ldrb	r6, [r6, #5]
 8000574:	407e      	eors	r6, r7
 8000576:	0040      	lsls	r0, r0, #1
 8000578:	4070      	eors	r0, r6
 800057a:	466e      	mov	r6, sp
 800057c:	79f6      	ldrb	r6, [r6, #7]
 800057e:	4046      	eors	r6, r0
 8000580:	4668      	mov	r0, sp
 8000582:	7c80      	ldrb	r0, [r0, #18]
 8000584:	4070      	eors	r0, r6
 8000586:	466e      	mov	r6, sp
 8000588:	7cf6      	ldrb	r6, [r6, #19]
 800058a:	4046      	eors	r6, r0
 800058c:	4668      	mov	r0, sp
 800058e:	7d40      	ldrb	r0, [r0, #21]
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4070      	eors	r0, r6
 8000594:	466e      	mov	r6, sp
 8000596:	7c76      	ldrb	r6, [r6, #17]
 8000598:	4046      	eors	r6, r0
 800059a:	0060      	lsls	r0, r4, #1
 800059c:	4070      	eors	r0, r6
 800059e:	466c      	mov	r4, sp
 80005a0:	7a24      	ldrb	r4, [r4, #8]
 80005a2:	4044      	eors	r4, r0
 80005a4:	4668      	mov	r0, sp
 80005a6:	78c0      	ldrb	r0, [r0, #3]
 80005a8:	4060      	eors	r0, r4
 80005aa:	466c      	mov	r4, sp
 80005ac:	7be4      	ldrb	r4, [r4, #15]
 80005ae:	4044      	eors	r4, r0
 80005b0:	4668      	mov	r0, sp
 80005b2:	7c00      	ldrb	r0, [r0, #16]
 80005b4:	4060      	eors	r0, r4
 80005b6:	006c      	lsls	r4, r5, #1
 80005b8:	4044      	eors	r4, r0
 80005ba:	4668      	mov	r0, sp
 80005bc:	7a40      	ldrb	r0, [r0, #9]
 80005be:	4060      	eors	r0, r4
 80005c0:	7088      	strb	r0, [r1, #2]
 80005c2:	4668      	mov	r0, sp
 80005c4:	7b40      	ldrb	r0, [r0, #13]
 80005c6:	466c      	mov	r4, sp
 80005c8:	7062      	strb	r2, [r4, #1]
 80005ca:	466a      	mov	r2, sp
 80005cc:	7b12      	ldrb	r2, [r2, #12]
 80005ce:	7ae4      	ldrb	r4, [r4, #11]
 80005d0:	466d      	mov	r5, sp
 80005d2:	7aad      	ldrb	r5, [r5, #10]
 80005d4:	466e      	mov	r6, sp
 80005d6:	78b7      	ldrb	r7, [r6, #2]
 80005d8:	7ef6      	ldrb	r6, [r6, #27]
 80005da:	407e      	eors	r6, r7
 80005dc:	466f      	mov	r7, sp
 80005de:	7e3f      	ldrb	r7, [r7, #24]
 80005e0:	4077      	eors	r7, r6
 80005e2:	0040      	lsls	r0, r0, #1
 80005e4:	4078      	eors	r0, r7
 80005e6:	466e      	mov	r6, sp
 80005e8:	79b6      	ldrb	r6, [r6, #6]
 80005ea:	4046      	eors	r6, r0
 80005ec:	4668      	mov	r0, sp
 80005ee:	7940      	ldrb	r0, [r0, #5]
 80005f0:	4070      	eors	r0, r6
 80005f2:	466e      	mov	r6, sp
 80005f4:	7876      	ldrb	r6, [r6, #1]
 80005f6:	0076      	lsls	r6, r6, #1
 80005f8:	4046      	eors	r6, r0
 80005fa:	4668      	mov	r0, sp
 80005fc:	7d00      	ldrb	r0, [r0, #20]
 80005fe:	4070      	eors	r0, r6
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	4042      	eors	r2, r0
 8000604:	4668      	mov	r0, sp
 8000606:	79c0      	ldrb	r0, [r0, #7]
 8000608:	4050      	eors	r0, r2
 800060a:	466a      	mov	r2, sp
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4042      	eors	r2, r0
 8000610:	0060      	lsls	r0, r4, #1
 8000612:	4050      	eors	r0, r2
 8000614:	466a      	mov	r2, sp
 8000616:	7a12      	ldrb	r2, [r2, #8]
 8000618:	4042      	eors	r2, r0
 800061a:	4668      	mov	r0, sp
 800061c:	7bc0      	ldrb	r0, [r0, #15]
 800061e:	4050      	eors	r0, r2
 8000620:	466a      	mov	r2, sp
 8000622:	7c12      	ldrb	r2, [r2, #16]
 8000624:	4042      	eors	r2, r0
 8000626:	0058      	lsls	r0, r3, #1
 8000628:	4050      	eors	r0, r2
 800062a:	466a      	mov	r2, sp
 800062c:	7b92      	ldrb	r2, [r2, #14]
 800062e:	4042      	eors	r2, r0
 8000630:	0068      	lsls	r0, r5, #1
 8000632:	4050      	eors	r0, r2
 8000634:	466a      	mov	r2, sp
 8000636:	7a52      	ldrb	r2, [r2, #9]
 8000638:	4042      	eors	r2, r0
 800063a:	70ca      	strb	r2, [r1, #3]
 800063c:	1d09      	adds	r1, r1, #4
 800063e:	9808      	ldr	r0, [sp, #32]
 8000640:	1e40      	subs	r0, r0, #1
 8000642:	9008      	str	r0, [sp, #32]
 8000644:	d000      	beq.n	8000648 <InvMixColumns+0x32c>
 8000646:	e66f      	b.n	8000328 <InvMixColumns+0xc>
 8000648:	b009      	add	sp, #36	; 0x24
 800064a:	bcf0      	pop	{r4, r5, r6, r7}
 800064c:	4770      	bx	lr

0800064e <InvSubBytes>:
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <.text_22>)
 8000650:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000652:	2204      	movs	r2, #4
 8000654:	48ba      	ldr	r0, [pc, #744]	; (8000940 <.text_30>)

08000656 <.text_20>:
 8000656:	780b      	ldrb	r3, [r1, #0]
 8000658:	5cc3      	ldrb	r3, [r0, r3]
 800065a:	700b      	strb	r3, [r1, #0]
 800065c:	790b      	ldrb	r3, [r1, #4]
 800065e:	5cc3      	ldrb	r3, [r0, r3]
 8000660:	710b      	strb	r3, [r1, #4]
 8000662:	7a0b      	ldrb	r3, [r1, #8]
 8000664:	5cc3      	ldrb	r3, [r0, r3]
 8000666:	720b      	strb	r3, [r1, #8]
 8000668:	7b0b      	ldrb	r3, [r1, #12]
 800066a:	5cc3      	ldrb	r3, [r0, r3]
 800066c:	730b      	strb	r3, [r1, #12]
 800066e:	1c49      	adds	r1, r1, #1
 8000670:	1e52      	subs	r2, r2, #1
 8000672:	d1f0      	bne.n	8000656 <.text_20>
 8000674:	4770      	bx	lr

08000676 <InvShiftRows>:
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <.text_22>)
 8000678:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800067a:	7b41      	ldrb	r1, [r0, #13]
 800067c:	7a42      	ldrb	r2, [r0, #9]
 800067e:	7342      	strb	r2, [r0, #13]
 8000680:	7942      	ldrb	r2, [r0, #5]
 8000682:	7242      	strb	r2, [r0, #9]
 8000684:	7842      	ldrb	r2, [r0, #1]
 8000686:	7142      	strb	r2, [r0, #5]
 8000688:	7041      	strb	r1, [r0, #1]
 800068a:	7881      	ldrb	r1, [r0, #2]
 800068c:	7a82      	ldrb	r2, [r0, #10]
 800068e:	7082      	strb	r2, [r0, #2]
 8000690:	7281      	strb	r1, [r0, #10]
 8000692:	7981      	ldrb	r1, [r0, #6]
 8000694:	7b82      	ldrb	r2, [r0, #14]
 8000696:	7182      	strb	r2, [r0, #6]
 8000698:	7381      	strb	r1, [r0, #14]
 800069a:	78c1      	ldrb	r1, [r0, #3]
 800069c:	79c2      	ldrb	r2, [r0, #7]
 800069e:	70c2      	strb	r2, [r0, #3]
 80006a0:	7ac2      	ldrb	r2, [r0, #11]
 80006a2:	71c2      	strb	r2, [r0, #7]
 80006a4:	7bc2      	ldrb	r2, [r0, #15]
 80006a6:	72c2      	strb	r2, [r0, #11]
 80006a8:	73c1      	strb	r1, [r0, #15]
 80006aa:	4770      	bx	lr

080006ac <.text_22>:
 80006ac:	20000000 	.word	0x20000000

080006b0 <Cipher>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fdab 	bl	800020e <AddRoundKey>
 80006b8:	2401      	movs	r4, #1
 80006ba:	f7ff fdc5 	bl	8000248 <SubBytes>
 80006be:	f7ff fdc8 	bl	8000252 <ShiftRows>
 80006c2:	f7ff fde1 	bl	8000288 <MixColumns>
 80006c6:	b2e0      	uxtb	r0, r4
 80006c8:	f7ff fda1 	bl	800020e <AddRoundKey>
 80006cc:	1c64      	adds	r4, r4, #1
 80006ce:	b2e0      	uxtb	r0, r4
 80006d0:	280a      	cmp	r0, #10
 80006d2:	dbf2      	blt.n	80006ba <Cipher+0xa>
 80006d4:	f7ff fdb8 	bl	8000248 <SubBytes>
 80006d8:	f7ff fdbb 	bl	8000252 <ShiftRows>
 80006dc:	200a      	movs	r0, #10
 80006de:	f7ff fd96 	bl	800020e <AddRoundKey>
 80006e2:	bd10      	pop	{r4, pc}

080006e4 <InvCipher>:
 80006e4:	b510      	push	{r4, lr}
 80006e6:	200a      	movs	r0, #10
 80006e8:	f7ff fd91 	bl	800020e <AddRoundKey>
 80006ec:	2409      	movs	r4, #9
 80006ee:	f7ff ffc2 	bl	8000676 <InvShiftRows>
 80006f2:	f7ff ffac 	bl	800064e <InvSubBytes>
 80006f6:	b2e0      	uxtb	r0, r4
 80006f8:	f7ff fd89 	bl	800020e <AddRoundKey>
 80006fc:	f7ff fe0e 	bl	800031c <InvMixColumns>
 8000700:	1e64      	subs	r4, r4, #1
 8000702:	0620      	lsls	r0, r4, #24
 8000704:	d1f3      	bne.n	80006ee <InvCipher+0xa>
 8000706:	f7ff ffb6 	bl	8000676 <InvShiftRows>
 800070a:	f7ff ffa0 	bl	800064e <InvSubBytes>
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fd7d 	bl	800020e <AddRoundKey>
 8000714:	bd10      	pop	{r4, pc}

08000716 <BlockCopy>:
 8000716:	2200      	movs	r2, #0
 8000718:	5c8b      	ldrb	r3, [r1, r2]
 800071a:	5483      	strb	r3, [r0, r2]
 800071c:	1c52      	adds	r2, r2, #1
 800071e:	5c8b      	ldrb	r3, [r1, r2]
 8000720:	5483      	strb	r3, [r0, r2]
 8000722:	1c52      	adds	r2, r2, #1
 8000724:	5c8b      	ldrb	r3, [r1, r2]
 8000726:	5483      	strb	r3, [r0, r2]
 8000728:	1c52      	adds	r2, r2, #1
 800072a:	5c8b      	ldrb	r3, [r1, r2]
 800072c:	5483      	strb	r3, [r0, r2]
 800072e:	1c52      	adds	r2, r2, #1
 8000730:	2a10      	cmp	r2, #16
 8000732:	dbf1      	blt.n	8000718 <BlockCopy+0x2>
 8000734:	4770      	bx	lr

08000736 <XorWithIv>:
 8000736:	b430      	push	{r4, r5}
 8000738:	2100      	movs	r1, #0
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <.text_31>)
 800073c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800073e:	1843      	adds	r3, r0, r1
 8000740:	781c      	ldrb	r4, [r3, #0]
 8000742:	5c55      	ldrb	r5, [r2, r1]
 8000744:	4065      	eors	r5, r4
 8000746:	701d      	strb	r5, [r3, #0]
 8000748:	1c49      	adds	r1, r1, #1
 800074a:	1843      	adds	r3, r0, r1
 800074c:	781c      	ldrb	r4, [r3, #0]
 800074e:	5c55      	ldrb	r5, [r2, r1]
 8000750:	4065      	eors	r5, r4
 8000752:	701d      	strb	r5, [r3, #0]
 8000754:	1c49      	adds	r1, r1, #1
 8000756:	1843      	adds	r3, r0, r1
 8000758:	781c      	ldrb	r4, [r3, #0]
 800075a:	5c55      	ldrb	r5, [r2, r1]
 800075c:	4065      	eors	r5, r4
 800075e:	701d      	strb	r5, [r3, #0]
 8000760:	1c49      	adds	r1, r1, #1
 8000762:	1843      	adds	r3, r0, r1
 8000764:	781c      	ldrb	r4, [r3, #0]
 8000766:	5c55      	ldrb	r5, [r2, r1]
 8000768:	4065      	eors	r5, r4
 800076a:	701d      	strb	r5, [r3, #0]
 800076c:	1c49      	adds	r1, r1, #1
 800076e:	2910      	cmp	r1, #16
 8000770:	dbe5      	blt.n	800073e <XorWithIv+0x8>
 8000772:	bc30      	pop	{r4, r5}
 8000774:	4770      	bx	lr

08000776 <AES128_CBC_encrypt>:
 8000776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000778:	0006      	movs	r6, r0
 800077a:	000d      	movs	r5, r1
 800077c:	0017      	movs	r7, r2
 800077e:	001c      	movs	r4, r3
 8000780:	0738      	lsls	r0, r7, #28
 8000782:	0f00      	lsrs	r0, r0, #28
 8000784:	9000      	str	r0, [sp, #0]
 8000786:	0030      	movs	r0, r6
 8000788:	f7ff ffc5 	bl	8000716 <BlockCopy>
 800078c:	486d      	ldr	r0, [pc, #436]	; (8000944 <.text_31>)
 800078e:	63c6      	str	r6, [r0, #60]	; 0x3c
 8000790:	6404      	str	r4, [r0, #64]	; 0x40
 8000792:	f7ff fcde 	bl	8000152 <KeyExpansion_enc>
 8000796:	486b      	ldr	r0, [pc, #428]	; (8000944 <.text_31>)
 8000798:	7b40      	ldrb	r0, [r0, #13]
 800079a:	496a      	ldr	r1, [pc, #424]	; (8000944 <.text_31>)
 800079c:	7b89      	ldrb	r1, [r1, #14]
 800079e:	4301      	orrs	r1, r0
 80007a0:	d001      	beq.n	80007a6 <AES128_CBC_encrypt+0x30>
 80007a2:	48ca      	ldr	r0, [pc, #808]	; (8000acc <.text_34>)
 80007a4:	e001      	b.n	80007aa <AES128_CBC_encrypt+0x34>
 80007a6:	4867      	ldr	r0, [pc, #412]	; (8000944 <.text_31>)
 80007a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80007aa:	4966      	ldr	r1, [pc, #408]	; (8000944 <.text_31>)
 80007ac:	6448      	str	r0, [r1, #68]	; 0x44
 80007ae:	2f00      	cmp	r7, #0
 80007b0:	d01f      	beq.n	80007f2 <AES128_CBC_encrypt+0x7c>
 80007b2:	002c      	movs	r4, r5
 80007b4:	2500      	movs	r5, #0
 80007b6:	0020      	movs	r0, r4
 80007b8:	f7ff ffbd 	bl	8000736 <XorWithIv>
 80007bc:	2000      	movs	r0, #0
 80007be:	5c21      	ldrb	r1, [r4, r0]
 80007c0:	5431      	strb	r1, [r6, r0]
 80007c2:	1c40      	adds	r0, r0, #1
 80007c4:	5c21      	ldrb	r1, [r4, r0]
 80007c6:	5431      	strb	r1, [r6, r0]
 80007c8:	1c40      	adds	r0, r0, #1
 80007ca:	5c21      	ldrb	r1, [r4, r0]
 80007cc:	5431      	strb	r1, [r6, r0]
 80007ce:	1c40      	adds	r0, r0, #1
 80007d0:	5c21      	ldrb	r1, [r4, r0]
 80007d2:	5431      	strb	r1, [r6, r0]
 80007d4:	1c40      	adds	r0, r0, #1
 80007d6:	2810      	cmp	r0, #16
 80007d8:	dbf1      	blt.n	80007be <AES128_CBC_encrypt+0x48>
 80007da:	485a      	ldr	r0, [pc, #360]	; (8000944 <.text_31>)
 80007dc:	63c6      	str	r6, [r0, #60]	; 0x3c
 80007de:	f7ff ff67 	bl	80006b0 <Cipher>
 80007e2:	4858      	ldr	r0, [pc, #352]	; (8000944 <.text_31>)
 80007e4:	6446      	str	r6, [r0, #68]	; 0x44
 80007e6:	3410      	adds	r4, #16
 80007e8:	3610      	adds	r6, #16
 80007ea:	3510      	adds	r5, #16
 80007ec:	42bd      	cmp	r5, r7
 80007ee:	d3e2      	bcc.n	80007b6 <AES128_CBC_encrypt+0x40>
 80007f0:	0025      	movs	r5, r4
 80007f2:	9800      	ldr	r0, [sp, #0]
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d00e      	beq.n	8000816 <AES128_CBC_encrypt+0xa0>
 80007f8:	0029      	movs	r1, r5
 80007fa:	0030      	movs	r0, r6
 80007fc:	f7ff ff8b 	bl	8000716 <BlockCopy>
 8000800:	2010      	movs	r0, #16
 8000802:	9900      	ldr	r1, [sp, #0]
 8000804:	1a41      	subs	r1, r0, r1
 8000806:	9800      	ldr	r0, [sp, #0]
 8000808:	1830      	adds	r0, r6, r0
 800080a:	f004 fd45 	bl	8005298 <__aeabi_memclr>
 800080e:	484d      	ldr	r0, [pc, #308]	; (8000944 <.text_31>)
 8000810:	63c6      	str	r6, [r0, #60]	; 0x3c
 8000812:	f7ff ff4d 	bl	80006b0 <Cipher>
 8000816:	4a4b      	ldr	r2, [pc, #300]	; (8000944 <.text_31>)
 8000818:	7b50      	ldrb	r0, [r2, #13]
 800081a:	2800      	cmp	r0, #0
 800081c:	d002      	beq.n	8000824 <AES128_CBC_encrypt+0xae>
 800081e:	0010      	movs	r0, r2
 8000820:	3060      	adds	r0, #96	; 0x60
 8000822:	e004      	b.n	800082e <AES128_CBC_encrypt+0xb8>
 8000824:	7b90      	ldrb	r0, [r2, #14]
 8000826:	2800      	cmp	r0, #0
 8000828:	d003      	beq.n	8000832 <AES128_CBC_encrypt+0xbc>
 800082a:	0010      	movs	r0, r2
 800082c:	3050      	adds	r0, #80	; 0x50
 800082e:	2110      	movs	r1, #16
 8000830:	e001      	b.n	8000836 <AES128_CBC_encrypt+0xc0>
 8000832:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8000834:	7bd1      	ldrb	r1, [r2, #15]
 8000836:	7411      	strb	r1, [r2, #16]
 8000838:	6410      	str	r0, [r2, #64]	; 0x40
 800083a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800083c <AES128_CBC_decrypt_internal>:
 800083c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	000e      	movs	r6, r1
 8000842:	0014      	movs	r4, r2
 8000844:	0720      	lsls	r0, r4, #28
 8000846:	0f00      	lsrs	r0, r0, #28
 8000848:	9004      	str	r0, [sp, #16]
 800084a:	466d      	mov	r5, sp
 800084c:	4668      	mov	r0, sp
 800084e:	f7ff ff62 	bl	8000716 <BlockCopy>
 8000852:	4f3c      	ldr	r7, [pc, #240]	; (8000944 <.text_31>)
 8000854:	4668      	mov	r0, sp
 8000856:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000858:	f7ff fc56 	bl	8000108 <KeyExpansion_dec>
 800085c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800085e:	6478      	str	r0, [r7, #68]	; 0x44
 8000860:	2c00      	cmp	r4, #0
 8000862:	d025      	beq.n	80008b0 <AES128_CBC_decrypt_internal+0x74>
 8000864:	0030      	movs	r0, r6
 8000866:	9405      	str	r4, [sp, #20]
 8000868:	0029      	movs	r1, r5
 800086a:	2400      	movs	r4, #0
 800086c:	2200      	movs	r2, #0
 800086e:	5c83      	ldrb	r3, [r0, r2]
 8000870:	548b      	strb	r3, [r1, r2]
 8000872:	1c52      	adds	r2, r2, #1
 8000874:	5c83      	ldrb	r3, [r0, r2]
 8000876:	548b      	strb	r3, [r1, r2]
 8000878:	1c52      	adds	r2, r2, #1
 800087a:	5c83      	ldrb	r3, [r0, r2]
 800087c:	548b      	strb	r3, [r1, r2]
 800087e:	1c52      	adds	r2, r2, #1
 8000880:	5c83      	ldrb	r3, [r0, r2]
 8000882:	548b      	strb	r3, [r1, r2]
 8000884:	1c52      	adds	r2, r2, #1
 8000886:	2a10      	cmp	r2, #16
 8000888:	dbf1      	blt.n	800086e <AES128_CBC_decrypt_internal+0x32>
 800088a:	0005      	movs	r5, r0
 800088c:	000e      	movs	r6, r1
 800088e:	63fe      	str	r6, [r7, #60]	; 0x3c
 8000890:	f7ff ff28 	bl	80006e4 <InvCipher>
 8000894:	0030      	movs	r0, r6
 8000896:	f7ff ff4e 	bl	8000736 <XorWithIv>
 800089a:	647d      	str	r5, [r7, #68]	; 0x44
 800089c:	0028      	movs	r0, r5
 800089e:	3010      	adds	r0, #16
 80008a0:	0031      	movs	r1, r6
 80008a2:	3110      	adds	r1, #16
 80008a4:	3410      	adds	r4, #16
 80008a6:	9a05      	ldr	r2, [sp, #20]
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d3df      	bcc.n	800086c <AES128_CBC_decrypt_internal+0x30>
 80008ac:	0006      	movs	r6, r0
 80008ae:	000d      	movs	r5, r1
 80008b0:	9804      	ldr	r0, [sp, #16]
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d00d      	beq.n	80008d2 <AES128_CBC_decrypt_internal+0x96>
 80008b6:	0031      	movs	r1, r6
 80008b8:	0028      	movs	r0, r5
 80008ba:	f7ff ff2c 	bl	8000716 <BlockCopy>
 80008be:	2010      	movs	r0, #16
 80008c0:	9904      	ldr	r1, [sp, #16]
 80008c2:	1a41      	subs	r1, r0, r1
 80008c4:	9804      	ldr	r0, [sp, #16]
 80008c6:	1828      	adds	r0, r5, r0
 80008c8:	f004 fce6 	bl	8005298 <__aeabi_memclr>
 80008cc:	63fd      	str	r5, [r7, #60]	; 0x3c
 80008ce:	f7ff ff09 	bl	80006e4 <InvCipher>
 80008d2:	2100      	movs	r1, #0
 80008d4:	7c38      	ldrb	r0, [r7, #16]
 80008d6:	2210      	movs	r2, #16
 80008d8:	1a13      	subs	r3, r2, r0
 80008da:	466c      	mov	r4, sp
 80008dc:	9a06      	ldr	r2, [sp, #24]
 80008de:	e005      	b.n	80008ec <AES128_CBC_decrypt_internal+0xb0>
 80008e0:	424d      	negs	r5, r1
 80008e2:	1965      	adds	r5, r4, r5
 80008e4:	7bed      	ldrb	r5, [r5, #15]
 80008e6:	5455      	strb	r5, [r2, r1]
 80008e8:	1c49      	adds	r1, r1, #1
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d1f7      	bne.n	80008e0 <AES128_CBC_decrypt_internal+0xa4>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d007      	beq.n	8000904 <AES128_CBC_decrypt_internal+0xc8>
 80008f4:	1851      	adds	r1, r2, r1
 80008f6:	466a      	mov	r2, sp
 80008f8:	7813      	ldrb	r3, [r2, #0]
 80008fa:	700b      	strb	r3, [r1, #0]
 80008fc:	1c52      	adds	r2, r2, #1
 80008fe:	1c49      	adds	r1, r1, #1
 8000900:	1e40      	subs	r0, r0, #1
 8000902:	d1f9      	bne.n	80008f8 <AES128_CBC_decrypt_internal+0xbc>
 8000904:	b007      	add	sp, #28
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000908 <AES_CBC_decrypt_buffer>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	000d      	movs	r5, r1
 800090e:	4c0d      	ldr	r4, [pc, #52]	; (8000944 <.text_31>)
 8000910:	0021      	movs	r1, r4
 8000912:	3170      	adds	r1, #112	; 0x70
 8000914:	6461      	str	r1, [r4, #68]	; 0x44
 8000916:	6420      	str	r0, [r4, #64]	; 0x40
 8000918:	f7ff fbf6 	bl	8000108 <KeyExpansion_dec>
 800091c:	2210      	movs	r2, #16
 800091e:	0029      	movs	r1, r5
 8000920:	4668      	mov	r0, sp
 8000922:	f004 fcbe 	bl	80052a2 <__aeabi_memcpy>
 8000926:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000928:	f7ff fedc 	bl	80006e4 <InvCipher>
 800092c:	0028      	movs	r0, r5
 800092e:	f7ff ff02 	bl	8000736 <XorWithIv>
 8000932:	2210      	movs	r2, #16
 8000934:	4669      	mov	r1, sp
 8000936:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000938:	f004 fcb3 	bl	80052a2 <__aeabi_memcpy>
 800093c:	b005      	add	sp, #20
 800093e:	bd30      	pop	{r4, r5, pc}

08000940 <.text_30>:
 8000940:	08006538 	.word	0x08006538

08000944 <.text_31>:
 8000944:	20000000 	.word	0x20000000

08000948 <get_integrity_cksum>:
 8000948:	6802      	ldr	r2, [r0, #0]
 800094a:	6840      	ldr	r0, [r0, #4]
 800094c:	1810      	adds	r0, r2, r0
 800094e:	680a      	ldr	r2, [r1, #0]
 8000950:	1880      	adds	r0, r0, r2
 8000952:	684a      	ldr	r2, [r1, #4]
 8000954:	1880      	adds	r0, r0, r2
 8000956:	688a      	ldr	r2, [r1, #8]
 8000958:	1880      	adds	r0, r0, r2
 800095a:	68ca      	ldr	r2, [r1, #12]
 800095c:	1880      	adds	r0, r0, r2
 800095e:	690a      	ldr	r2, [r1, #16]
 8000960:	1880      	adds	r0, r0, r2
 8000962:	694a      	ldr	r2, [r1, #20]
 8000964:	1880      	adds	r0, r0, r2
 8000966:	698a      	ldr	r2, [r1, #24]
 8000968:	1880      	adds	r0, r0, r2
 800096a:	69c9      	ldr	r1, [r1, #28]
 800096c:	1841      	adds	r1, r0, r1
 800096e:	43c8      	mvns	r0, r1
 8000970:	4770      	bx	lr

08000972 <enc_utils_retrieve_data_from_flash>:
 8000972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000974:	b094      	sub	sp, #80	; 0x50
 8000976:	0007      	movs	r7, r0
 8000978:	2600      	movs	r6, #0
 800097a:	2500      	movs	r5, #0
 800097c:	f004 fa3e 	bl	8004dfc <GetNVMBoardDataAddress>
 8000980:	2800      	cmp	r0, #0
 8000982:	d100      	bne.n	8000986 <enc_utils_retrieve_data_from_flash+0x14>
 8000984:	e09e      	b.n	8000ac4 <enc_utils_retrieve_data_from_flash+0x152>
 8000986:	aa04      	add	r2, sp, #16
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	f004 fa3d 	bl	8004e08 <NVM_Read>
 800098e:	0001      	movs	r1, r0
 8000990:	ab04      	add	r3, sp, #16
 8000992:	220c      	movs	r2, #12
 8000994:	2000      	movs	r0, #0
 8000996:	781c      	ldrb	r4, [r3, #0]
 8000998:	1900      	adds	r0, r0, r4
 800099a:	785c      	ldrb	r4, [r3, #1]
 800099c:	1900      	adds	r0, r0, r4
 800099e:	789c      	ldrb	r4, [r3, #2]
 80009a0:	1900      	adds	r0, r0, r4
 80009a2:	78dc      	ldrb	r4, [r3, #3]
 80009a4:	1900      	adds	r0, r0, r4
 80009a6:	1d1b      	adds	r3, r3, #4
 80009a8:	1e52      	subs	r2, r2, #1
 80009aa:	d1f4      	bne.n	8000996 <enc_utils_retrieve_data_from_flash+0x24>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d105      	bne.n	80009bc <enc_utils_retrieve_data_from_flash+0x4a>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d003      	beq.n	80009bc <enc_utils_retrieve_data_from_flash+0x4a>
 80009b4:	ac04      	add	r4, sp, #16
 80009b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80009b8:	4288      	cmp	r0, r1
 80009ba:	d002      	beq.n	80009c2 <enc_utils_retrieve_data_from_flash+0x50>
 80009bc:	48c2      	ldr	r0, [pc, #776]	; (8000cc8 <.text_42>)
 80009be:	6086      	str	r6, [r0, #8]
 80009c0:	e080      	b.n	8000ac4 <enc_utils_retrieve_data_from_flash+0x152>
 80009c2:	9905      	ldr	r1, [sp, #20]
 80009c4:	0e08      	lsrs	r0, r1, #24
 80009c6:	2801      	cmp	r0, #1
 80009c8:	d002      	beq.n	80009d0 <enc_utils_retrieve_data_from_flash+0x5e>
 80009ca:	2802      	cmp	r0, #2
 80009cc:	d039      	beq.n	8000a42 <enc_utils_retrieve_data_from_flash+0xd0>
 80009ce:	e046      	b.n	8000a5e <enc_utils_retrieve_data_from_flash+0xec>
 80009d0:	4668      	mov	r0, sp
 80009d2:	0c0a      	lsrs	r2, r1, #16
 80009d4:	7002      	strb	r2, [r0, #0]
 80009d6:	0a09      	lsrs	r1, r1, #8
 80009d8:	73c1      	strb	r1, [r0, #15]
 80009da:	2120      	movs	r1, #32
 80009dc:	5c61      	ldrb	r1, [r4, r1]
 80009de:	7041      	strb	r1, [r0, #1]
 80009e0:	2122      	movs	r1, #34	; 0x22
 80009e2:	5c61      	ldrb	r1, [r4, r1]
 80009e4:	7081      	strb	r1, [r0, #2]
 80009e6:	2124      	movs	r1, #36	; 0x24
 80009e8:	5c61      	ldrb	r1, [r4, r1]
 80009ea:	70c1      	strb	r1, [r0, #3]
 80009ec:	2126      	movs	r1, #38	; 0x26
 80009ee:	5c61      	ldrb	r1, [r4, r1]
 80009f0:	7101      	strb	r1, [r0, #4]
 80009f2:	2128      	movs	r1, #40	; 0x28
 80009f4:	5c61      	ldrb	r1, [r4, r1]
 80009f6:	7141      	strb	r1, [r0, #5]
 80009f8:	212a      	movs	r1, #42	; 0x2a
 80009fa:	5c61      	ldrb	r1, [r4, r1]
 80009fc:	7181      	strb	r1, [r0, #6]
 80009fe:	212c      	movs	r1, #44	; 0x2c
 8000a00:	5c61      	ldrb	r1, [r4, r1]
 8000a02:	71c1      	strb	r1, [r0, #7]
 8000a04:	212d      	movs	r1, #45	; 0x2d
 8000a06:	5c61      	ldrb	r1, [r4, r1]
 8000a08:	7201      	strb	r1, [r0, #8]
 8000a0a:	2121      	movs	r1, #33	; 0x21
 8000a0c:	5c61      	ldrb	r1, [r4, r1]
 8000a0e:	7241      	strb	r1, [r0, #9]
 8000a10:	212b      	movs	r1, #43	; 0x2b
 8000a12:	5c61      	ldrb	r1, [r4, r1]
 8000a14:	7281      	strb	r1, [r0, #10]
 8000a16:	2123      	movs	r1, #35	; 0x23
 8000a18:	5c61      	ldrb	r1, [r4, r1]
 8000a1a:	72c1      	strb	r1, [r0, #11]
 8000a1c:	2129      	movs	r1, #41	; 0x29
 8000a1e:	5c61      	ldrb	r1, [r4, r1]
 8000a20:	7301      	strb	r1, [r0, #12]
 8000a22:	2125      	movs	r1, #37	; 0x25
 8000a24:	5c61      	ldrb	r1, [r4, r1]
 8000a26:	7341      	strb	r1, [r0, #13]
 8000a28:	2127      	movs	r1, #39	; 0x27
 8000a2a:	5c61      	ldrb	r1, [r4, r1]
 8000a2c:	7381      	strb	r1, [r0, #14]
 8000a2e:	0020      	movs	r0, r4
 8000a30:	3020      	adds	r0, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	2200      	movs	r2, #0
 8000a36:	2300      	movs	r3, #0
 8000a38:	c04e      	stmia	r0!, {r1, r2, r3, r6}
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	3110      	adds	r1, #16
 8000a3e:	4668      	mov	r0, sp
 8000a40:	e00b      	b.n	8000a5a <enc_utils_retrieve_data_from_flash+0xe8>
 8000a42:	466a      	mov	r2, sp
 8000a44:	210c      	movs	r1, #12
 8000a46:	48a1      	ldr	r0, [pc, #644]	; (8000ccc <.text_43>)
 8000a48:	f004 f9de 	bl	8004e08 <NVM_Read>
 8000a4c:	4668      	mov	r0, sp
 8000a4e:	4669      	mov	r1, sp
 8000a50:	310c      	adds	r1, #12
 8000a52:	6802      	ldr	r2, [r0, #0]
 8000a54:	600a      	str	r2, [r1, #0]
 8000a56:	0021      	movs	r1, r4
 8000a58:	3110      	adds	r1, #16
 8000a5a:	f7ff ff55 	bl	8000908 <AES_CBC_decrypt_buffer>
 8000a5e:	a804      	add	r0, sp, #16
 8000a60:	7900      	ldrb	r0, [r0, #4]
 8000a62:	9005      	str	r0, [sp, #20]
 8000a64:	7138      	strb	r0, [r7, #4]
 8000a66:	4e98      	ldr	r6, [pc, #608]	; (8000cc8 <.text_42>)
 8000a68:	9804      	ldr	r0, [sp, #16]
 8000a6a:	60b0      	str	r0, [r6, #8]
 8000a6c:	9804      	ldr	r0, [sp, #16]
 8000a6e:	6038      	str	r0, [r7, #0]
 8000a70:	0020      	movs	r0, r4
 8000a72:	3008      	adds	r0, #8
 8000a74:	c806      	ldmia	r0!, {r1, r2}
 8000a76:	c606      	stmia	r6!, {r1, r2}
 8000a78:	3e08      	subs	r6, #8
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	3108      	adds	r1, #8
 8000a80:	1d78      	adds	r0, r7, #5
 8000a82:	f004 fc0e 	bl	80052a2 <__aeabi_memcpy>
 8000a86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000a88:	6138      	str	r0, [r7, #16]
 8000a8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000a8c:	b240      	sxtb	r0, r0
 8000a8e:	6178      	str	r0, [r7, #20]
 8000a90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a92:	61b8      	str	r0, [r7, #24]
 8000a94:	2128      	movs	r1, #40	; 0x28
 8000a96:	0030      	movs	r0, r6
 8000a98:	3014      	adds	r0, #20
 8000a9a:	f004 fbfd 	bl	8005298 <__aeabi_memclr>
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	3010      	adds	r0, #16
 8000aa2:	0031      	movs	r1, r6
 8000aa4:	3124      	adds	r1, #36	; 0x24
 8000aa6:	c89c      	ldmia	r0!, {r2, r3, r4, r7}
 8000aa8:	c19c      	stmia	r1!, {r2, r3, r4, r7}
 8000aaa:	0030      	movs	r0, r6
 8000aac:	3014      	adds	r0, #20
 8000aae:	64b0      	str	r0, [r6, #72]	; 0x48
 8000ab0:	0030      	movs	r0, r6
 8000ab2:	3024      	adds	r0, #36	; 0x24
 8000ab4:	6430      	str	r0, [r6, #64]	; 0x40
 8000ab6:	0030      	movs	r0, r6
 8000ab8:	3024      	adds	r0, #36	; 0x24
 8000aba:	64f0      	str	r0, [r6, #76]	; 0x4c
 8000abc:	2010      	movs	r0, #16
 8000abe:	7430      	strb	r0, [r6, #16]
 8000ac0:	73f0      	strb	r0, [r6, #15]
 8000ac2:	e000      	b.n	8000ac6 <enc_utils_retrieve_data_from_flash+0x154>
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	b015      	add	sp, #84	; 0x54
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000acc <.text_34>:
 8000acc:	20000070 	.word	0x20000070

08000ad0 <enc_utils_retrieve_data>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	0007      	movs	r7, r0
 8000ad6:	000e      	movs	r6, r1
 8000ad8:	0015      	movs	r5, r2
 8000ada:	466a      	mov	r2, sp
 8000adc:	2104      	movs	r1, #4
 8000ade:	20f8      	movs	r0, #248	; 0xf8
 8000ae0:	0040      	lsls	r0, r0, #1
 8000ae2:	f001 fee3 	bl	80028ac <EepromRead>
 8000ae6:	aa0c      	add	r2, sp, #48	; 0x30
 8000ae8:	2120      	movs	r1, #32
 8000aea:	0108      	lsls	r0, r1, #4
 8000aec:	f001 fede 	bl	80028ac <EepromRead>
 8000af0:	aa01      	add	r2, sp, #4
 8000af2:	2108      	movs	r1, #8
 8000af4:	2006      	movs	r0, #6
 8000af6:	f001 fed9 	bl	80028ac <EepromRead>
 8000afa:	a90c      	add	r1, sp, #48	; 0x30
 8000afc:	a801      	add	r0, sp, #4
 8000afe:	f7ff ff23 	bl	8000948 <get_integrity_cksum>
 8000b02:	4c71      	ldr	r4, [pc, #452]	; (8000cc8 <.text_42>)
 8000b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000b06:	60a1      	str	r1, [r4, #8]
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	d006      	beq.n	8000b1a <enc_utils_retrieve_data+0x4a>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	43d2      	mvns	r2, r2
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d002      	beq.n	8000b1a <enc_utils_retrieve_data+0x4a>
 8000b14:	9a00      	ldr	r2, [sp, #0]
 8000b16:	4290      	cmp	r0, r2
 8000b18:	d003      	beq.n	8000b22 <enc_utils_retrieve_data+0x52>
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	60a0      	str	r0, [r4, #8]
 8000b1e:	2001      	movs	r0, #1
 8000b20:	e073      	b.n	8000c0a <enc_utils_retrieve_data+0x13a>
 8000b22:	9703      	str	r7, [sp, #12]
 8000b24:	a80c      	add	r0, sp, #48	; 0x30
 8000b26:	1d02      	adds	r2, r0, #4
 8000b28:	ca88      	ldmia	r2!, {r3, r7}
 8000b2a:	c488      	stmia	r4!, {r3, r7}
 8000b2c:	3c08      	subs	r4, #8
 8000b2e:	9a03      	ldr	r2, [sp, #12]
 8000b30:	6011      	str	r1, [r2, #0]
 8000b32:	7821      	ldrb	r1, [r4, #0]
 8000b34:	7031      	strb	r1, [r6, #0]
 8000b36:	7861      	ldrb	r1, [r4, #1]
 8000b38:	7071      	strb	r1, [r6, #1]
 8000b3a:	78a1      	ldrb	r1, [r4, #2]
 8000b3c:	70b1      	strb	r1, [r6, #2]
 8000b3e:	78e1      	ldrb	r1, [r4, #3]
 8000b40:	70f1      	strb	r1, [r6, #3]
 8000b42:	7921      	ldrb	r1, [r4, #4]
 8000b44:	7131      	strb	r1, [r6, #4]
 8000b46:	7961      	ldrb	r1, [r4, #5]
 8000b48:	7171      	strb	r1, [r6, #5]
 8000b4a:	79a1      	ldrb	r1, [r4, #6]
 8000b4c:	71b1      	strb	r1, [r6, #6]
 8000b4e:	79e1      	ldrb	r1, [r4, #7]
 8000b50:	71f1      	strb	r1, [r6, #7]
 8000b52:	7b01      	ldrb	r1, [r0, #12]
 8000b54:	0709      	lsls	r1, r1, #28
 8000b56:	0f09      	lsrs	r1, r1, #28
 8000b58:	d100      	bne.n	8000b5c <enc_utils_retrieve_data+0x8c>
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	7029      	strb	r1, [r5, #0]
 8000b5e:	68a1      	ldr	r1, [r4, #8]
 8000b60:	9104      	str	r1, [sp, #16]
 8000b62:	9105      	str	r1, [sp, #20]
 8000b64:	9106      	str	r1, [sp, #24]
 8000b66:	9107      	str	r1, [sp, #28]
 8000b68:	9108      	str	r1, [sp, #32]
 8000b6a:	aa08      	add	r2, sp, #32
 8000b6c:	ab01      	add	r3, sp, #4
 8000b6e:	1d15      	adds	r5, r2, #4
 8000b70:	cbc0      	ldmia	r3!, {r6, r7}
 8000b72:	c5c0      	stmia	r5!, {r6, r7}
 8000b74:	43cb      	mvns	r3, r1
 8000b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b78:	7bd1      	ldrb	r1, [r2, #15]
 8000b7a:	7b03      	ldrb	r3, [r0, #12]
 8000b7c:	2b87      	cmp	r3, #135	; 0x87
 8000b7e:	da01      	bge.n	8000b84 <enc_utils_retrieve_data+0xb4>
 8000b80:	430b      	orrs	r3, r1
 8000b82:	e000      	b.n	8000b86 <enc_utils_retrieve_data+0xb6>
 8000b84:	400b      	ands	r3, r1
 8000b86:	73d3      	strb	r3, [r2, #15]
 8000b88:	7b11      	ldrb	r1, [r2, #12]
 8000b8a:	7b43      	ldrb	r3, [r0, #13]
 8000b8c:	2b19      	cmp	r3, #25
 8000b8e:	da01      	bge.n	8000b94 <enc_utils_retrieve_data+0xc4>
 8000b90:	430b      	orrs	r3, r1
 8000b92:	e000      	b.n	8000b96 <enc_utils_retrieve_data+0xc6>
 8000b94:	400b      	ands	r3, r1
 8000b96:	7313      	strb	r3, [r2, #12]
 8000b98:	a904      	add	r1, sp, #16
 8000b9a:	7a0a      	ldrb	r2, [r1, #8]
 8000b9c:	7b83      	ldrb	r3, [r0, #14]
 8000b9e:	2b80      	cmp	r3, #128	; 0x80
 8000ba0:	da01      	bge.n	8000ba6 <enc_utils_retrieve_data+0xd6>
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	e000      	b.n	8000ba8 <enc_utils_retrieve_data+0xd8>
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	720b      	strb	r3, [r1, #8]
 8000baa:	7aca      	ldrb	r2, [r1, #11]
 8000bac:	7bc3      	ldrb	r3, [r0, #15]
 8000bae:	2b80      	cmp	r3, #128	; 0x80
 8000bb0:	da01      	bge.n	8000bb6 <enc_utils_retrieve_data+0xe6>
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	e000      	b.n	8000bb8 <enc_utils_retrieve_data+0xe8>
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	72ca      	strb	r2, [r1, #11]
 8000bba:	0719      	lsls	r1, r3, #28
 8000bbc:	0f09      	lsrs	r1, r1, #28
 8000bbe:	2902      	cmp	r1, #2
 8000bc0:	da01      	bge.n	8000bc6 <enc_utils_retrieve_data+0xf6>
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	e002      	b.n	8000bcc <enc_utils_retrieve_data+0xfc>
 8000bc6:	290e      	cmp	r1, #14
 8000bc8:	db00      	blt.n	8000bcc <enc_utils_retrieve_data+0xfc>
 8000bca:	210d      	movs	r1, #13
 8000bcc:	7421      	strb	r1, [r4, #16]
 8000bce:	a904      	add	r1, sp, #16
 8000bd0:	64a1      	str	r1, [r4, #72]	; 0x48
 8000bd2:	a908      	add	r1, sp, #32
 8000bd4:	6421      	str	r1, [r4, #64]	; 0x40
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	0001      	movs	r1, r0
 8000bda:	3110      	adds	r1, #16
 8000bdc:	0020      	movs	r0, r4
 8000bde:	3024      	adds	r0, #36	; 0x24
 8000be0:	f7ff fe2c 	bl	800083c <AES128_CBC_decrypt_internal>
 8000be4:	0020      	movs	r0, r4
 8000be6:	3014      	adds	r0, #20
 8000be8:	2100      	movs	r1, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	2500      	movs	r5, #0
 8000bf0:	c02e      	stmia	r0!, {r1, r2, r3, r5}
 8000bf2:	0020      	movs	r0, r4
 8000bf4:	3014      	adds	r0, #20
 8000bf6:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	3024      	adds	r0, #36	; 0x24
 8000bfc:	6420      	str	r0, [r4, #64]	; 0x40
 8000bfe:	7c20      	ldrb	r0, [r4, #16]
 8000c00:	73e0      	strb	r0, [r4, #15]
 8000c02:	0020      	movs	r0, r4
 8000c04:	3024      	adds	r0, #36	; 0x24
 8000c06:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000c08:	2000      	movs	r0, #0
 8000c0a:	b015      	add	sp, #84	; 0x54
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c0e <enc_utils_encrypt>:
 8000c0e:	b538      	push	{r3, r4, r5, lr}
 8000c10:	4c2d      	ldr	r4, [pc, #180]	; (8000cc8 <.text_42>)
 8000c12:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d101      	bne.n	8000c1c <enc_utils_encrypt+0xe>
 8000c18:	2001      	movs	r0, #1
 8000c1a:	bd32      	pop	{r1, r4, r5, pc}
 8000c1c:	9d04      	ldr	r5, [sp, #16]
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d100      	bne.n	8000c24 <enc_utils_encrypt+0x16>
 8000c22:	0023      	movs	r3, r4
 8000c24:	f7ff fda7 	bl	8000776 <AES128_CBC_encrypt>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	bd32      	pop	{r1, r4, r5, pc}

08000c2c <enc_utils_set_public_key>:
 8000c2c:	4926      	ldr	r1, [pc, #152]	; (8000cc8 <.text_42>)
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d004      	beq.n	8000c3c <enc_utils_set_public_key+0x10>
 8000c32:	2010      	movs	r0, #16
 8000c34:	000a      	movs	r2, r1
 8000c36:	3250      	adds	r2, #80	; 0x50
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e002      	b.n	8000c42 <enc_utils_set_public_key+0x16>
 8000c3c:	7bc8      	ldrb	r0, [r1, #15]
 8000c3e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000c40:	2300      	movs	r3, #0
 8000c42:	738b      	strb	r3, [r1, #14]
 8000c44:	640a      	str	r2, [r1, #64]	; 0x40
 8000c46:	7408      	strb	r0, [r1, #16]
 8000c48:	2000      	movs	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <enc_utils_set_test_key>:
 8000c4c:	491e      	ldr	r1, [pc, #120]	; (8000cc8 <.text_42>)
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d004      	beq.n	8000c5c <enc_utils_set_test_key+0x10>
 8000c52:	2010      	movs	r0, #16
 8000c54:	000a      	movs	r2, r1
 8000c56:	3260      	adds	r2, #96	; 0x60
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e002      	b.n	8000c62 <enc_utils_set_test_key+0x16>
 8000c5c:	7bc8      	ldrb	r0, [r1, #15]
 8000c5e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000c60:	2300      	movs	r3, #0
 8000c62:	734b      	strb	r3, [r1, #13]
 8000c64:	640a      	str	r2, [r1, #64]	; 0x40
 8000c66:	7408      	strb	r0, [r1, #16]
 8000c68:	2000      	movs	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <enc_utils_set_test_id>:
 8000c6c:	4916      	ldr	r1, [pc, #88]	; (8000cc8 <.text_42>)
 8000c6e:	7308      	strb	r0, [r1, #12]
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <enc_utils_get_id>:
 8000c74:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <.text_42>)
 8000c76:	7b0a      	ldrb	r2, [r1, #12]
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d002      	beq.n	8000c82 <enc_utils_get_id+0xe>
 8000c7c:	4914      	ldr	r1, [pc, #80]	; (8000cd0 <.text_44>)
 8000c7e:	6001      	str	r1, [r0, #0]
 8000c80:	e007      	b.n	8000c92 <enc_utils_get_id+0x1e>
 8000c82:	7a0a      	ldrb	r2, [r1, #8]
 8000c84:	7002      	strb	r2, [r0, #0]
 8000c86:	7a4a      	ldrb	r2, [r1, #9]
 8000c88:	7042      	strb	r2, [r0, #1]
 8000c8a:	7a8a      	ldrb	r2, [r1, #10]
 8000c8c:	7082      	strb	r2, [r0, #2]
 8000c8e:	7ac9      	ldrb	r1, [r1, #11]
 8000c90:	70c1      	strb	r1, [r0, #3]
 8000c92:	2000      	movs	r0, #0
 8000c94:	4770      	bx	lr

08000c96 <enc_utils_get_initial_pac>:
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <.text_42>)
 8000c98:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d101      	bne.n	8000ca2 <enc_utils_get_initial_pac+0xc>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4770      	bx	lr
 8000ca2:	780a      	ldrb	r2, [r1, #0]
 8000ca4:	7002      	strb	r2, [r0, #0]
 8000ca6:	784a      	ldrb	r2, [r1, #1]
 8000ca8:	7042      	strb	r2, [r0, #1]
 8000caa:	788a      	ldrb	r2, [r1, #2]
 8000cac:	7082      	strb	r2, [r0, #2]
 8000cae:	78ca      	ldrb	r2, [r1, #3]
 8000cb0:	70c2      	strb	r2, [r0, #3]
 8000cb2:	790a      	ldrb	r2, [r1, #4]
 8000cb4:	7102      	strb	r2, [r0, #4]
 8000cb6:	794a      	ldrb	r2, [r1, #5]
 8000cb8:	7142      	strb	r2, [r0, #5]
 8000cba:	798a      	ldrb	r2, [r1, #6]
 8000cbc:	7182      	strb	r2, [r0, #6]
 8000cbe:	79c9      	ldrb	r1, [r1, #7]
 8000cc0:	71c1      	strb	r1, [r0, #7]
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	4770      	bx	lr
	...

08000cc8 <.text_42>:
 8000cc8:	20000000 	.word	0x20000000

08000ccc <.text_43>:
 8000ccc:	1ff80050 	.word	0x1ff80050

08000cd0 <.text_44>:
 8000cd0:	fedcba98 	.word	0xfedcba98

08000cd4 <__gnu_thumb1_case_uqi>:
 8000cd4:	b402      	push	{r1}
 8000cd6:	4671      	mov	r1, lr
 8000cd8:	0849      	lsrs	r1, r1, #1
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	5c09      	ldrb	r1, [r1, r0]
 8000cde:	0049      	lsls	r1, r1, #1
 8000ce0:	448e      	add	lr, r1
 8000ce2:	bc02      	pop	{r1}
 8000ce4:	4770      	bx	lr
 8000ce6:	46c0      	nop			; (mov r8, r8)

08000ce8 <__gnu_thumb1_case_shi>:
 8000ce8:	b403      	push	{r0, r1}
 8000cea:	4671      	mov	r1, lr
 8000cec:	0849      	lsrs	r1, r1, #1
 8000cee:	0040      	lsls	r0, r0, #1
 8000cf0:	0049      	lsls	r1, r1, #1
 8000cf2:	5e09      	ldrsh	r1, [r1, r0]
 8000cf4:	0049      	lsls	r1, r1, #1
 8000cf6:	448e      	add	lr, r1
 8000cf8:	bc03      	pop	{r0, r1}
 8000cfa:	4770      	bx	lr

08000cfc <__udivsi3>:
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	0843      	lsrs	r3, r0, #1
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d374      	bcc.n	8000dee <__udivsi3+0xf2>
 8000d04:	0903      	lsrs	r3, r0, #4
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d35f      	bcc.n	8000dca <__udivsi3+0xce>
 8000d0a:	0a03      	lsrs	r3, r0, #8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d344      	bcc.n	8000d9a <__udivsi3+0x9e>
 8000d10:	0b03      	lsrs	r3, r0, #12
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d328      	bcc.n	8000d68 <__udivsi3+0x6c>
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d30d      	bcc.n	8000d38 <__udivsi3+0x3c>
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	0209      	lsls	r1, r1, #8
 8000d20:	ba12      	rev	r2, r2
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d302      	bcc.n	8000d2e <__udivsi3+0x32>
 8000d28:	1212      	asrs	r2, r2, #8
 8000d2a:	0209      	lsls	r1, r1, #8
 8000d2c:	d065      	beq.n	8000dfa <__udivsi3+0xfe>
 8000d2e:	0b03      	lsrs	r3, r0, #12
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d319      	bcc.n	8000d68 <__udivsi3+0x6c>
 8000d34:	e000      	b.n	8000d38 <__udivsi3+0x3c>
 8000d36:	0a09      	lsrs	r1, r1, #8
 8000d38:	0bc3      	lsrs	r3, r0, #15
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d301      	bcc.n	8000d42 <__udivsi3+0x46>
 8000d3e:	03cb      	lsls	r3, r1, #15
 8000d40:	1ac0      	subs	r0, r0, r3
 8000d42:	4152      	adcs	r2, r2
 8000d44:	0b83      	lsrs	r3, r0, #14
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d301      	bcc.n	8000d4e <__udivsi3+0x52>
 8000d4a:	038b      	lsls	r3, r1, #14
 8000d4c:	1ac0      	subs	r0, r0, r3
 8000d4e:	4152      	adcs	r2, r2
 8000d50:	0b43      	lsrs	r3, r0, #13
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d301      	bcc.n	8000d5a <__udivsi3+0x5e>
 8000d56:	034b      	lsls	r3, r1, #13
 8000d58:	1ac0      	subs	r0, r0, r3
 8000d5a:	4152      	adcs	r2, r2
 8000d5c:	0b03      	lsrs	r3, r0, #12
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d301      	bcc.n	8000d66 <__udivsi3+0x6a>
 8000d62:	030b      	lsls	r3, r1, #12
 8000d64:	1ac0      	subs	r0, r0, r3
 8000d66:	4152      	adcs	r2, r2
 8000d68:	0ac3      	lsrs	r3, r0, #11
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d301      	bcc.n	8000d72 <__udivsi3+0x76>
 8000d6e:	02cb      	lsls	r3, r1, #11
 8000d70:	1ac0      	subs	r0, r0, r3
 8000d72:	4152      	adcs	r2, r2
 8000d74:	0a83      	lsrs	r3, r0, #10
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d301      	bcc.n	8000d7e <__udivsi3+0x82>
 8000d7a:	028b      	lsls	r3, r1, #10
 8000d7c:	1ac0      	subs	r0, r0, r3
 8000d7e:	4152      	adcs	r2, r2
 8000d80:	0a43      	lsrs	r3, r0, #9
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d301      	bcc.n	8000d8a <__udivsi3+0x8e>
 8000d86:	024b      	lsls	r3, r1, #9
 8000d88:	1ac0      	subs	r0, r0, r3
 8000d8a:	4152      	adcs	r2, r2
 8000d8c:	0a03      	lsrs	r3, r0, #8
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d301      	bcc.n	8000d96 <__udivsi3+0x9a>
 8000d92:	020b      	lsls	r3, r1, #8
 8000d94:	1ac0      	subs	r0, r0, r3
 8000d96:	4152      	adcs	r2, r2
 8000d98:	d2cd      	bcs.n	8000d36 <__udivsi3+0x3a>
 8000d9a:	09c3      	lsrs	r3, r0, #7
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d301      	bcc.n	8000da4 <__udivsi3+0xa8>
 8000da0:	01cb      	lsls	r3, r1, #7
 8000da2:	1ac0      	subs	r0, r0, r3
 8000da4:	4152      	adcs	r2, r2
 8000da6:	0983      	lsrs	r3, r0, #6
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d301      	bcc.n	8000db0 <__udivsi3+0xb4>
 8000dac:	018b      	lsls	r3, r1, #6
 8000dae:	1ac0      	subs	r0, r0, r3
 8000db0:	4152      	adcs	r2, r2
 8000db2:	0943      	lsrs	r3, r0, #5
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d301      	bcc.n	8000dbc <__udivsi3+0xc0>
 8000db8:	014b      	lsls	r3, r1, #5
 8000dba:	1ac0      	subs	r0, r0, r3
 8000dbc:	4152      	adcs	r2, r2
 8000dbe:	0903      	lsrs	r3, r0, #4
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d301      	bcc.n	8000dc8 <__udivsi3+0xcc>
 8000dc4:	010b      	lsls	r3, r1, #4
 8000dc6:	1ac0      	subs	r0, r0, r3
 8000dc8:	4152      	adcs	r2, r2
 8000dca:	08c3      	lsrs	r3, r0, #3
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d301      	bcc.n	8000dd4 <__udivsi3+0xd8>
 8000dd0:	00cb      	lsls	r3, r1, #3
 8000dd2:	1ac0      	subs	r0, r0, r3
 8000dd4:	4152      	adcs	r2, r2
 8000dd6:	0883      	lsrs	r3, r0, #2
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d301      	bcc.n	8000de0 <__udivsi3+0xe4>
 8000ddc:	008b      	lsls	r3, r1, #2
 8000dde:	1ac0      	subs	r0, r0, r3
 8000de0:	4152      	adcs	r2, r2
 8000de2:	0843      	lsrs	r3, r0, #1
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d301      	bcc.n	8000dec <__udivsi3+0xf0>
 8000de8:	004b      	lsls	r3, r1, #1
 8000dea:	1ac0      	subs	r0, r0, r3
 8000dec:	4152      	adcs	r2, r2
 8000dee:	1a41      	subs	r1, r0, r1
 8000df0:	d200      	bcs.n	8000df4 <__udivsi3+0xf8>
 8000df2:	4601      	mov	r1, r0
 8000df4:	4152      	adcs	r2, r2
 8000df6:	4610      	mov	r0, r2
 8000df8:	4770      	bx	lr
 8000dfa:	e7ff      	b.n	8000dfc <__udivsi3+0x100>
 8000dfc:	b501      	push	{r0, lr}
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f8f0 	bl	8000fe4 <__aeabi_idiv0>
 8000e04:	bd02      	pop	{r1, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)

08000e08 <__aeabi_uidivmod>:
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d0f7      	beq.n	8000dfc <__udivsi3+0x100>
 8000e0c:	e776      	b.n	8000cfc <__udivsi3>
 8000e0e:	4770      	bx	lr

08000e10 <__divsi3>:
 8000e10:	4603      	mov	r3, r0
 8000e12:	430b      	orrs	r3, r1
 8000e14:	d47f      	bmi.n	8000f16 <__divsi3+0x106>
 8000e16:	2200      	movs	r2, #0
 8000e18:	0843      	lsrs	r3, r0, #1
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d374      	bcc.n	8000f08 <__divsi3+0xf8>
 8000e1e:	0903      	lsrs	r3, r0, #4
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d35f      	bcc.n	8000ee4 <__divsi3+0xd4>
 8000e24:	0a03      	lsrs	r3, r0, #8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d344      	bcc.n	8000eb4 <__divsi3+0xa4>
 8000e2a:	0b03      	lsrs	r3, r0, #12
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d328      	bcc.n	8000e82 <__divsi3+0x72>
 8000e30:	0c03      	lsrs	r3, r0, #16
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d30d      	bcc.n	8000e52 <__divsi3+0x42>
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	0209      	lsls	r1, r1, #8
 8000e3a:	ba12      	rev	r2, r2
 8000e3c:	0c03      	lsrs	r3, r0, #16
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__divsi3+0x38>
 8000e42:	1212      	asrs	r2, r2, #8
 8000e44:	0209      	lsls	r1, r1, #8
 8000e46:	d065      	beq.n	8000f14 <__divsi3+0x104>
 8000e48:	0b03      	lsrs	r3, r0, #12
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d319      	bcc.n	8000e82 <__divsi3+0x72>
 8000e4e:	e000      	b.n	8000e52 <__divsi3+0x42>
 8000e50:	0a09      	lsrs	r1, r1, #8
 8000e52:	0bc3      	lsrs	r3, r0, #15
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d301      	bcc.n	8000e5c <__divsi3+0x4c>
 8000e58:	03cb      	lsls	r3, r1, #15
 8000e5a:	1ac0      	subs	r0, r0, r3
 8000e5c:	4152      	adcs	r2, r2
 8000e5e:	0b83      	lsrs	r3, r0, #14
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d301      	bcc.n	8000e68 <__divsi3+0x58>
 8000e64:	038b      	lsls	r3, r1, #14
 8000e66:	1ac0      	subs	r0, r0, r3
 8000e68:	4152      	adcs	r2, r2
 8000e6a:	0b43      	lsrs	r3, r0, #13
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d301      	bcc.n	8000e74 <__divsi3+0x64>
 8000e70:	034b      	lsls	r3, r1, #13
 8000e72:	1ac0      	subs	r0, r0, r3
 8000e74:	4152      	adcs	r2, r2
 8000e76:	0b03      	lsrs	r3, r0, #12
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d301      	bcc.n	8000e80 <__divsi3+0x70>
 8000e7c:	030b      	lsls	r3, r1, #12
 8000e7e:	1ac0      	subs	r0, r0, r3
 8000e80:	4152      	adcs	r2, r2
 8000e82:	0ac3      	lsrs	r3, r0, #11
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d301      	bcc.n	8000e8c <__divsi3+0x7c>
 8000e88:	02cb      	lsls	r3, r1, #11
 8000e8a:	1ac0      	subs	r0, r0, r3
 8000e8c:	4152      	adcs	r2, r2
 8000e8e:	0a83      	lsrs	r3, r0, #10
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d301      	bcc.n	8000e98 <__divsi3+0x88>
 8000e94:	028b      	lsls	r3, r1, #10
 8000e96:	1ac0      	subs	r0, r0, r3
 8000e98:	4152      	adcs	r2, r2
 8000e9a:	0a43      	lsrs	r3, r0, #9
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d301      	bcc.n	8000ea4 <__divsi3+0x94>
 8000ea0:	024b      	lsls	r3, r1, #9
 8000ea2:	1ac0      	subs	r0, r0, r3
 8000ea4:	4152      	adcs	r2, r2
 8000ea6:	0a03      	lsrs	r3, r0, #8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d301      	bcc.n	8000eb0 <__divsi3+0xa0>
 8000eac:	020b      	lsls	r3, r1, #8
 8000eae:	1ac0      	subs	r0, r0, r3
 8000eb0:	4152      	adcs	r2, r2
 8000eb2:	d2cd      	bcs.n	8000e50 <__divsi3+0x40>
 8000eb4:	09c3      	lsrs	r3, r0, #7
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d301      	bcc.n	8000ebe <__divsi3+0xae>
 8000eba:	01cb      	lsls	r3, r1, #7
 8000ebc:	1ac0      	subs	r0, r0, r3
 8000ebe:	4152      	adcs	r2, r2
 8000ec0:	0983      	lsrs	r3, r0, #6
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d301      	bcc.n	8000eca <__divsi3+0xba>
 8000ec6:	018b      	lsls	r3, r1, #6
 8000ec8:	1ac0      	subs	r0, r0, r3
 8000eca:	4152      	adcs	r2, r2
 8000ecc:	0943      	lsrs	r3, r0, #5
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d301      	bcc.n	8000ed6 <__divsi3+0xc6>
 8000ed2:	014b      	lsls	r3, r1, #5
 8000ed4:	1ac0      	subs	r0, r0, r3
 8000ed6:	4152      	adcs	r2, r2
 8000ed8:	0903      	lsrs	r3, r0, #4
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d301      	bcc.n	8000ee2 <__divsi3+0xd2>
 8000ede:	010b      	lsls	r3, r1, #4
 8000ee0:	1ac0      	subs	r0, r0, r3
 8000ee2:	4152      	adcs	r2, r2
 8000ee4:	08c3      	lsrs	r3, r0, #3
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d301      	bcc.n	8000eee <__divsi3+0xde>
 8000eea:	00cb      	lsls	r3, r1, #3
 8000eec:	1ac0      	subs	r0, r0, r3
 8000eee:	4152      	adcs	r2, r2
 8000ef0:	0883      	lsrs	r3, r0, #2
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d301      	bcc.n	8000efa <__divsi3+0xea>
 8000ef6:	008b      	lsls	r3, r1, #2
 8000ef8:	1ac0      	subs	r0, r0, r3
 8000efa:	4152      	adcs	r2, r2
 8000efc:	0843      	lsrs	r3, r0, #1
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d301      	bcc.n	8000f06 <__divsi3+0xf6>
 8000f02:	004b      	lsls	r3, r1, #1
 8000f04:	1ac0      	subs	r0, r0, r3
 8000f06:	4152      	adcs	r2, r2
 8000f08:	1a41      	subs	r1, r0, r1
 8000f0a:	d200      	bcs.n	8000f0e <__divsi3+0xfe>
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	4152      	adcs	r2, r2
 8000f10:	4610      	mov	r0, r2
 8000f12:	4770      	bx	lr
 8000f14:	e05d      	b.n	8000fd2 <__divsi3+0x1c2>
 8000f16:	0fca      	lsrs	r2, r1, #31
 8000f18:	d000      	beq.n	8000f1c <__divsi3+0x10c>
 8000f1a:	4249      	negs	r1, r1
 8000f1c:	1003      	asrs	r3, r0, #32
 8000f1e:	d300      	bcc.n	8000f22 <__divsi3+0x112>
 8000f20:	4240      	negs	r0, r0
 8000f22:	4053      	eors	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	469c      	mov	ip, r3
 8000f28:	0903      	lsrs	r3, r0, #4
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d32d      	bcc.n	8000f8a <__divsi3+0x17a>
 8000f2e:	0a03      	lsrs	r3, r0, #8
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d312      	bcc.n	8000f5a <__divsi3+0x14a>
 8000f34:	22fc      	movs	r2, #252	; 0xfc
 8000f36:	0189      	lsls	r1, r1, #6
 8000f38:	ba12      	rev	r2, r2
 8000f3a:	0a03      	lsrs	r3, r0, #8
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d30c      	bcc.n	8000f5a <__divsi3+0x14a>
 8000f40:	0189      	lsls	r1, r1, #6
 8000f42:	1192      	asrs	r2, r2, #6
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d308      	bcc.n	8000f5a <__divsi3+0x14a>
 8000f48:	0189      	lsls	r1, r1, #6
 8000f4a:	1192      	asrs	r2, r2, #6
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d304      	bcc.n	8000f5a <__divsi3+0x14a>
 8000f50:	0189      	lsls	r1, r1, #6
 8000f52:	d03a      	beq.n	8000fca <__divsi3+0x1ba>
 8000f54:	1192      	asrs	r2, r2, #6
 8000f56:	e000      	b.n	8000f5a <__divsi3+0x14a>
 8000f58:	0989      	lsrs	r1, r1, #6
 8000f5a:	09c3      	lsrs	r3, r0, #7
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d301      	bcc.n	8000f64 <__divsi3+0x154>
 8000f60:	01cb      	lsls	r3, r1, #7
 8000f62:	1ac0      	subs	r0, r0, r3
 8000f64:	4152      	adcs	r2, r2
 8000f66:	0983      	lsrs	r3, r0, #6
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d301      	bcc.n	8000f70 <__divsi3+0x160>
 8000f6c:	018b      	lsls	r3, r1, #6
 8000f6e:	1ac0      	subs	r0, r0, r3
 8000f70:	4152      	adcs	r2, r2
 8000f72:	0943      	lsrs	r3, r0, #5
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d301      	bcc.n	8000f7c <__divsi3+0x16c>
 8000f78:	014b      	lsls	r3, r1, #5
 8000f7a:	1ac0      	subs	r0, r0, r3
 8000f7c:	4152      	adcs	r2, r2
 8000f7e:	0903      	lsrs	r3, r0, #4
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d301      	bcc.n	8000f88 <__divsi3+0x178>
 8000f84:	010b      	lsls	r3, r1, #4
 8000f86:	1ac0      	subs	r0, r0, r3
 8000f88:	4152      	adcs	r2, r2
 8000f8a:	08c3      	lsrs	r3, r0, #3
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d301      	bcc.n	8000f94 <__divsi3+0x184>
 8000f90:	00cb      	lsls	r3, r1, #3
 8000f92:	1ac0      	subs	r0, r0, r3
 8000f94:	4152      	adcs	r2, r2
 8000f96:	0883      	lsrs	r3, r0, #2
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d301      	bcc.n	8000fa0 <__divsi3+0x190>
 8000f9c:	008b      	lsls	r3, r1, #2
 8000f9e:	1ac0      	subs	r0, r0, r3
 8000fa0:	4152      	adcs	r2, r2
 8000fa2:	d2d9      	bcs.n	8000f58 <__divsi3+0x148>
 8000fa4:	0843      	lsrs	r3, r0, #1
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d301      	bcc.n	8000fae <__divsi3+0x19e>
 8000faa:	004b      	lsls	r3, r1, #1
 8000fac:	1ac0      	subs	r0, r0, r3
 8000fae:	4152      	adcs	r2, r2
 8000fb0:	1a41      	subs	r1, r0, r1
 8000fb2:	d200      	bcs.n	8000fb6 <__divsi3+0x1a6>
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	4663      	mov	r3, ip
 8000fb8:	4152      	adcs	r2, r2
 8000fba:	105b      	asrs	r3, r3, #1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	d301      	bcc.n	8000fc4 <__divsi3+0x1b4>
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d500      	bpl.n	8000fc8 <__divsi3+0x1b8>
 8000fc6:	4249      	negs	r1, r1
 8000fc8:	4770      	bx	lr
 8000fca:	4663      	mov	r3, ip
 8000fcc:	105b      	asrs	r3, r3, #1
 8000fce:	d300      	bcc.n	8000fd2 <__divsi3+0x1c2>
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	b501      	push	{r0, lr}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_idiv0>
 8000fda:	bd02      	pop	{r1, pc}

08000fdc <__aeabi_idivmod>:
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	d0f8      	beq.n	8000fd2 <__divsi3+0x1c2>
 8000fe0:	e716      	b.n	8000e10 <__divsi3>
 8000fe2:	4770      	bx	lr

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	46c0      	nop			; (mov r8, r8)

08000fe8 <__aeabi_llsr>:
 8000fe8:	40d0      	lsrs	r0, r2
 8000fea:	1c0b      	adds	r3, r1, #0
 8000fec:	40d1      	lsrs	r1, r2
 8000fee:	469c      	mov	ip, r3
 8000ff0:	3a20      	subs	r2, #32
 8000ff2:	40d3      	lsrs	r3, r2
 8000ff4:	4318      	orrs	r0, r3
 8000ff6:	4252      	negs	r2, r2
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	4318      	orrs	r0, r3
 8000ffe:	4770      	bx	lr

08001000 <__aeabi_uldivmod>:
 8001000:	2b00      	cmp	r3, #0
 8001002:	d111      	bne.n	8001028 <__aeabi_uldivmod+0x28>
 8001004:	2a00      	cmp	r2, #0
 8001006:	d10f      	bne.n	8001028 <__aeabi_uldivmod+0x28>
 8001008:	2900      	cmp	r1, #0
 800100a:	d100      	bne.n	800100e <__aeabi_uldivmod+0xe>
 800100c:	2800      	cmp	r0, #0
 800100e:	d002      	beq.n	8001016 <__aeabi_uldivmod+0x16>
 8001010:	2100      	movs	r1, #0
 8001012:	43c9      	mvns	r1, r1
 8001014:	1c08      	adds	r0, r1, #0
 8001016:	b407      	push	{r0, r1, r2}
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <__aeabi_uldivmod+0x24>)
 800101a:	a102      	add	r1, pc, #8	; (adr r1, 8001024 <__aeabi_uldivmod+0x24>)
 800101c:	1840      	adds	r0, r0, r1
 800101e:	9002      	str	r0, [sp, #8]
 8001020:	bd03      	pop	{r0, r1, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	ffffffc1 	.word	0xffffffc1
 8001028:	b403      	push	{r0, r1}
 800102a:	4668      	mov	r0, sp
 800102c:	b501      	push	{r0, lr}
 800102e:	9802      	ldr	r0, [sp, #8]
 8001030:	f000 f806 	bl	8001040 <__udivmoddi4>
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	469e      	mov	lr, r3
 8001038:	b002      	add	sp, #8
 800103a:	bc0c      	pop	{r2, r3}
 800103c:	4770      	bx	lr
 800103e:	46c0      	nop			; (mov r8, r8)

08001040 <__udivmoddi4>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	4657      	mov	r7, sl
 8001044:	464e      	mov	r6, r9
 8001046:	4645      	mov	r5, r8
 8001048:	46de      	mov	lr, fp
 800104a:	b5e0      	push	{r5, r6, r7, lr}
 800104c:	0004      	movs	r4, r0
 800104e:	000d      	movs	r5, r1
 8001050:	4692      	mov	sl, r2
 8001052:	4699      	mov	r9, r3
 8001054:	b083      	sub	sp, #12
 8001056:	428b      	cmp	r3, r1
 8001058:	d830      	bhi.n	80010bc <__udivmoddi4+0x7c>
 800105a:	d02d      	beq.n	80010b8 <__udivmoddi4+0x78>
 800105c:	4649      	mov	r1, r9
 800105e:	4650      	mov	r0, sl
 8001060:	f000 fa58 	bl	8001514 <__clzdi2>
 8001064:	0029      	movs	r1, r5
 8001066:	0006      	movs	r6, r0
 8001068:	0020      	movs	r0, r4
 800106a:	f000 fa53 	bl	8001514 <__clzdi2>
 800106e:	1a33      	subs	r3, r6, r0
 8001070:	4698      	mov	r8, r3
 8001072:	3b20      	subs	r3, #32
 8001074:	469b      	mov	fp, r3
 8001076:	d433      	bmi.n	80010e0 <__udivmoddi4+0xa0>
 8001078:	465a      	mov	r2, fp
 800107a:	4653      	mov	r3, sl
 800107c:	4093      	lsls	r3, r2
 800107e:	4642      	mov	r2, r8
 8001080:	001f      	movs	r7, r3
 8001082:	4653      	mov	r3, sl
 8001084:	4093      	lsls	r3, r2
 8001086:	001e      	movs	r6, r3
 8001088:	42af      	cmp	r7, r5
 800108a:	d83a      	bhi.n	8001102 <__udivmoddi4+0xc2>
 800108c:	42af      	cmp	r7, r5
 800108e:	d100      	bne.n	8001092 <__udivmoddi4+0x52>
 8001090:	e078      	b.n	8001184 <__udivmoddi4+0x144>
 8001092:	465b      	mov	r3, fp
 8001094:	1ba4      	subs	r4, r4, r6
 8001096:	41bd      	sbcs	r5, r7
 8001098:	2b00      	cmp	r3, #0
 800109a:	da00      	bge.n	800109e <__udivmoddi4+0x5e>
 800109c:	e075      	b.n	800118a <__udivmoddi4+0x14a>
 800109e:	2200      	movs	r2, #0
 80010a0:	2300      	movs	r3, #0
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2301      	movs	r3, #1
 80010a8:	465a      	mov	r2, fp
 80010aa:	4093      	lsls	r3, r2
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	2301      	movs	r3, #1
 80010b0:	4642      	mov	r2, r8
 80010b2:	4093      	lsls	r3, r2
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	e028      	b.n	800110a <__udivmoddi4+0xca>
 80010b8:	4282      	cmp	r2, r0
 80010ba:	d9cf      	bls.n	800105c <__udivmoddi4+0x1c>
 80010bc:	2200      	movs	r2, #0
 80010be:	2300      	movs	r3, #0
 80010c0:	9200      	str	r2, [sp, #0]
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <__udivmoddi4+0x8e>
 80010ca:	601c      	str	r4, [r3, #0]
 80010cc:	605d      	str	r5, [r3, #4]
 80010ce:	9800      	ldr	r0, [sp, #0]
 80010d0:	9901      	ldr	r1, [sp, #4]
 80010d2:	b003      	add	sp, #12
 80010d4:	bcf0      	pop	{r4, r5, r6, r7}
 80010d6:	46bb      	mov	fp, r7
 80010d8:	46b2      	mov	sl, r6
 80010da:	46a9      	mov	r9, r5
 80010dc:	46a0      	mov	r8, r4
 80010de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e0:	4642      	mov	r2, r8
 80010e2:	2320      	movs	r3, #32
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	4652      	mov	r2, sl
 80010e8:	40da      	lsrs	r2, r3
 80010ea:	4641      	mov	r1, r8
 80010ec:	0013      	movs	r3, r2
 80010ee:	464a      	mov	r2, r9
 80010f0:	408a      	lsls	r2, r1
 80010f2:	0017      	movs	r7, r2
 80010f4:	4642      	mov	r2, r8
 80010f6:	431f      	orrs	r7, r3
 80010f8:	4653      	mov	r3, sl
 80010fa:	4093      	lsls	r3, r2
 80010fc:	001e      	movs	r6, r3
 80010fe:	42af      	cmp	r7, r5
 8001100:	d9c4      	bls.n	800108c <__udivmoddi4+0x4c>
 8001102:	2200      	movs	r2, #0
 8001104:	2300      	movs	r3, #0
 8001106:	9200      	str	r2, [sp, #0]
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	4643      	mov	r3, r8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0d9      	beq.n	80010c4 <__udivmoddi4+0x84>
 8001110:	07fb      	lsls	r3, r7, #31
 8001112:	0872      	lsrs	r2, r6, #1
 8001114:	431a      	orrs	r2, r3
 8001116:	4646      	mov	r6, r8
 8001118:	087b      	lsrs	r3, r7, #1
 800111a:	e00e      	b.n	800113a <__udivmoddi4+0xfa>
 800111c:	42ab      	cmp	r3, r5
 800111e:	d101      	bne.n	8001124 <__udivmoddi4+0xe4>
 8001120:	42a2      	cmp	r2, r4
 8001122:	d80c      	bhi.n	800113e <__udivmoddi4+0xfe>
 8001124:	1aa4      	subs	r4, r4, r2
 8001126:	419d      	sbcs	r5, r3
 8001128:	2001      	movs	r0, #1
 800112a:	1924      	adds	r4, r4, r4
 800112c:	416d      	adcs	r5, r5
 800112e:	2100      	movs	r1, #0
 8001130:	3e01      	subs	r6, #1
 8001132:	1824      	adds	r4, r4, r0
 8001134:	414d      	adcs	r5, r1
 8001136:	2e00      	cmp	r6, #0
 8001138:	d006      	beq.n	8001148 <__udivmoddi4+0x108>
 800113a:	42ab      	cmp	r3, r5
 800113c:	d9ee      	bls.n	800111c <__udivmoddi4+0xdc>
 800113e:	3e01      	subs	r6, #1
 8001140:	1924      	adds	r4, r4, r4
 8001142:	416d      	adcs	r5, r5
 8001144:	2e00      	cmp	r6, #0
 8001146:	d1f8      	bne.n	800113a <__udivmoddi4+0xfa>
 8001148:	9800      	ldr	r0, [sp, #0]
 800114a:	9901      	ldr	r1, [sp, #4]
 800114c:	465b      	mov	r3, fp
 800114e:	1900      	adds	r0, r0, r4
 8001150:	4169      	adcs	r1, r5
 8001152:	2b00      	cmp	r3, #0
 8001154:	db24      	blt.n	80011a0 <__udivmoddi4+0x160>
 8001156:	002b      	movs	r3, r5
 8001158:	465a      	mov	r2, fp
 800115a:	4644      	mov	r4, r8
 800115c:	40d3      	lsrs	r3, r2
 800115e:	002a      	movs	r2, r5
 8001160:	40e2      	lsrs	r2, r4
 8001162:	001c      	movs	r4, r3
 8001164:	465b      	mov	r3, fp
 8001166:	0015      	movs	r5, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	db2a      	blt.n	80011c2 <__udivmoddi4+0x182>
 800116c:	0026      	movs	r6, r4
 800116e:	409e      	lsls	r6, r3
 8001170:	0033      	movs	r3, r6
 8001172:	0026      	movs	r6, r4
 8001174:	4647      	mov	r7, r8
 8001176:	40be      	lsls	r6, r7
 8001178:	0032      	movs	r2, r6
 800117a:	1a80      	subs	r0, r0, r2
 800117c:	4199      	sbcs	r1, r3
 800117e:	9000      	str	r0, [sp, #0]
 8001180:	9101      	str	r1, [sp, #4]
 8001182:	e79f      	b.n	80010c4 <__udivmoddi4+0x84>
 8001184:	42a3      	cmp	r3, r4
 8001186:	d8bc      	bhi.n	8001102 <__udivmoddi4+0xc2>
 8001188:	e783      	b.n	8001092 <__udivmoddi4+0x52>
 800118a:	4642      	mov	r2, r8
 800118c:	2320      	movs	r3, #32
 800118e:	2100      	movs	r1, #0
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	2200      	movs	r2, #0
 8001194:	9100      	str	r1, [sp, #0]
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	40da      	lsrs	r2, r3
 800119c:	9201      	str	r2, [sp, #4]
 800119e:	e786      	b.n	80010ae <__udivmoddi4+0x6e>
 80011a0:	4642      	mov	r2, r8
 80011a2:	2320      	movs	r3, #32
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	002a      	movs	r2, r5
 80011a8:	4646      	mov	r6, r8
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0023      	movs	r3, r4
 80011ae:	40f3      	lsrs	r3, r6
 80011b0:	4644      	mov	r4, r8
 80011b2:	4313      	orrs	r3, r2
 80011b4:	002a      	movs	r2, r5
 80011b6:	40e2      	lsrs	r2, r4
 80011b8:	001c      	movs	r4, r3
 80011ba:	465b      	mov	r3, fp
 80011bc:	0015      	movs	r5, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dad4      	bge.n	800116c <__udivmoddi4+0x12c>
 80011c2:	4642      	mov	r2, r8
 80011c4:	002f      	movs	r7, r5
 80011c6:	2320      	movs	r3, #32
 80011c8:	0026      	movs	r6, r4
 80011ca:	4097      	lsls	r7, r2
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	40de      	lsrs	r6, r3
 80011d0:	003b      	movs	r3, r7
 80011d2:	4333      	orrs	r3, r6
 80011d4:	e7cd      	b.n	8001172 <__udivmoddi4+0x132>
 80011d6:	46c0      	nop			; (mov r8, r8)

080011d8 <__aeabi_fmul>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	4657      	mov	r7, sl
 80011dc:	464e      	mov	r6, r9
 80011de:	4645      	mov	r5, r8
 80011e0:	46de      	mov	lr, fp
 80011e2:	0244      	lsls	r4, r0, #9
 80011e4:	b5e0      	push	{r5, r6, r7, lr}
 80011e6:	0045      	lsls	r5, r0, #1
 80011e8:	1c0f      	adds	r7, r1, #0
 80011ea:	0a64      	lsrs	r4, r4, #9
 80011ec:	0e2d      	lsrs	r5, r5, #24
 80011ee:	0fc6      	lsrs	r6, r0, #31
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d047      	beq.n	8001284 <__aeabi_fmul+0xac>
 80011f4:	2dff      	cmp	r5, #255	; 0xff
 80011f6:	d04d      	beq.n	8001294 <__aeabi_fmul+0xbc>
 80011f8:	2300      	movs	r3, #0
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	469a      	mov	sl, r3
 80011fe:	469b      	mov	fp, r3
 8001200:	00e4      	lsls	r4, r4, #3
 8001202:	04c0      	lsls	r0, r0, #19
 8001204:	4304      	orrs	r4, r0
 8001206:	3d7f      	subs	r5, #127	; 0x7f
 8001208:	0278      	lsls	r0, r7, #9
 800120a:	0a43      	lsrs	r3, r0, #9
 800120c:	4699      	mov	r9, r3
 800120e:	007a      	lsls	r2, r7, #1
 8001210:	0ffb      	lsrs	r3, r7, #31
 8001212:	4698      	mov	r8, r3
 8001214:	0e12      	lsrs	r2, r2, #24
 8001216:	464b      	mov	r3, r9
 8001218:	d044      	beq.n	80012a4 <__aeabi_fmul+0xcc>
 800121a:	2aff      	cmp	r2, #255	; 0xff
 800121c:	d011      	beq.n	8001242 <__aeabi_fmul+0x6a>
 800121e:	00d8      	lsls	r0, r3, #3
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	04db      	lsls	r3, r3, #19
 8001224:	4303      	orrs	r3, r0
 8001226:	4699      	mov	r9, r3
 8001228:	2000      	movs	r0, #0
 800122a:	3a7f      	subs	r2, #127	; 0x7f
 800122c:	18ad      	adds	r5, r5, r2
 800122e:	4647      	mov	r7, r8
 8001230:	4653      	mov	r3, sl
 8001232:	4077      	eors	r7, r6
 8001234:	1c69      	adds	r1, r5, #1
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d83f      	bhi.n	80012ba <__aeabi_fmul+0xe2>
 800123a:	4a72      	ldr	r2, [pc, #456]	; (8001404 <__aeabi_fmul+0x22c>)
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	58d3      	ldr	r3, [r2, r3]
 8001240:	469f      	mov	pc, r3
 8001242:	35ff      	adds	r5, #255	; 0xff
 8001244:	2b00      	cmp	r3, #0
 8001246:	d000      	beq.n	800124a <__aeabi_fmul+0x72>
 8001248:	e079      	b.n	800133e <__aeabi_fmul+0x166>
 800124a:	4652      	mov	r2, sl
 800124c:	2302      	movs	r3, #2
 800124e:	431a      	orrs	r2, r3
 8001250:	4692      	mov	sl, r2
 8001252:	2002      	movs	r0, #2
 8001254:	e7eb      	b.n	800122e <__aeabi_fmul+0x56>
 8001256:	4647      	mov	r7, r8
 8001258:	464c      	mov	r4, r9
 800125a:	4683      	mov	fp, r0
 800125c:	465b      	mov	r3, fp
 800125e:	2b02      	cmp	r3, #2
 8001260:	d028      	beq.n	80012b4 <__aeabi_fmul+0xdc>
 8001262:	2b03      	cmp	r3, #3
 8001264:	d100      	bne.n	8001268 <__aeabi_fmul+0x90>
 8001266:	e0c6      	b.n	80013f6 <__aeabi_fmul+0x21e>
 8001268:	2b01      	cmp	r3, #1
 800126a:	d14f      	bne.n	800130c <__aeabi_fmul+0x134>
 800126c:	2000      	movs	r0, #0
 800126e:	2400      	movs	r4, #0
 8001270:	05c0      	lsls	r0, r0, #23
 8001272:	07ff      	lsls	r7, r7, #31
 8001274:	4320      	orrs	r0, r4
 8001276:	4338      	orrs	r0, r7
 8001278:	bcf0      	pop	{r4, r5, r6, r7}
 800127a:	46bb      	mov	fp, r7
 800127c:	46b2      	mov	sl, r6
 800127e:	46a9      	mov	r9, r5
 8001280:	46a0      	mov	r8, r4
 8001282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001284:	2c00      	cmp	r4, #0
 8001286:	d171      	bne.n	800136c <__aeabi_fmul+0x194>
 8001288:	2304      	movs	r3, #4
 800128a:	469a      	mov	sl, r3
 800128c:	3b03      	subs	r3, #3
 800128e:	2500      	movs	r5, #0
 8001290:	469b      	mov	fp, r3
 8001292:	e7b9      	b.n	8001208 <__aeabi_fmul+0x30>
 8001294:	2c00      	cmp	r4, #0
 8001296:	d163      	bne.n	8001360 <__aeabi_fmul+0x188>
 8001298:	2308      	movs	r3, #8
 800129a:	469a      	mov	sl, r3
 800129c:	3b06      	subs	r3, #6
 800129e:	25ff      	movs	r5, #255	; 0xff
 80012a0:	469b      	mov	fp, r3
 80012a2:	e7b1      	b.n	8001208 <__aeabi_fmul+0x30>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d150      	bne.n	800134a <__aeabi_fmul+0x172>
 80012a8:	4652      	mov	r2, sl
 80012aa:	3301      	adds	r3, #1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	4692      	mov	sl, r2
 80012b0:	2001      	movs	r0, #1
 80012b2:	e7bc      	b.n	800122e <__aeabi_fmul+0x56>
 80012b4:	20ff      	movs	r0, #255	; 0xff
 80012b6:	2400      	movs	r4, #0
 80012b8:	e7da      	b.n	8001270 <__aeabi_fmul+0x98>
 80012ba:	4648      	mov	r0, r9
 80012bc:	0c26      	lsrs	r6, r4, #16
 80012be:	0424      	lsls	r4, r4, #16
 80012c0:	0c22      	lsrs	r2, r4, #16
 80012c2:	0404      	lsls	r4, r0, #16
 80012c4:	0c24      	lsrs	r4, r4, #16
 80012c6:	464b      	mov	r3, r9
 80012c8:	0020      	movs	r0, r4
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	4350      	muls	r0, r2
 80012ce:	4374      	muls	r4, r6
 80012d0:	435a      	muls	r2, r3
 80012d2:	435e      	muls	r6, r3
 80012d4:	1912      	adds	r2, r2, r4
 80012d6:	0c03      	lsrs	r3, r0, #16
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	429c      	cmp	r4, r3
 80012dc:	d903      	bls.n	80012e6 <__aeabi_fmul+0x10e>
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0252      	lsls	r2, r2, #9
 80012e2:	4694      	mov	ip, r2
 80012e4:	4466      	add	r6, ip
 80012e6:	0400      	lsls	r0, r0, #16
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	0c00      	lsrs	r0, r0, #16
 80012ec:	1812      	adds	r2, r2, r0
 80012ee:	0194      	lsls	r4, r2, #6
 80012f0:	1e60      	subs	r0, r4, #1
 80012f2:	4184      	sbcs	r4, r0
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	0e92      	lsrs	r2, r2, #26
 80012f8:	199b      	adds	r3, r3, r6
 80012fa:	4314      	orrs	r4, r2
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	431c      	orrs	r4, r3
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	d572      	bpl.n	80013ea <__aeabi_fmul+0x212>
 8001304:	2001      	movs	r0, #1
 8001306:	0863      	lsrs	r3, r4, #1
 8001308:	4004      	ands	r4, r0
 800130a:	431c      	orrs	r4, r3
 800130c:	0008      	movs	r0, r1
 800130e:	307f      	adds	r0, #127	; 0x7f
 8001310:	2800      	cmp	r0, #0
 8001312:	dd3c      	ble.n	800138e <__aeabi_fmul+0x1b6>
 8001314:	0763      	lsls	r3, r4, #29
 8001316:	d004      	beq.n	8001322 <__aeabi_fmul+0x14a>
 8001318:	230f      	movs	r3, #15
 800131a:	4023      	ands	r3, r4
 800131c:	2b04      	cmp	r3, #4
 800131e:	d000      	beq.n	8001322 <__aeabi_fmul+0x14a>
 8001320:	3404      	adds	r4, #4
 8001322:	0123      	lsls	r3, r4, #4
 8001324:	d503      	bpl.n	800132e <__aeabi_fmul+0x156>
 8001326:	3180      	adds	r1, #128	; 0x80
 8001328:	0008      	movs	r0, r1
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <__aeabi_fmul+0x230>)
 800132c:	401c      	ands	r4, r3
 800132e:	28fe      	cmp	r0, #254	; 0xfe
 8001330:	dcc0      	bgt.n	80012b4 <__aeabi_fmul+0xdc>
 8001332:	01a4      	lsls	r4, r4, #6
 8001334:	0a64      	lsrs	r4, r4, #9
 8001336:	b2c0      	uxtb	r0, r0
 8001338:	e79a      	b.n	8001270 <__aeabi_fmul+0x98>
 800133a:	0037      	movs	r7, r6
 800133c:	e78e      	b.n	800125c <__aeabi_fmul+0x84>
 800133e:	4652      	mov	r2, sl
 8001340:	2303      	movs	r3, #3
 8001342:	431a      	orrs	r2, r3
 8001344:	4692      	mov	sl, r2
 8001346:	2003      	movs	r0, #3
 8001348:	e771      	b.n	800122e <__aeabi_fmul+0x56>
 800134a:	4648      	mov	r0, r9
 800134c:	f000 f8c4 	bl	80014d8 <__clzsi2>
 8001350:	464a      	mov	r2, r9
 8001352:	1f43      	subs	r3, r0, #5
 8001354:	409a      	lsls	r2, r3
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	4691      	mov	r9, r2
 800135a:	2000      	movs	r0, #0
 800135c:	3d76      	subs	r5, #118	; 0x76
 800135e:	e766      	b.n	800122e <__aeabi_fmul+0x56>
 8001360:	230c      	movs	r3, #12
 8001362:	469a      	mov	sl, r3
 8001364:	3b09      	subs	r3, #9
 8001366:	25ff      	movs	r5, #255	; 0xff
 8001368:	469b      	mov	fp, r3
 800136a:	e74d      	b.n	8001208 <__aeabi_fmul+0x30>
 800136c:	0020      	movs	r0, r4
 800136e:	f000 f8b3 	bl	80014d8 <__clzsi2>
 8001372:	2576      	movs	r5, #118	; 0x76
 8001374:	1f43      	subs	r3, r0, #5
 8001376:	409c      	lsls	r4, r3
 8001378:	2300      	movs	r3, #0
 800137a:	426d      	negs	r5, r5
 800137c:	469a      	mov	sl, r3
 800137e:	469b      	mov	fp, r3
 8001380:	1a2d      	subs	r5, r5, r0
 8001382:	e741      	b.n	8001208 <__aeabi_fmul+0x30>
 8001384:	2480      	movs	r4, #128	; 0x80
 8001386:	2700      	movs	r7, #0
 8001388:	20ff      	movs	r0, #255	; 0xff
 800138a:	03e4      	lsls	r4, r4, #15
 800138c:	e770      	b.n	8001270 <__aeabi_fmul+0x98>
 800138e:	2301      	movs	r3, #1
 8001390:	1a1b      	subs	r3, r3, r0
 8001392:	2b1b      	cmp	r3, #27
 8001394:	dd00      	ble.n	8001398 <__aeabi_fmul+0x1c0>
 8001396:	e769      	b.n	800126c <__aeabi_fmul+0x94>
 8001398:	319e      	adds	r1, #158	; 0x9e
 800139a:	0020      	movs	r0, r4
 800139c:	408c      	lsls	r4, r1
 800139e:	40d8      	lsrs	r0, r3
 80013a0:	1e63      	subs	r3, r4, #1
 80013a2:	419c      	sbcs	r4, r3
 80013a4:	4304      	orrs	r4, r0
 80013a6:	0763      	lsls	r3, r4, #29
 80013a8:	d004      	beq.n	80013b4 <__aeabi_fmul+0x1dc>
 80013aa:	230f      	movs	r3, #15
 80013ac:	4023      	ands	r3, r4
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d000      	beq.n	80013b4 <__aeabi_fmul+0x1dc>
 80013b2:	3404      	adds	r4, #4
 80013b4:	0163      	lsls	r3, r4, #5
 80013b6:	d51a      	bpl.n	80013ee <__aeabi_fmul+0x216>
 80013b8:	2001      	movs	r0, #1
 80013ba:	2400      	movs	r4, #0
 80013bc:	e758      	b.n	8001270 <__aeabi_fmul+0x98>
 80013be:	2080      	movs	r0, #128	; 0x80
 80013c0:	03c0      	lsls	r0, r0, #15
 80013c2:	4204      	tst	r4, r0
 80013c4:	d009      	beq.n	80013da <__aeabi_fmul+0x202>
 80013c6:	464b      	mov	r3, r9
 80013c8:	4203      	tst	r3, r0
 80013ca:	d106      	bne.n	80013da <__aeabi_fmul+0x202>
 80013cc:	464c      	mov	r4, r9
 80013ce:	4304      	orrs	r4, r0
 80013d0:	0264      	lsls	r4, r4, #9
 80013d2:	4647      	mov	r7, r8
 80013d4:	20ff      	movs	r0, #255	; 0xff
 80013d6:	0a64      	lsrs	r4, r4, #9
 80013d8:	e74a      	b.n	8001270 <__aeabi_fmul+0x98>
 80013da:	2080      	movs	r0, #128	; 0x80
 80013dc:	03c0      	lsls	r0, r0, #15
 80013de:	4304      	orrs	r4, r0
 80013e0:	0264      	lsls	r4, r4, #9
 80013e2:	0037      	movs	r7, r6
 80013e4:	20ff      	movs	r0, #255	; 0xff
 80013e6:	0a64      	lsrs	r4, r4, #9
 80013e8:	e742      	b.n	8001270 <__aeabi_fmul+0x98>
 80013ea:	0029      	movs	r1, r5
 80013ec:	e78e      	b.n	800130c <__aeabi_fmul+0x134>
 80013ee:	01a4      	lsls	r4, r4, #6
 80013f0:	2000      	movs	r0, #0
 80013f2:	0a64      	lsrs	r4, r4, #9
 80013f4:	e73c      	b.n	8001270 <__aeabi_fmul+0x98>
 80013f6:	2080      	movs	r0, #128	; 0x80
 80013f8:	03c0      	lsls	r0, r0, #15
 80013fa:	4304      	orrs	r4, r0
 80013fc:	0264      	lsls	r4, r4, #9
 80013fe:	20ff      	movs	r0, #255	; 0xff
 8001400:	0a64      	lsrs	r4, r4, #9
 8001402:	e735      	b.n	8001270 <__aeabi_fmul+0x98>
 8001404:	08006738 	.word	0x08006738
 8001408:	f7ffffff 	.word	0xf7ffffff

0800140c <__aeabi_f2iz>:
 800140c:	0241      	lsls	r1, r0, #9
 800140e:	0042      	lsls	r2, r0, #1
 8001410:	0fc3      	lsrs	r3, r0, #31
 8001412:	0a49      	lsrs	r1, r1, #9
 8001414:	2000      	movs	r0, #0
 8001416:	0e12      	lsrs	r2, r2, #24
 8001418:	2a7e      	cmp	r2, #126	; 0x7e
 800141a:	d903      	bls.n	8001424 <__aeabi_f2iz+0x18>
 800141c:	2a9d      	cmp	r2, #157	; 0x9d
 800141e:	d902      	bls.n	8001426 <__aeabi_f2iz+0x1a>
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <__aeabi_f2iz+0x3c>)
 8001422:	1898      	adds	r0, r3, r2
 8001424:	4770      	bx	lr
 8001426:	2080      	movs	r0, #128	; 0x80
 8001428:	0400      	lsls	r0, r0, #16
 800142a:	4301      	orrs	r1, r0
 800142c:	2a95      	cmp	r2, #149	; 0x95
 800142e:	dc07      	bgt.n	8001440 <__aeabi_f2iz+0x34>
 8001430:	2096      	movs	r0, #150	; 0x96
 8001432:	1a82      	subs	r2, r0, r2
 8001434:	40d1      	lsrs	r1, r2
 8001436:	4248      	negs	r0, r1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f3      	bne.n	8001424 <__aeabi_f2iz+0x18>
 800143c:	0008      	movs	r0, r1
 800143e:	e7f1      	b.n	8001424 <__aeabi_f2iz+0x18>
 8001440:	3a96      	subs	r2, #150	; 0x96
 8001442:	4091      	lsls	r1, r2
 8001444:	e7f7      	b.n	8001436 <__aeabi_f2iz+0x2a>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	7fffffff 	.word	0x7fffffff

0800144c <__aeabi_i2f>:
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	2800      	cmp	r0, #0
 8001450:	d013      	beq.n	800147a <__aeabi_i2f+0x2e>
 8001452:	17c3      	asrs	r3, r0, #31
 8001454:	18c5      	adds	r5, r0, r3
 8001456:	405d      	eors	r5, r3
 8001458:	0fc4      	lsrs	r4, r0, #31
 800145a:	0028      	movs	r0, r5
 800145c:	f000 f83c 	bl	80014d8 <__clzsi2>
 8001460:	239e      	movs	r3, #158	; 0x9e
 8001462:	0001      	movs	r1, r0
 8001464:	1a1b      	subs	r3, r3, r0
 8001466:	2b96      	cmp	r3, #150	; 0x96
 8001468:	dc0f      	bgt.n	800148a <__aeabi_i2f+0x3e>
 800146a:	2808      	cmp	r0, #8
 800146c:	dd01      	ble.n	8001472 <__aeabi_i2f+0x26>
 800146e:	3908      	subs	r1, #8
 8001470:	408d      	lsls	r5, r1
 8001472:	026d      	lsls	r5, r5, #9
 8001474:	0a6d      	lsrs	r5, r5, #9
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	e002      	b.n	8001480 <__aeabi_i2f+0x34>
 800147a:	2400      	movs	r4, #0
 800147c:	2000      	movs	r0, #0
 800147e:	2500      	movs	r5, #0
 8001480:	05c0      	lsls	r0, r0, #23
 8001482:	4328      	orrs	r0, r5
 8001484:	07e4      	lsls	r4, r4, #31
 8001486:	4320      	orrs	r0, r4
 8001488:	bd70      	pop	{r4, r5, r6, pc}
 800148a:	2b99      	cmp	r3, #153	; 0x99
 800148c:	dd0b      	ble.n	80014a6 <__aeabi_i2f+0x5a>
 800148e:	2205      	movs	r2, #5
 8001490:	002e      	movs	r6, r5
 8001492:	1a12      	subs	r2, r2, r0
 8001494:	40d6      	lsrs	r6, r2
 8001496:	0002      	movs	r2, r0
 8001498:	321b      	adds	r2, #27
 800149a:	4095      	lsls	r5, r2
 800149c:	0028      	movs	r0, r5
 800149e:	1e45      	subs	r5, r0, #1
 80014a0:	41a8      	sbcs	r0, r5
 80014a2:	0035      	movs	r5, r6
 80014a4:	4305      	orrs	r5, r0
 80014a6:	2905      	cmp	r1, #5
 80014a8:	dd01      	ble.n	80014ae <__aeabi_i2f+0x62>
 80014aa:	1f4a      	subs	r2, r1, #5
 80014ac:	4095      	lsls	r5, r2
 80014ae:	002a      	movs	r2, r5
 80014b0:	4e08      	ldr	r6, [pc, #32]	; (80014d4 <__aeabi_i2f+0x88>)
 80014b2:	4032      	ands	r2, r6
 80014b4:	0768      	lsls	r0, r5, #29
 80014b6:	d009      	beq.n	80014cc <__aeabi_i2f+0x80>
 80014b8:	200f      	movs	r0, #15
 80014ba:	4028      	ands	r0, r5
 80014bc:	2804      	cmp	r0, #4
 80014be:	d005      	beq.n	80014cc <__aeabi_i2f+0x80>
 80014c0:	3204      	adds	r2, #4
 80014c2:	0150      	lsls	r0, r2, #5
 80014c4:	d502      	bpl.n	80014cc <__aeabi_i2f+0x80>
 80014c6:	239f      	movs	r3, #159	; 0x9f
 80014c8:	4032      	ands	r2, r6
 80014ca:	1a5b      	subs	r3, r3, r1
 80014cc:	0192      	lsls	r2, r2, #6
 80014ce:	0a55      	lsrs	r5, r2, #9
 80014d0:	b2d8      	uxtb	r0, r3
 80014d2:	e7d5      	b.n	8001480 <__aeabi_i2f+0x34>
 80014d4:	fbffffff 	.word	0xfbffffff

080014d8 <__clzsi2>:
 80014d8:	211c      	movs	r1, #28
 80014da:	2301      	movs	r3, #1
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	4298      	cmp	r0, r3
 80014e0:	d301      	bcc.n	80014e6 <__clzsi2+0xe>
 80014e2:	0c00      	lsrs	r0, r0, #16
 80014e4:	3910      	subs	r1, #16
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	4298      	cmp	r0, r3
 80014ea:	d301      	bcc.n	80014f0 <__clzsi2+0x18>
 80014ec:	0a00      	lsrs	r0, r0, #8
 80014ee:	3908      	subs	r1, #8
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	4298      	cmp	r0, r3
 80014f4:	d301      	bcc.n	80014fa <__clzsi2+0x22>
 80014f6:	0900      	lsrs	r0, r0, #4
 80014f8:	3904      	subs	r1, #4
 80014fa:	a202      	add	r2, pc, #8	; (adr r2, 8001504 <__clzsi2+0x2c>)
 80014fc:	5c10      	ldrb	r0, [r2, r0]
 80014fe:	1840      	adds	r0, r0, r1
 8001500:	4770      	bx	lr
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	02020304 	.word	0x02020304
 8001508:	01010101 	.word	0x01010101
	...

08001514 <__clzdi2>:
 8001514:	b510      	push	{r4, lr}
 8001516:	2900      	cmp	r1, #0
 8001518:	d103      	bne.n	8001522 <__clzdi2+0xe>
 800151a:	f7ff ffdd 	bl	80014d8 <__clzsi2>
 800151e:	3020      	adds	r0, #32
 8001520:	e002      	b.n	8001528 <__clzdi2+0x14>
 8001522:	1c08      	adds	r0, r1, #0
 8001524:	f7ff ffd8 	bl	80014d8 <__clzsi2>
 8001528:	bd10      	pop	{r4, pc}
 800152a:	46c0      	nop			; (mov r8, r8)

0800152c <ST_Sigfox_Init>:
	}
	return open_err;
}

ST_SFX_ERR ST_Sigfox_Init(NVM_BoardDataType *sfxConfig, uint8_t openAfterInit)
{
 800152c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ST_SFX_ERR ret_err = ST_SFX_ERR_NONE;

	/* Macro that defines and initializes the nvmconfig structure */
	INIT_NVM_CONFIG(nvmConfig);
 800152e:	2300      	movs	r3, #0
 8001530:	466a      	mov	r2, sp
{
 8001532:	0004      	movs	r4, r0
	INIT_NVM_CONFIG(nvmConfig);
 8001534:	7313      	strb	r3, [r2, #12]

	/* Sigfox Credentials Management */
	nvmConfig.nvmType = NVM_TYPE_FLASH;
 8001536:	3301      	adds	r3, #1
 8001538:	7013      	strb	r3, [r2, #0]
	nvmConfig.sfxDataAddress = (uint32_t)FLASH_USER_START_ADDR; /* Set here the address for 'NVM sigfox data' management */
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <ST_Sigfox_Init+0x2c>)
	nvmConfig.boardDataAddress = (uint32_t)FLASH_BOARD_START_ADDR; /* Set here the address for 'NVM board data' management */

	/* Configure the NVM_API */
	SetNVMInitial(&nvmConfig);
 800153c:	4668      	mov	r0, sp
	nvmConfig.sfxDataAddress = (uint32_t)FLASH_USER_START_ADDR; /* Set here the address for 'NVM sigfox data' management */
 800153e:	9302      	str	r3, [sp, #8]
	nvmConfig.boardDataAddress = (uint32_t)FLASH_BOARD_START_ADDR; /* Set here the address for 'NVM board data' management */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <ST_Sigfox_Init+0x30>)
 8001542:	9301      	str	r3, [sp, #4]
	SetNVMInitial(&nvmConfig);
 8001544:	f003 fd38 	bl	8004fb8 <SetNVMInitial>

	/* Retrieve Sigfox info from FLASH */
	if(enc_utils_retrieve_data_from_flash(sfxConfig) != 0)
 8001548:	0020      	movs	r0, r4
 800154a:	f7ff fa12 	bl	8000972 <enc_utils_retrieve_data_from_flash>
 800154e:	2800      	cmp	r0, #0
 8001550:	d000      	beq.n	8001554 <ST_Sigfox_Init+0x28>
		ret_err = ST_SFX_ERR_CREDENTIALS;
 8001552:	2002      	movs	r0, #2
	return ret_err;
}
 8001554:	b004      	add	sp, #16
 8001556:	bd10      	pop	{r4, pc}
 8001558:	08080080 	.word	0x08080080
 800155c:	08080000 	.word	0x08080000

08001560 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001560:	b513      	push	{r0, r1, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8001562:	2208      	movs	r2, #8
 8001564:	2100      	movs	r1, #0
 8001566:	4668      	mov	r0, sp
 8001568:	f003 fed9 	bl	800531e <memset>
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156c:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.OversamplingMode = DISABLE;
 800156e:	4c1c      	ldr	r4, [pc, #112]	; (80015e0 <MX_ADC_Init+0x80>)
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001570:	32ff      	adds	r2, #255	; 0xff
 8001572:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001574:	0022      	movs	r2, r4
  hadc.Init.OversamplingMode = DISABLE;
 8001576:	2300      	movs	r3, #0
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001578:	322c      	adds	r2, #44	; 0x2c
 800157a:	7013      	strb	r3, [r2, #0]
  hadc.Instance = ADC1;
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <MX_ADC_Init+0x84>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800157e:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8001580:	6022      	str	r2, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001582:	22c0      	movs	r2, #192	; 0xc0
 8001584:	0612      	lsls	r2, r2, #24
 8001586:	6062      	str	r2, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001588:	2201      	movs	r2, #1
  hadc.Init.ContinuousConvMode = DISABLE;
 800158a:	8423      	strh	r3, [r4, #32]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800158c:	6122      	str	r2, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158e:	3203      	adds	r2, #3
  hadc.Init.OversamplingMode = DISABLE;
 8001590:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001592:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001594:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001596:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001598:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800159a:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159c:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159e:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015a0:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015a2:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015a4:	f001 f9e4 	bl	8002970 <HAL_ADC_Init>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 80015ac:	f000 fa3a 	bl	8001a24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <MX_ADC_Init+0x88>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015b2:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015b4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015b6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015b8:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015be:	f001 fb29 	bl	8002c14 <HAL_ADC_ConfigChannel>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC_Init+0x6a>
  {
    Error_Handler();
 80015c6:	f000 fa2d 	bl	8001a24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_ADC_Init+0x8c>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015cc:	4669      	mov	r1, sp
 80015ce:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015d0:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015d2:	f001 fb1f 	bl	8002c14 <HAL_ADC_ConfigChannel>
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80015da:	f000 fa23 	bl	8001a24 <Error_Handler>
  }

}
 80015de:	bd13      	pop	{r0, r1, r4, pc}
 80015e0:	20000394 	.word	0x20000394
 80015e4:	40012400 	.word	0x40012400
 80015e8:	48040000 	.word	0x48040000
 80015ec:	44020000 	.word	0x44020000

080015f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_ADC_MspInit+0x28>)
 80015f2:	6802      	ldr	r2, [r0, #0]
{
 80015f4:	b510      	push	{r4, lr}
  if(adcHandle->Instance==ADC1)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d10d      	bne.n	8001616 <HAL_ADC_MspInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_ADC_MspInit+0x2c>)
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	6b51      	ldr	r1, [r2, #52]	; 0x34

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 2, 0);
 8001602:	200c      	movs	r0, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001604:	430b      	orrs	r3, r1
 8001606:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 2, 0);
 8001608:	2102      	movs	r1, #2
 800160a:	2200      	movs	r2, #0
 800160c:	f001 fb56 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001610:	200c      	movs	r0, #12
 8001612:	f001 fb7d 	bl	8002d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001616:	bd10      	pop	{r4, pc}
 8001618:	40012400 	.word	0x40012400
 800161c:	40021000 	.word	0x40021000

08001620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001620:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	2101      	movs	r1, #1
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_DMA_Init+0x34>)

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8001626:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162a:	430a      	orrs	r2, r1
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8001630:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001632:	400b      	ands	r3, r1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8001638:	f001 fb40 	bl	8002cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800163c:	200a      	movs	r0, #10
 800163e:	f001 fb67 	bl	8002d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	200b      	movs	r0, #11
 8001646:	0011      	movs	r1, r2
 8001648:	f001 fb38 	bl	8002cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800164c:	200b      	movs	r0, #11
 800164e:	f001 fb5f 	bl	8002d10 <HAL_NVIC_EnableIRQ>

}
 8001652:	bd07      	pop	{r0, r1, r2, pc}
 8001654:	40021000 	.word	0x40021000

08001658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2401      	movs	r4, #1
{
 800165c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	2214      	movs	r2, #20
 8001660:	2100      	movs	r1, #0
 8001662:	a803      	add	r0, sp, #12
 8001664:	f003 fe5b 	bl	800531e <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 800166a:	2580      	movs	r5, #128	; 0x80
 800166c:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8001670:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8001674:	022d      	lsls	r5, r5, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4322      	orrs	r2, r4
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 800167c:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4022      	ands	r2, r4
 8001680:	9201      	str	r2, [sp, #4]
 8001682:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001686:	4f25      	ldr	r7, [pc, #148]	; (800171c <MX_GPIO_Init+0xc4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	430a      	orrs	r2, r1
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 800168e:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	400b      	ands	r3, r1
 8001692:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8001694:	0029      	movs	r1, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8001698:	f001 fdec 	bl	8003274 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0038      	movs	r0, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	0049      	lsls	r1, r1, #1
 80016a4:	f001 fde6 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	0030      	movs	r0, r6
 80016ac:	2120      	movs	r1, #32
 80016ae:	f001 fde1 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2LP_SPI_CS_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2102      	movs	r1, #2
  HAL_GPIO_Init(S2LP_SPI_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80016b4:	ab03      	add	r3, sp, #12
 80016b6:	0030      	movs	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b8:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(S2LP_SPI_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80016ba:	0019      	movs	r1, r3
  GPIO_InitStruct.Pin = S2LP_SPI_CS_PIN_Pin;
 80016bc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(S2LP_SPI_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f001 fd19 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016c8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ce:	005b      	lsls	r3, r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f001 fd0d 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016de:	2304      	movs	r3, #4
 80016e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	0038      	movs	r0, r7
 80016e6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f001 fd04 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80016f0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80016f2:	0030      	movs	r0, r6
 80016f4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80016f6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f001 fcfb 	bl	80030f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001702:	002a      	movs	r2, r5
 8001704:	0029      	movs	r1, r5
 8001706:	2006      	movs	r0, #6
 8001708:	f001 fad8 	bl	8002cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800170c:	2006      	movs	r0, #6
 800170e:	f001 faff 	bl	8002d10 <HAL_NVIC_EnableIRQ>
}
 8001712:	b009      	add	sp, #36	; 0x24
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40021000 	.word	0x40021000
 800171c:	50000400 	.word	0x50000400
 8001720:	10210000 	.word	0x10210000

08001724 <S2LPShutdownEnter>:
#endif

void S2LPShutdownEnter(void)
{
	/* Puts high the GPIO connected to shutdown pin */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2180      	movs	r1, #128	; 0x80
{
 8001728:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800172a:	4091      	lsls	r1, r2
 800172c:	4801      	ldr	r0, [pc, #4]	; (8001734 <S2LPShutdownEnter+0x10>)
 800172e:	f001 fda1 	bl	8003274 <HAL_GPIO_WritePin>
}
 8001732:	bd10      	pop	{r4, pc}
 8001734:	50000400 	.word	0x50000400

08001738 <S2LPShutdownInit>:

void S2LPShutdownInit(void)
{
 8001738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	//S2LP_M2S_SDN_CLOCK();
	__GPIOB_CLK_ENABLE();
 800173a:	2002      	movs	r0, #2
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <S2LPShutdownInit+0x38>)
 800173e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001740:	4301      	orrs	r1, r0
 8001742:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001744:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	GPIO_InitStructure.Pin   = S2LP_M2S_SDN_PIN;
	GPIO_InitStructure.Mode  = S2LP_M2S_SDN_MODE;
	GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
	GPIO_InitStructure.Speed = S2LP_M2S_SDN_SPEED;

	HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
 8001746:	a901      	add	r1, sp, #4
	__GPIOB_CLK_ENABLE();
 8001748:	4003      	ands	r3, r0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStructure.Pin   = S2LP_M2S_SDN_PIN;
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode  = S2LP_M2S_SDN_MODE;
 8001754:	3bff      	subs	r3, #255	; 0xff
 8001756:	9302      	str	r3, [sp, #8]
	GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
 8001758:	2300      	movs	r3, #0
	HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <S2LPShutdownInit+0x3c>)
	GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
 800175c:	9303      	str	r3, [sp, #12]
	GPIO_InitStructure.Speed = S2LP_M2S_SDN_SPEED;
 800175e:	3303      	adds	r3, #3
 8001760:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
 8001762:	f001 fcc9 	bl	80030f8 <HAL_GPIO_Init>

	S2LPShutdownEnter();
 8001766:	f7ff ffdd 	bl	8001724 <S2LPShutdownEnter>
}
 800176a:	b007      	add	sp, #28
 800176c:	bd00      	pop	{pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	40021000 	.word	0x40021000
 8001774:	50000400 	.word	0x50000400

08001778 <S2LPShutdownExit>:

void S2LPShutdownExit(void)
{
 8001778:	b507      	push	{r0, r1, r2, lr}
	/* Puts low the GPIO connected to shutdown pin */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	2200      	movs	r2, #0
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <S2LPShutdownExit+0x28>)
 8001780:	0049      	lsls	r1, r1, #1
 8001782:	f001 fd77 	bl	8003274 <HAL_GPIO_WritePin>

	/* Delay to allow the circuit POR, about 700 us */
	for(volatile uint32_t i=0;i<0x1E00;i++);
 8001786:	2300      	movs	r3, #0
 8001788:	22f0      	movs	r2, #240	; 0xf0
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	0152      	lsls	r2, r2, #5
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	4293      	cmp	r3, r2
 8001792:	d300      	bcc.n	8001796 <S2LPShutdownExit+0x1e>
}
 8001794:	bd07      	pop	{r0, r1, r2, pc}
	for(volatile uint32_t i=0;i<0x1E00;i++);
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	e7f7      	b.n	800178e <S2LPShutdownExit+0x16>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	50000400 	.word	0x50000400

080017a4 <S2LPIRQInit>:

void S2LPIRQInit(void)
{
	GPIO_InitTypeDef GPIO_InitStructure, EXTI_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	2002      	movs	r0, #2
{
 80017a6:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Configures MCU GPIO */
	GPIO_InitStructure.Pin   = GPIO_PIN_2;
 80017a8:	2404      	movs	r4, #4
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 80017aa:	2500      	movs	r5, #0
	GPIO_InitStructure.Pull  = GPIO_NOPULL;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80017ac:	2703      	movs	r7, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <S2LPIRQInit+0x48>)

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017b0:	4e0f      	ldr	r6, [pc, #60]	; (80017f0 <S2LPIRQInit+0x4c>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
{
 80017b4:	b08d      	sub	sp, #52	; 0x34
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4301      	orrs	r1, r0
 80017b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80017ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017bc:	a902      	add	r1, sp, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4003      	ands	r3, r0
 80017c0:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017c2:	0030      	movs	r0, r6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStructure.Pin   = GPIO_PIN_2;
 80017c6:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 80017c8:	9503      	str	r5, [sp, #12]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80017ca:	9504      	str	r5, [sp, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80017cc:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017ce:	f001 fc93 	bl	80030f8 <HAL_GPIO_Init>

	/* Configures MCU GPIO EXTI line */
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <S2LPIRQInit+0x50>)
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
 80017d4:	9407      	str	r4, [sp, #28]
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80017d6:	9308      	str	r3, [sp, #32]
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <S2LPIRQInit+0x54>)
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
 80017da:	9509      	str	r5, [sp, #36]	; 0x24
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;
 80017dc:	970a      	str	r7, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 80017de:	0030      	movs	r0, r6
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 80017e0:	615c      	str	r4, [r3, #20]
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 80017e2:	a907      	add	r1, sp, #28
 80017e4:	f001 fc88 	bl	80030f8 <HAL_GPIO_Init>
}
 80017e8:	b00d      	add	sp, #52	; 0x34
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	50000400 	.word	0x50000400
 80017f4:	10210000 	.word	0x10210000
 80017f8:	40010400 	.word	0x40010400

080017fc <S2LPIRQEnable>:

void S2LPIRQEnable(uint8_t state, uint8_t edge_direction)
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t xNewState = state ? ENABLE:DISABLE;
	GPIO_InitTypeDef EXTI_InitStructure;

	/* Configures EXTI line */
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <S2LPIRQEnable+0x54>)
{
 8001800:	b087      	sub	sp, #28
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 8001802:	9302      	str	r3, [sp, #8]
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
 8001806:	2504      	movs	r5, #4
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;

	/* Clear any pending interrupt before enabling */
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8001808:	4c12      	ldr	r4, [pc, #72]	; (8001854 <S2LPIRQEnable+0x58>)
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
 800180a:	9303      	str	r3, [sp, #12]
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;
 800180c:	3303      	adds	r3, #3
 800180e:	9304      	str	r3, [sp, #16]
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
 8001810:	9501      	str	r5, [sp, #4]
{
 8001812:	0006      	movs	r6, r0
 8001814:	000f      	movs	r7, r1
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <S2LPIRQEnable+0x5c>)
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8001818:	6165      	str	r5, [r4, #20]
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 800181a:	a901      	add	r1, sp, #4
 800181c:	f001 fc6c 	bl	80030f8 <HAL_GPIO_Init>

	if(edge_direction)
		EXTI->RTSR |= (uint16_t)GPIO_PIN_2;
 8001820:	68a3      	ldr	r3, [r4, #8]
	if(edge_direction)
 8001822:	2f00      	cmp	r7, #0
 8001824:	d00d      	beq.n	8001842 <S2LPIRQEnable+0x46>
		EXTI->RTSR |= (uint16_t)GPIO_PIN_2;
 8001826:	431d      	orrs	r5, r3
 8001828:	60a5      	str	r5, [r4, #8]
		EXTI->RTSR &= ~(uint16_t)GPIO_PIN_2;

	/* Set the GPIO interrupt priority and enable/disable it */
	if (xNewState == ENABLE)
	{
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800182a:	2006      	movs	r0, #6
	if (xNewState == ENABLE)
 800182c:	2e00      	cmp	r6, #0
 800182e:	d00b      	beq.n	8001848 <S2LPIRQEnable+0x4c>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001830:	f001 fa6e 	bl	8002d10 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0x00, 0x00);
 8001834:	2200      	movs	r2, #0
 8001836:	2006      	movs	r0, #6
 8001838:	0011      	movs	r1, r2
 800183a:	f001 fa3f 	bl	8002cbc <HAL_NVIC_SetPriority>
	}
	else
		HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
}
 800183e:	b007      	add	sp, #28
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EXTI->RTSR &= ~(uint16_t)GPIO_PIN_2;
 8001842:	43ab      	bics	r3, r5
 8001844:	60a3      	str	r3, [r4, #8]
 8001846:	e7f0      	b.n	800182a <S2LPIRQEnable+0x2e>
		HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8001848:	f001 fa6c 	bl	8002d24 <HAL_NVIC_DisableIRQ>
}
 800184c:	e7f7      	b.n	800183e <S2LPIRQEnable+0x42>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	10210000 	.word	0x10210000
 8001854:	40010400 	.word	0x40010400
 8001858:	50000400 	.word	0x50000400

0800185c <ST_MCU_API_GpioIRQ>:

void ST_MCU_API_GpioIRQ(sfx_u8 pin, sfx_u8 new_state, sfx_u8 trigger)
{
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	0015      	movs	r5, r2
 8001860:	000c      	movs	r4, r1
	/* configure the MCU IRQ connected to the specified S2-LP GPIO */
	/* trigger 1: rising, 0: falling (default) */
	S2LPIRQInit();
 8001862:	f7ff ff9f 	bl	80017a4 <S2LPIRQInit>
	S2LPIRQEnable(new_state, trigger);
 8001866:	0029      	movs	r1, r5
 8001868:	0020      	movs	r0, r4
 800186a:	f7ff ffc7 	bl	80017fc <S2LPIRQEnable>
}
 800186e:	bd70      	pop	{r4, r5, r6, pc}

08001870 <HAL_GPIO_EXTI_Callback>:
	GPIOA->BSRR = 1 << 21; /* </ LED OFF (PA5) */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_GPIO_EXTI_Callback+0x20>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001872:	b510      	push	{r4, lr}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001874:	6158      	str	r0, [r3, #20]

	if(GPIO_Pin == GPIO_PIN_2) {
 8001876:	2804      	cmp	r0, #4
 8001878:	d106      	bne.n	8001888 <HAL_GPIO_EXTI_Callback+0x18>
		if (ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag()==0) {
 800187a:	f003 fc6d 	bl	8005158 <ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag>
 800187e:	2800      	cmp	r0, #0
 8001880:	d103      	bne.n	800188a <HAL_GPIO_EXTI_Callback+0x1a>
	}

}

void setS2lpIrqRaisedFlag(uint8_t s2lpIrqRaised) {
	s2lp_irq_raised = s2lpIrqRaised;
 8001882:	2201      	movs	r2, #1
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GPIO_EXTI_Callback+0x24>)
 8001886:	701a      	strb	r2, [r3, #0]
}
 8001888:	bd10      	pop	{r4, pc}
			ST_RF_API_S2LP_IRQ_CB(); //If the CBPSK is implemented trigger TX State Machine
 800188a:	f003 fc75 	bl	8005178 <ST_RF_API_S2LP_IRQ_CB>
}
 800188e:	e7fb      	b.n	8001888 <HAL_GPIO_EXTI_Callback+0x18>
 8001890:	40010400 	.word	0x40010400
 8001894:	20000258 	.word	0x20000258

08001898 <Set_Pin_Output>:

uint8_t getS2lpIrqRaisedFlag(void) {
	return s2lp_irq_raised;
}

void Set_Pin_Output(GPIO_TypeDef *PORT, uint32_t PIN){
 8001898:	b530      	push	{r4, r5, lr}
 800189a:	b087      	sub	sp, #28
 800189c:	0004      	movs	r4, r0
 800189e:	000d      	movs	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	220c      	movs	r2, #12
 80018a2:	2100      	movs	r1, #0
 80018a4:	a803      	add	r0, sp, #12
 80018a6:	f003 fd3a 	bl	800531e <memset>
	GPIO_InitStruct.Pin = PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 80018ac:	0020      	movs	r0, r4
 80018ae:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = PIN;
 80018b0:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 80018b4:	f001 fc20 	bl	80030f8 <HAL_GPIO_Init>
}
 80018b8:	b007      	add	sp, #28
 80018ba:	bd30      	pop	{r4, r5, pc}

080018bc <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *PORT, uint32_t PIN){
 80018bc:	b530      	push	{r4, r5, lr}
 80018be:	b087      	sub	sp, #28
 80018c0:	0004      	movs	r4, r0
 80018c2:	000d      	movs	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	2208      	movs	r2, #8
 80018c6:	2100      	movs	r1, #0
 80018c8:	a804      	add	r0, sp, #16
 80018ca:	f003 fd28 	bl	800531e <memset>
	GPIO_InitStruct.Pin = PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 80018d0:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 80018d4:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d6:	3301      	adds	r3, #1
	GPIO_InitStruct.Pin = PIN;
 80018d8:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018da:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 80018dc:	f001 fc0c 	bl	80030f8 <HAL_GPIO_Init>
}
 80018e0:	b007      	add	sp, #28
 80018e2:	bd30      	pop	{r4, r5, pc}

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b530      	push	{r4, r5, lr}
 80018e6:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e8:	2234      	movs	r2, #52	; 0x34
 80018ea:	2100      	movs	r1, #0
 80018ec:	a80f      	add	r0, sp, #60	; 0x3c
 80018ee:	f003 fd16 	bl	800531e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f2:	2214      	movs	r2, #20
 80018f4:	2100      	movs	r1, #0
 80018f6:	a801      	add	r0, sp, #4
 80018f8:	f003 fd11 	bl	800531e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	2220      	movs	r2, #32
 80018fe:	2100      	movs	r1, #0
 8001900:	a806      	add	r0, sp, #24
 8001902:	f003 fd0c 	bl	800531e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001906:	4914      	ldr	r1, [pc, #80]	; (8001958 <SystemClock_Config+0x74>)
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <SystemClock_Config+0x78>)
 800190a:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800190c:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800190e:	401a      	ands	r2, r3
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001918:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191a:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800191c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001920:	3306      	adds	r3, #6
 8001922:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001924:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001926:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001928:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192a:	f001 fcff 	bl	800332c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001930:	0021      	movs	r1, r4
 8001932:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001936:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800193a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800193e:	f001 ff75 	bl	800382c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8001942:	2321      	movs	r3, #33	; 0x21
 8001944:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001946:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001948:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800194a:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800194c:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800194e:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001950:	f002 f844 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001954:	b01d      	add	sp, #116	; 0x74
 8001956:	bd30      	pop	{r4, r5, pc}
 8001958:	40007000 	.word	0x40007000
 800195c:	ffffe7ff 	.word	0xffffe7ff

08001960 <ST_Init>:

	ST_RF_API_set_rssi_offset(sfxConfiguration.rssiOffset);
	printf("RSSI %ld \n", sfxConfiguration.rssiOffset);
}

void ST_Init(void) {
 8001960:	b510      	push	{r4, lr}
	/* Put the radio off */
	S2LPShutdownInit();
 8001962:	f7ff fee9 	bl	8001738 <S2LPShutdownInit>
	HAL_Delay(10);
 8001966:	200a      	movs	r0, #10
 8001968:	f000 ffdc 	bl	8002924 <HAL_Delay>
	S2LPShutdownExit();
 800196c:	f7ff ff04 	bl	8001778 <S2LPShutdownExit>

	/* FEM Initialization */
	FEM_Init();
 8001970:	f000 ff5c 	bl	800282c <FEM_Init>
}
 8001974:	bd10      	pop	{r4, pc}
	...

08001978 <mcuConfig>:
void mcuConfig(void) {
 8001978:	b530      	push	{r4, r5, lr}
 800197a:	b089      	sub	sp, #36	; 0x24
	stSfxRetErr = ST_Sigfox_Init(&sfxConfiguration, 0);
 800197c:	ac01      	add	r4, sp, #4
	ST_Init();
 800197e:	f7ff ffef 	bl	8001960 <ST_Init>
	stSfxRetErr = ST_Sigfox_Init(&sfxConfiguration, 0);
 8001982:	2100      	movs	r1, #0
 8001984:	0020      	movs	r0, r4
 8001986:	f7ff fdd1 	bl	800152c <ST_Sigfox_Init>
		if(stSfxRetErr == ST_SFX_ERR_CREDENTIALS) {
 800198a:	2802      	cmp	r0, #2
 800198c:	d108      	bne.n	80019a0 <mcuConfig+0x28>
			sfxConfiguration.id = 0;
 800198e:	2500      	movs	r5, #0
			memset(sfxConfiguration.pac, 0x00, 8);
 8001990:	3007      	adds	r0, #7
 8001992:	2208      	movs	r2, #8
 8001994:	0029      	movs	r1, r5
 8001996:	4468      	add	r0, sp
			sfxConfiguration.id = 0;
 8001998:	9501      	str	r5, [sp, #4]
			memset(sfxConfiguration.pac, 0x00, 8);
 800199a:	f003 fcc0 	bl	800531e <memset>
			sfxConfiguration.rcz = 0;
 800199e:	7125      	strb	r5, [r4, #4]
	ST_MCU_API_TimerCalibration(500);
 80019a0:	20fa      	movs	r0, #250	; 0xfa
 80019a2:	0040      	lsls	r0, r0, #1
 80019a4:	f000 fdc8 	bl	8002538 <ST_MCU_API_TimerCalibration>
	printf("Sigfox iMCP HT32SX\n");
 80019a8:	4817      	ldr	r0, [pc, #92]	; (8001a08 <mcuConfig+0x90>)
 80019aa:	f003 fd61 	bl	8005470 <puts>
	printf("ID: %.8X - PAC: ", (unsigned int)sfxConfiguration.id);
 80019ae:	9901      	ldr	r1, [sp, #4]
 80019b0:	4816      	ldr	r0, [pc, #88]	; (8001a0c <mcuConfig+0x94>)
 80019b2:	f003 fcbd 	bl	8005330 <iprintf>
 80019b6:	2500      	movs	r5, #0
		printf("%.2X", sfxConfiguration.pac[i]);
 80019b8:	1963      	adds	r3, r4, r5
 80019ba:	7959      	ldrb	r1, [r3, #5]
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <mcuConfig+0x98>)
 80019be:	3501      	adds	r5, #1
 80019c0:	f003 fcb6 	bl	8005330 <iprintf>
	for(uint16_t i = 0; i < sizeof(sfxConfiguration.pac); i++)
 80019c4:	2d08      	cmp	r5, #8
 80019c6:	d1f7      	bne.n	80019b8 <mcuConfig+0x40>
	printf("\n");
 80019c8:	200a      	movs	r0, #10
 80019ca:	f003 fccb 	bl	8005364 <putchar>
	ST_RF_API_set_xtal_freq(50000000);
 80019ce:	4811      	ldr	r0, [pc, #68]	; (8001a14 <mcuConfig+0x9c>)
 80019d0:	f003 fbae 	bl	8005130 <ST_RF_API_set_xtal_freq>
	ST_RF_API_set_freq_offset(sfxConfiguration.freqOffset);
 80019d4:	6920      	ldr	r0, [r4, #16]
 80019d6:	f003 fbb1 	bl	800513c <ST_RF_API_set_freq_offset>
	printf("Freq Offset %ld \n", (int32_t)sfxConfiguration.freqOffset);
 80019da:	6921      	ldr	r1, [r4, #16]
 80019dc:	480e      	ldr	r0, [pc, #56]	; (8001a18 <mcuConfig+0xa0>)
 80019de:	f003 fca7 	bl	8005330 <iprintf>
	ST_RF_API_set_lbt_thr_offset(sfxConfiguration.lbtOffset);
 80019e2:	2018      	movs	r0, #24
 80019e4:	5620      	ldrsb	r0, [r4, r0]
 80019e6:	f003 fbaf 	bl	8005148 <ST_RF_API_set_lbt_thr_offset>
	printf("LBT %ld \n", (int32_t)sfxConfiguration.lbtOffset);
 80019ea:	69a1      	ldr	r1, [r4, #24]
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <mcuConfig+0xa4>)
 80019ee:	f003 fc9f 	bl	8005330 <iprintf>
	ST_RF_API_set_rssi_offset(sfxConfiguration.rssiOffset);
 80019f2:	2014      	movs	r0, #20
 80019f4:	5620      	ldrsb	r0, [r4, r0]
 80019f6:	f003 fb93 	bl	8005120 <ST_RF_API_set_rssi_offset>
	printf("RSSI %ld \n", sfxConfiguration.rssiOffset);
 80019fa:	6961      	ldr	r1, [r4, #20]
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <mcuConfig+0xa8>)
 80019fe:	f003 fc97 	bl	8005330 <iprintf>
}
 8001a02:	b009      	add	sp, #36	; 0x24
 8001a04:	bd30      	pop	{r4, r5, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	08006778 	.word	0x08006778
 8001a0c:	0800678b 	.word	0x0800678b
 8001a10:	0800679c 	.word	0x0800679c
 8001a14:	02faf080 	.word	0x02faf080
 8001a18:	080067a1 	.word	0x080067a1
 8001a1c:	080067b3 	.word	0x080067b3
 8001a20:	080067bd 	.word	0x080067bd

08001a24 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
/* User can add his own implementation to report the HAL error return state */
}
 8001a24:	4770      	bx	lr
	...

08001a28 <delay>:
}
#endif /* USE_FULL_ASSERT */

void delay(uint32_t us)
{
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <delay+0x10>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<us);
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	4282      	cmp	r2, r0
 8001a34:	d3fc      	bcc.n	8001a30 <delay+0x8>
}
 8001a36:	4770      	bx	lr
 8001a38:	20000508 	.word	0x20000508

08001a3c <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
	uint8_t Response = 0;
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001a3c:	2180      	movs	r1, #128	; 0x80
{
 8001a3e:	b510      	push	{r4, lr}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001a40:	4812      	ldr	r0, [pc, #72]	; (8001a8c <DS18B20_Start+0x50>)
 8001a42:	00c9      	lsls	r1, r1, #3
 8001a44:	f7ff ff28 	bl	8001898 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	00c9      	lsls	r1, r1, #3
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <DS18B20_Start+0x50>)
 8001a50:	f001 fc10 	bl	8003274 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001a54:	20f0      	movs	r0, #240	; 0xf0
 8001a56:	0040      	lsls	r0, r0, #1
 8001a58:	f7ff ffe6 	bl	8001a28 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <DS18B20_Start+0x50>)
 8001a60:	00c9      	lsls	r1, r1, #3
 8001a62:	f7ff ff2b 	bl	80018bc <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001a66:	2050      	movs	r0, #80	; 0x50
 8001a68:	f7ff ffde 	bl	8001a28 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <DS18B20_Start+0x50>)
 8001a70:	00c9      	lsls	r1, r1, #3
 8001a72:	f001 fbf9 	bl	8003268 <HAL_GPIO_ReadPin>
 8001a76:	2401      	movs	r4, #1
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d000      	beq.n	8001a7e <DS18B20_Start+0x42>
	else Response = -1;
 8001a7c:	34fe      	adds	r4, #254	; 0xfe

	delay (400); // 480 us delay totally.
 8001a7e:	20c8      	movs	r0, #200	; 0xc8
 8001a80:	0040      	lsls	r0, r0, #1
 8001a82:	f7ff ffd1 	bl	8001a28 <delay>

	return Response;
}
 8001a86:	0020      	movs	r0, r4
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	50000400 	.word	0x50000400

08001a90 <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001a90:	2180      	movs	r1, #128	; 0x80
{
 8001a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001a94:	00c9      	lsls	r1, r1, #3
{
 8001a96:	0005      	movs	r5, r0
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001a98:	481a      	ldr	r0, [pc, #104]	; (8001b04 <DS18B20_Write+0x74>)
 8001a9a:	f7ff fefd 	bl	8001898 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001a9e:	2400      	movs	r4, #0
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001aa0:	2601      	movs	r6, #1
 8001aa2:	002b      	movs	r3, r5
 8001aa4:	4123      	asrs	r3, r4
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001aa6:	2180      	movs	r1, #128	; 0x80
		if ((data & (1<<i))!=0)  // if the bit is high
 8001aa8:	001f      	movs	r7, r3
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001aaa:	4816      	ldr	r0, [pc, #88]	; (8001b04 <DS18B20_Write+0x74>)
		if ((data & (1<<i))!=0)  // if the bit is high
 8001aac:	4037      	ands	r7, r6
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001aae:	00c9      	lsls	r1, r1, #3
		if ((data & (1<<i))!=0)  // if the bit is high
 8001ab0:	4233      	tst	r3, r6
 8001ab2:	d016      	beq.n	8001ae2 <DS18B20_Write+0x52>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001ab4:	f7ff fef0 	bl	8001898 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	2200      	movs	r2, #0
 8001abc:	00c9      	lsls	r1, r1, #3
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <DS18B20_Write+0x74>)
 8001ac0:	f001 fbd8 	bl	8003274 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8001ac4:	0030      	movs	r0, r6
 8001ac6:	f7ff ffaf 	bl	8001a28 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <DS18B20_Write+0x74>)
 8001ace:	00c9      	lsls	r1, r1, #3
 8001ad0:	f7ff fef4 	bl	80018bc <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8001ad4:	2032      	movs	r0, #50	; 0x32
 8001ad6:	f7ff ffa7 	bl	8001a28 <delay>
	for (int i=0; i<8; i++)
 8001ada:	3401      	adds	r4, #1
 8001adc:	2c08      	cmp	r4, #8
 8001ade:	d1e0      	bne.n	8001aa2 <DS18B20_Write+0x12>
			delay (50);  // wait for 60 us

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
		}
	}
}
 8001ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001ae2:	f7ff fed9 	bl	8001898 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	003a      	movs	r2, r7
 8001aea:	00c9      	lsls	r1, r1, #3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <DS18B20_Write+0x74>)
 8001aee:	f001 fbc1 	bl	8003274 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f7ff ff98 	bl	8001a28 <delay>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DS18B20_Write+0x74>)
 8001afc:	00c9      	lsls	r1, r1, #3
 8001afe:	f7ff fedd 	bl	80018bc <Set_Pin_Input>
 8001b02:	e7ea      	b.n	8001ada <DS18B20_Write+0x4a>
 8001b04:	50000400 	.word	0x50000400

08001b08 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
	uint8_t value=0;
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001b08:	2180      	movs	r1, #128	; 0x80
{
 8001b0a:	b570      	push	{r4, r5, r6, lr}

	for (int i=0;i<8;i++)
 8001b0c:	2400      	movs	r4, #0
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001b0e:	2580      	movs	r5, #128	; 0x80
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001b10:	4813      	ldr	r0, [pc, #76]	; (8001b60 <DS18B20_Read+0x58>)
 8001b12:	00c9      	lsls	r1, r1, #3
 8001b14:	f7ff fed2 	bl	80018bc <Set_Pin_Input>
	uint8_t value=0;
 8001b18:	0026      	movs	r6, r4
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001b1a:	00ed      	lsls	r5, r5, #3
 8001b1c:	0029      	movs	r1, r5
 8001b1e:	4810      	ldr	r0, [pc, #64]	; (8001b60 <DS18B20_Read+0x58>)
 8001b20:	f7ff feba 	bl	8001898 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8001b24:	2200      	movs	r2, #0
 8001b26:	0029      	movs	r1, r5
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <DS18B20_Read+0x58>)
 8001b2a:	f001 fba3 	bl	8003274 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f7ff ff7a 	bl	8001a28 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001b34:	0029      	movs	r1, r5
 8001b36:	480a      	ldr	r0, [pc, #40]	; (8001b60 <DS18B20_Read+0x58>)
 8001b38:	f7ff fec0 	bl	80018bc <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001b3c:	0029      	movs	r1, r5
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <DS18B20_Read+0x58>)
 8001b40:	f001 fb92 	bl	8003268 <HAL_GPIO_ReadPin>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d003      	beq.n	8001b50 <DS18B20_Read+0x48>
		{
			value |= 1<<i;  // read = 1
 8001b48:	2001      	movs	r0, #1
 8001b4a:	40a0      	lsls	r0, r4
 8001b4c:	4306      	orrs	r6, r0
 8001b4e:	b2f6      	uxtb	r6, r6
		}
		delay (60);  // wait for 60 us
 8001b50:	203c      	movs	r0, #60	; 0x3c
	for (int i=0;i<8;i++)
 8001b52:	3401      	adds	r4, #1
		delay (60);  // wait for 60 us
 8001b54:	f7ff ff68 	bl	8001a28 <delay>
	for (int i=0;i<8;i++)
 8001b58:	2c08      	cmp	r4, #8
 8001b5a:	d1df      	bne.n	8001b1c <DS18B20_Read+0x14>
	}
	return value;
}
 8001b5c:	0030      	movs	r0, r6
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	50000400 	.word	0x50000400

08001b64 <main>:
{
 8001b64:	b510      	push	{r4, lr}
  HAL_Init();
 8001b66:	f000 febb 	bl	80028e0 <HAL_Init>
  SystemClock_Config();
 8001b6a:	f7ff febb 	bl	80018e4 <SystemClock_Config>
  MX_GPIO_Init();
 8001b6e:	f7ff fd73 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b72:	f7ff fd55 	bl	8001620 <MX_DMA_Init>
  MX_RTC_Init();
 8001b76:	f000 f86b 	bl	8001c50 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b7a:	f000 f92b 	bl	8001dd4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b7e:	f000 fd99 	bl	80026b4 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8001b82:	f7ff fced 	bl	8001560 <MX_ADC_Init>
  MX_TIM2_Init();
 8001b86:	f000 fbdf 	bl	8002348 <MX_TIM2_Init>
  MX_TIM21_Init();
 8001b8a:	f000 fc3b 	bl	8002404 <MX_TIM21_Init>
  MX_TIM6_Init();
 8001b8e:	f000 fc13 	bl	80023b8 <MX_TIM6_Init>
  HAL_TIM_Base_Start(&htim6);
 8001b92:	4825      	ldr	r0, [pc, #148]	; (8001c28 <main+0xc4>)
 8001b94:	f002 fc7b 	bl	800448e <HAL_TIM_Base_Start>
  mcuConfig();
 8001b98:	f7ff feee 	bl	8001978 <mcuConfig>
  printf("Comece a cronometrar 10seg");
 8001b9c:	4823      	ldr	r0, [pc, #140]	; (8001c2c <main+0xc8>)
 8001b9e:	f003 fbc7 	bl	8005330 <iprintf>
  delay(10000);
 8001ba2:	4823      	ldr	r0, [pc, #140]	; (8001c30 <main+0xcc>)
 8001ba4:	f7ff ff40 	bl	8001a28 <delay>
  printf("Fim dos 10 segundos");
 8001ba8:	4822      	ldr	r0, [pc, #136]	; (8001c34 <main+0xd0>)
 8001baa:	f003 fbc1 	bl	8005330 <iprintf>
	  DS18B20_Start();
 8001bae:	f7ff ff45 	bl	8001a3c <DS18B20_Start>
	  HAL_Delay (1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f000 feb6 	bl	8002924 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001bb8:	20cc      	movs	r0, #204	; 0xcc
 8001bba:	f7ff ff69 	bl	8001a90 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8001bbe:	2044      	movs	r0, #68	; 0x44
 8001bc0:	f7ff ff66 	bl	8001a90 <DS18B20_Write>
	  HAL_Delay (800);
 8001bc4:	20c8      	movs	r0, #200	; 0xc8
 8001bc6:	0080      	lsls	r0, r0, #2
 8001bc8:	f000 feac 	bl	8002924 <HAL_Delay>
	  DS18B20_Start();
 8001bcc:	f7ff ff36 	bl	8001a3c <DS18B20_Start>
	  HAL_Delay(1);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f000 fea7 	bl	8002924 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001bd6:	20cc      	movs	r0, #204	; 0xcc
 8001bd8:	f7ff ff5a 	bl	8001a90 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8001bdc:	20be      	movs	r0, #190	; 0xbe
 8001bde:	f7ff ff57 	bl	8001a90 <DS18B20_Write>
	  temp_byte1 = DS18B20_Read();
 8001be2:	f7ff ff91 	bl	8001b08 <DS18B20_Read>
 8001be6:	4c14      	ldr	r4, [pc, #80]	; (8001c38 <main+0xd4>)
 8001be8:	7020      	strb	r0, [r4, #0]
	  temp_byte2 = DS18B20_Read();
 8001bea:	f7ff ff8d 	bl	8001b08 <DS18B20_Read>
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <main+0xd8>)
 8001bf0:	7018      	strb	r0, [r3, #0]
	  TEMP = (temp_byte2<<8)|temp_byte1;
 8001bf2:	7823      	ldrb	r3, [r4, #0]
 8001bf4:	0200      	lsls	r0, r0, #8
 8001bf6:	4318      	orrs	r0, r3
 8001bf8:	f7ff fc28 	bl	800144c <__aeabi_i2f>
	  TEMP = TEMP/16.0;
 8001bfc:	21f6      	movs	r1, #246	; 0xf6
 8001bfe:	0589      	lsls	r1, r1, #22
 8001c00:	f7ff faea 	bl	80011d8 <__aeabi_fmul>
	  TEMP = TEMP * 10;
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <main+0xdc>)
 8001c06:	f7ff fae7 	bl	80011d8 <__aeabi_fmul>
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <main+0xe0>)
 8001c0c:	6018      	str	r0, [r3, #0]
	  Temperature = (int)TEMP;
 8001c0e:	f7ff fbfd 	bl	800140c <__aeabi_f2iz>
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <main+0xe4>)
	  printf("%d x 10^-1", Temperature);
 8001c14:	b281      	uxth	r1, r0
	  Temperature = (int)TEMP;
 8001c16:	8018      	strh	r0, [r3, #0]
	  printf("%d x 10^-1", Temperature);
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <main+0xe8>)
 8001c1a:	f003 fb89 	bl	8005330 <iprintf>
	  printf("\n");
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f003 fba0 	bl	8005364 <putchar>
  while (1)
 8001c24:	e7c3      	b.n	8001bae <main+0x4a>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000508 	.word	0x20000508
 8001c2c:	080067c8 	.word	0x080067c8
 8001c30:	00002710 	.word	0x00002710
 8001c34:	080067e3 	.word	0x080067e3
 8001c38:	200003f8 	.word	0x200003f8
 8001c3c:	200003f0 	.word	0x200003f0
 8001c40:	41200000 	.word	0x41200000
 8001c44:	200003f4 	.word	0x200003f4
 8001c48:	200003f2 	.word	0x200003f2
 8001c4c:	080067f7 	.word	0x080067f7

08001c50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c50:	b530      	push	{r4, r5, lr}
 8001c52:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8001c54:	2214      	movs	r2, #20
 8001c56:	2100      	movs	r1, #0
 8001c58:	a801      	add	r0, sp, #4
 8001c5a:	f003 fb60 	bl	800531e <memset>
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c5e:	4c1d      	ldr	r4, [pc, #116]	; (8001cd4 <MX_RTC_Init+0x84>)
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_RTC_Init+0x88>)
  RTC_DateTypeDef sDate = {0};
 8001c62:	2500      	movs	r5, #0
  hrtc.Instance = RTC;
 8001c64:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8001c66:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c68:	0020      	movs	r0, r4
  hrtc.Init.AsynchPrediv = 127;
 8001c6a:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c6c:	3380      	adds	r3, #128	; 0x80
  RTC_DateTypeDef sDate = {0};
 8001c6e:	9500      	str	r5, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c70:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 8001c72:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c74:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c76:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c78:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c7a:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c7c:	f001 ffb6 	bl	8003bec <HAL_RTC_Init>
 8001c80:	42a8      	cmp	r0, r5
 8001c82:	d001      	beq.n	8001c88 <MX_RTC_Init+0x38>
  {
    Error_Handler();
 8001c84:	f7ff fece 	bl	8001a24 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c88:	466b      	mov	r3, sp
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	0020      	movs	r0, r4
  sTime.Hours = 0x0;
 8001c8e:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c90:	a901      	add	r1, sp, #4
  sTime.Seconds = 0x0;
 8001c92:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c94:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c96:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c98:	f002 f810 	bl	8003cbc <HAL_RTC_SetTime>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001ca0:	f7ff fec0 	bl	8001a24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <MX_RTC_Init+0x8c>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4669      	mov	r1, sp
 8001caa:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cac:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cae:	f002 f88b 	bl	8003dc8 <HAL_RTC_SetDate>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d001      	beq.n	8001cba <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001cb6:	f7ff feb5 	bl	8001a24 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 1000, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001cba:	21fa      	movs	r1, #250	; 0xfa
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	0089      	lsls	r1, r1, #2
 8001cc2:	f002 f8ed 	bl	8003ea0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	d001      	beq.n	8001cce <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001cca:	f7ff feab 	bl	8001a24 <Error_Handler>
  }

}
 8001cce:	b007      	add	sp, #28
 8001cd0:	bd30      	pop	{r4, r5, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	200003fc 	.word	0x200003fc
 8001cd8:	40002800 	.word	0x40002800
 8001cdc:	00010101 	.word	0x00010101

08001ce0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RTC_MspInit+0x28>)
 8001ce2:	6802      	ldr	r2, [r0, #0]
{
 8001ce4:	b510      	push	{r4, lr}
  if(rtcHandle->Instance==RTC)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d10d      	bne.n	8001d06 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_RTC_MspInit+0x2c>)
 8001cee:	02db      	lsls	r3, r3, #11
 8001cf0:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8001cf2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f000 ffde 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001d00:	2002      	movs	r0, #2
 8001d02:	f001 f805 	bl	8002d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d06:	bd10      	pop	{r4, pc}
 8001d08:	40002800 	.word	0x40002800
 8001d0c:	40021000 	.word	0x40021000

08001d10 <Configure_RTC_Clock>:
}

/* USER CODE BEGIN 1 */

void Configure_RTC_Clock(void)
{
 8001d10:	b530      	push	{r4, r5, lr}
 8001d12:	b097      	sub	sp, #92	; 0x5c
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

#ifndef USE_STM32L0XX_NUCLEO
  __HAL_RCC_PWR_CLK_ENABLE();
#endif
  HAL_PWR_EnableBkUpAccess();
 8001d14:	f001 fac0 	bl	8003298 <HAL_PWR_EnableBkUpAccess>

  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d18:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001d1a:	230c      	movs	r3, #12
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d1c:	2501      	movs	r5, #1
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d1e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001d20:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d22:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d24:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001d26:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d28:	f001 fb00 	bl	800332c <HAL_RCC_OscConfig>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d30:	2380      	movs	r3, #128	; 0x80
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d32:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	9301      	str	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d38:	f001 fe50 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>

  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <Configure_RTC_Clock+0x4c>)
 8001d40:	02db      	lsls	r3, r3, #11
 8001d42:	6d11      	ldr	r1, [r2, #80]	; 0x50

  HAL_NVIC_SetPriority(RTC_IRQn, 0x01, 0);
 8001d44:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 8001d46:	430b      	orrs	r3, r1
 8001d48:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_IRQn, 0x01, 0);
 8001d4a:	0029      	movs	r1, r5
 8001d4c:	0022      	movs	r2, r4
 8001d4e:	f000 ffb5 	bl	8002cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f000 ffdc 	bl	8002d10 <HAL_NVIC_EnableIRQ>
}
 8001d58:	b017      	add	sp, #92	; 0x5c
 8001d5a:	bd30      	pop	{r4, r5, pc}
 8001d5c:	40021000 	.word	0x40021000

08001d60 <setRtcInUseFlag>:

/*Set flags*/
void setRtcInUseFlag(uint8_t rtcInUse) {
	rtc_in_use = rtcInUse;
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <setRtcInUseFlag+0x8>)
 8001d62:	7018      	strb	r0, [r3, #0]
}
 8001d64:	4770      	bx	lr
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	20000260 	.word	0x20000260

08001d6c <setRtcIrqFlag>:

void setRtcIrqFlag(uint8_t rtcIrq) {
	rtc_irq = rtcIrq;
 8001d6c:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <setRtcIrqFlag+0x8>)
 8001d6e:	7018      	strb	r0, [r3, #0]
}
 8001d70:	4770      	bx	lr
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000262 	.word	0x20000262

08001d78 <setRtcInUseForCsFlag>:

void setRtcInUseForCsFlag(uint8_t rtcInUseForCs) {
	rtc_in_use_for_cs = rtcInUseForCs;
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <setRtcInUseForCsFlag+0x8>)
 8001d7a:	7018      	strb	r0, [r3, #0]
}
 8001d7c:	4770      	bx	lr
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000261 	.word	0x20000261

08001d84 <setNextRtcWakeUpFlag>:

void setNextRtcWakeUpFlag(uint32_t nextRtcWakeUp) {
	next_rtc_wakeup = nextRtcWakeUp;
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <setNextRtcWakeUpFlag+0x8>)
 8001d86:	6018      	str	r0, [r3, #0]
}
 8001d88:	4770      	bx	lr
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	2000025c 	.word	0x2000025c

08001d90 <setRtcPrescFlag>:

void setRtcPrescFlag(uint16_t rtcPresc) {
	rtc_presc = rtcPresc;
 8001d90:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <setRtcPrescFlag+0x8>)
 8001d92:	8018      	strh	r0, [r3, #0]
}
 8001d94:	4770      	bx	lr
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	20000080 	.word	0x20000080

08001d9c <getNextRtcWakeUpFlag>:

/*Get flags*/ 
uint32_t getNextRtcWakeUpFlag(void) {
	return next_rtc_wakeup;
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <getNextRtcWakeUpFlag+0x8>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
}
 8001da0:	4770      	bx	lr
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	2000025c 	.word	0x2000025c

08001da8 <getRtcInUseForCsFlag>:

uint8_t getRtcInUseForCsFlag(void) {
	return rtc_in_use_for_cs;
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <getRtcInUseForCsFlag+0x8>)
 8001daa:	7818      	ldrb	r0, [r3, #0]
 8001dac:	b2c0      	uxtb	r0, r0
}
 8001dae:	4770      	bx	lr
 8001db0:	20000261 	.word	0x20000261

08001db4 <getRtcIrqFlag>:

uint8_t getRtcIrqFlag(void) {
	return rtc_irq;
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <getRtcIrqFlag+0x8>)
 8001db6:	7818      	ldrb	r0, [r3, #0]
 8001db8:	b2c0      	uxtb	r0, r0
}
 8001dba:	4770      	bx	lr
 8001dbc:	20000262 	.word	0x20000262

08001dc0 <getRtcPrescFlag>:
uint8_t getRtcInUseFlag(void) {
	return rtc_in_use;
}

uint16_t getRtcPrescFlag(void) {
	return rtc_presc;
 8001dc0:	4b01      	ldr	r3, [pc, #4]	; (8001dc8 <getRtcPrescFlag+0x8>)
 8001dc2:	8818      	ldrh	r0, [r3, #0]
 8001dc4:	b280      	uxth	r0, r0
}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000080 	.word	0x20000080

08001dcc <getRtcHandler>:

RTC_HandleTypeDef * getRtcHandler(void) {
	return &hrtc;
}
 8001dcc:	4800      	ldr	r0, [pc, #0]	; (8001dd0 <getRtcHandler+0x4>)
 8001dce:	4770      	bx	lr
 8001dd0:	200003fc 	.word	0x200003fc

08001dd4 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_SPI1_Init+0x38>)
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_SPI1_Init+0x3c>)
{
 8001dd8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001dda:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ddc:	2382      	movs	r3, #130	; 0x82
 8001dde:	005b      	lsls	r3, r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de0:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001de2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de4:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de6:	0092      	lsls	r2, r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dea:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dec:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dee:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df0:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001df8:	3307      	adds	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dfa:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001dfc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dfe:	f002 f9b5 	bl	800416c <HAL_SPI_Init>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d001      	beq.n	8001e0a <MX_SPI1_Init+0x36>
  {
    Error_Handler();
 8001e06:	f7ff fe0d 	bl	8001a24 <Error_Handler>
  }

}
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	20000420 	.word	0x20000420
 8001e10:	40013000 	.word	0x40013000

08001e14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	0005      	movs	r5, r0
 8001e18:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	2214      	movs	r2, #20
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	a803      	add	r0, sp, #12
 8001e20:	f003 fa7d 	bl	800531e <memset>
  if(spiHandle->Instance==SPI1)
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_SPI_MspInit+0xd8>)
 8001e26:	682a      	ldr	r2, [r5, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d15c      	bne.n	8001ee6 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2c:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	2701      	movs	r7, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_SPI_MspInit+0xdc>)
 8001e34:	0152      	lsls	r2, r2, #5
 8001e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
    */
    GPIO_InitStruct.Pin = S2LP_SPI_MISO_PIN_Pin|S2LP_SPI_SCLK_PIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e38:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	482c      	ldr	r0, [pc, #176]	; (8001ef4 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4322      	orrs	r2, r4
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4022      	ands	r2, r4
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	433a      	orrs	r2, r7
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	403b      	ands	r3, r7
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = S2LP_SPI_MISO_PIN_Pin|S2LP_SPI_SCLK_PIN_Pin;
 8001e60:	2318      	movs	r3, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e62:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = S2LP_SPI_MISO_PIN_Pin|S2LP_SPI_SCLK_PIN_Pin;
 8001e64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e66:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e68:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f001 f945 	bl	80030f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S2LP_SPI_MOSI_PIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(S2LP_SPI_MOSI_PIN_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = S2LP_SPI_MOSI_PIN_Pin;
 8001e70:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(S2LP_SPI_MOSI_PIN_GPIO_Port, &GPIO_InitStruct);
 8001e72:	05c0      	lsls	r0, r0, #23
 8001e74:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = S2LP_SPI_MOSI_PIN_Pin;
 8001e76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e7e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(S2LP_SPI_MOSI_PIN_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f001 f93a 	bl	80030f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001e84:	4c1c      	ldr	r4, [pc, #112]	; (8001ef8 <HAL_SPI_MspInit+0xe4>)
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_SPI_MspInit+0xe8>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e88:	0020      	movs	r0, r4
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001e8a:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e90:	3370      	adds	r3, #112	; 0x70
 8001e92:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	019b      	lsls	r3, r3, #6
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001e98:	6067      	str	r7, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	60e6      	str	r6, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e9c:	6166      	str	r6, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9e:	61a6      	str	r6, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ea0:	61e6      	str	r6, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ea2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ea4:	f000 ff62 	bl	8002d6c <HAL_DMA_Init>
 8001ea8:	42b0      	cmp	r0, r6
 8001eaa:	d001      	beq.n	8001eb0 <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 8001eac:	f7ff fdba 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_SPI_MspInit+0xec>)
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001eb2:	64ac      	str	r4, [r5, #72]	; 0x48
 8001eb4:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001eb6:	4c13      	ldr	r4, [pc, #76]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb8:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001eba:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec4:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec6:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec8:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001eca:	61e3      	str	r3, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ecc:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ece:	0020      	movs	r0, r4
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed0:	019b      	lsls	r3, r3, #6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	6122      	str	r2, [r4, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ed6:	f000 ff49 	bl	8002d6c <HAL_DMA_Init>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001ede:	f7ff fda1 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001ee2:	64ec      	str	r4, [r5, #76]	; 0x4c
 8001ee4:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ee6:	b009      	add	sp, #36	; 0x24
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	40013000 	.word	0x40013000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	50000400 	.word	0x50000400
 8001ef8:	200004c0 	.word	0x200004c0
 8001efc:	40020030 	.word	0x40020030
 8001f00:	4002001c 	.word	0x4002001c
 8001f04:	20000478 	.word	0x20000478

08001f08 <S2LPSpiWriteRegisters>:

  return status;
}

uint16_t S2LPSpiWriteRegisters(uint8_t address, uint8_t n_bytes, uint8_t* buffer)
{
 8001f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f0a:	000c      	movs	r4, r1
  tx_buff[0]=WRITE_HEADER;
  tx_buff[1]=address;

  uint16_t status = 0;
 8001f0c:	4669      	mov	r1, sp
  tx_buff[0]=WRITE_HEADER;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4f2f      	ldr	r7, [pc, #188]	; (8001fd0 <S2LPSpiWriteRegisters+0xc8>)
  uint16_t status = 0;
 8001f12:	80cb      	strh	r3, [r1, #6]
  tx_buff[0]=WRITE_HEADER;
 8001f14:	703b      	strb	r3, [r7, #0]
  tx_buff[1]=address;
 8001f16:	7078      	strb	r0, [r7, #1]

  for(uint32_t i=0;i<n_bytes;i++)
 8001f18:	0018      	movs	r0, r3
  {
    tx_buff[i+2]=buffer[i];
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <S2LPSpiWriteRegisters+0xcc>)
  uint16_t status = 0;
 8001f1c:	1d8d      	adds	r5, r1, #6
  for(uint32_t i=0;i<n_bytes;i++)
 8001f1e:	4284      	cmp	r4, r0
 8001f20:	d849      	bhi.n	8001fb6 <S2LPSpiWriteRegisters+0xae>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f22:	b672      	cpsid	i
  }

  SPI_ENTER_CRITICAL();

  /* Puts the SPI chip select low to start the transaction */
  SdkEvalSPICSLow();
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	20a0      	movs	r0, #160	; 0xa0
 8001f28:	2200      	movs	r2, #0
 8001f2a:	0209      	lsls	r1, r1, #8
 8001f2c:	05c0      	lsls	r0, r0, #23
 8001f2e:	f001 f9a1 	bl	8003274 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buff, rx_buff, 2+n_bytes);
 8001f32:	1ca3      	adds	r3, r4, #2
 8001f34:	4e28      	ldr	r6, [pc, #160]	; (8001fd8 <S2LPSpiWriteRegisters+0xd0>)
 8001f36:	4c29      	ldr	r4, [pc, #164]	; (8001fdc <S2LPSpiWriteRegisters+0xd4>)
 8001f38:	0032      	movs	r2, r6
 8001f3a:	0039      	movs	r1, r7
 8001f3c:	0020      	movs	r0, r4
 8001f3e:	f002 f955 	bl	80041ec <HAL_SPI_TransmitReceive_DMA>
	WAIT_FOR_SPI_TC();
 8001f42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <S2LPSpiWriteRegisters+0xd8>)
 8001f48:	18d1      	adds	r1, r2, r3
 8001f4a:	424b      	negs	r3, r1
 8001f4c:	4159      	adcs	r1, r3
 8001f4e:	4249      	negs	r1, r1
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <S2LPSpiWriteRegisters+0xdc>)
 8001f52:	4f25      	ldr	r7, [pc, #148]	; (8001fe8 <S2LPSpiWriteRegisters+0xe0>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	2302      	movs	r3, #2
 8001f58:	42ba      	cmp	r2, r7
 8001f5a:	d011      	beq.n	8001f80 <S2LPSpiWriteRegisters+0x78>
 8001f5c:	4f23      	ldr	r7, [pc, #140]	; (8001fec <S2LPSpiWriteRegisters+0xe4>)
 8001f5e:	331e      	adds	r3, #30
 8001f60:	42ba      	cmp	r2, r7
 8001f62:	d00d      	beq.n	8001f80 <S2LPSpiWriteRegisters+0x78>
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <S2LPSpiWriteRegisters+0xe8>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d029      	beq.n	8001fbe <S2LPSpiWriteRegisters+0xb6>
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <S2LPSpiWriteRegisters+0xec>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d029      	beq.n	8001fc4 <S2LPSpiWriteRegisters+0xbc>
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <S2LPSpiWriteRegisters+0xf0>)
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d029      	beq.n	8001fca <S2LPSpiWriteRegisters+0xc2>
 8001f76:	2780      	movs	r7, #128	; 0x80
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <S2LPSpiWriteRegisters+0xf4>)
 8001f7a:	04bf      	lsls	r7, r7, #18
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	19db      	adds	r3, r3, r7
 8001f80:	4203      	tst	r3, r0
 8001f82:	d0e5      	beq.n	8001f50 <S2LPSpiWriteRegisters+0x48>
 8001f84:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001f86:	f000 ff75 	bl	8002e74 <HAL_DMA_IRQHandler>
 8001f8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001f8c:	f000 ff72 	bl	8002e74 <HAL_DMA_IRQHandler>
 8001f90:	0020      	movs	r0, r4
 8001f92:	f002 fa2f 	bl	80043f4 <HAL_SPI_GetState>
 8001f96:	0002      	movs	r2, r0
 8001f98:	2801      	cmp	r0, #1
 8001f9a:	d1f3      	bne.n	8001f84 <S2LPSpiWriteRegisters+0x7c>
	
  /* Puts the SPI chip select high to end the transaction */
  SdkEvalSPICSHigh();
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	20a0      	movs	r0, #160	; 0xa0
 8001fa0:	0209      	lsls	r1, r1, #8
 8001fa2:	05c0      	lsls	r0, r0, #23
 8001fa4:	f001 f966 	bl	8003274 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa8:	b662      	cpsie	i

  SPI_EXIT_CRITICAL();

  ((uint8_t*)&status)[1]=rx_buff[0];
 8001faa:	7833      	ldrb	r3, [r6, #0]
 8001fac:	706b      	strb	r3, [r5, #1]
  ((uint8_t*)&status)[0]=rx_buff[1];
 8001fae:	7873      	ldrb	r3, [r6, #1]
 8001fb0:	702b      	strb	r3, [r5, #0]
	
  return status;
 8001fb2:	8828      	ldrh	r0, [r5, #0]

}
 8001fb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    tx_buff[i+2]=buffer[i];
 8001fb6:	5c11      	ldrb	r1, [r2, r0]
 8001fb8:	5419      	strb	r1, [r3, r0]
  for(uint32_t i=0;i<n_bytes;i++)
 8001fba:	3001      	adds	r0, #1
 8001fbc:	e7af      	b.n	8001f1e <S2LPSpiWriteRegisters+0x16>
	WAIT_FOR_SPI_TC();
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	e7dd      	b.n	8001f80 <S2LPSpiWriteRegisters+0x78>
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	019b      	lsls	r3, r3, #6
 8001fc8:	e7da      	b.n	8001f80 <S2LPSpiWriteRegisters+0x78>
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	e7d7      	b.n	8001f80 <S2LPSpiWriteRegisters+0x78>
 8001fd0:	200002e4 	.word	0x200002e4
 8001fd4:	200002e6 	.word	0x200002e6
 8001fd8:	20000263 	.word	0x20000263
 8001fdc:	20000420 	.word	0x20000420
 8001fe0:	bffdff94 	.word	0xbffdff94
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020008 	.word	0x40020008
 8001fec:	4002001c 	.word	0x4002001c
 8001ff0:	40020030 	.word	0x40020030
 8001ff4:	40020044 	.word	0x40020044
 8001ff8:	40020058 	.word	0x40020058
 8001ffc:	fe200000 	.word	0xfe200000

08002000 <SdkEvalSpiRawTC>:
  ((uint8_t*)&status)[0]=rx_buff[1];

  return status;
}

__weak void SdkEvalSpiRawTC(void){}
 8002000:	4770      	bx	lr
	...

08002004 <S2LPSpiRaw>:

void S2LPSpiRaw(uint8_t n_bytes, uint8_t* in_buffer, uint8_t* out_buffer, uint8_t can_return_bef_tx)
{
 8002004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002006:	0016      	movs	r6, r2
 8002008:	001d      	movs	r5, r3
 800200a:	9000      	str	r0, [sp, #0]
 800200c:	9101      	str	r1, [sp, #4]
  uint8_t* out_buffer_=out_buffer;

  if(out_buffer==NULL)
 800200e:	2a00      	cmp	r2, #0
 8002010:	d100      	bne.n	8002014 <S2LPSpiRaw+0x10>
      out_buffer_=rx_buff;
 8002012:	4e39      	ldr	r6, [pc, #228]	; (80020f8 <S2LPSpiRaw+0xf4>)

  spi_in_use = 1;
 8002014:	2401      	movs	r4, #1
 8002016:	4f39      	ldr	r7, [pc, #228]	; (80020fc <S2LPSpiRaw+0xf8>)
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <S2LPSpiRaw+0xfc>)
 800201a:	703c      	strb	r4, [r7, #0]

  if(can_return_bef_tx)
 800201c:	2d00      	cmp	r5, #0
 800201e:	d058      	beq.n	80020d2 <S2LPSpiRaw+0xce>
  {
    waiting_irq=1;
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 1);
 8002020:	0022      	movs	r2, r4
 8002022:	0021      	movs	r1, r4
 8002024:	200a      	movs	r0, #10
    waiting_irq=1;
 8002026:	701c      	strb	r4, [r3, #0]
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 1);
 8002028:	f000 fe48 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800202c:	200a      	movs	r0, #10
 800202e:	f000 fe6f 	bl	8002d10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8002032:	200a      	movs	r0, #10
 8002034:	2200      	movs	r2, #0
 8002036:	0021      	movs	r1, r4
 8002038:	f000 fe40 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 fe67 	bl	8002d10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
    SPI_ENTER_CRITICAL();
  }

  SdkEvalSPICSLow();
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	20a0      	movs	r0, #160	; 0xa0
 8002046:	2200      	movs	r2, #0
 8002048:	0209      	lsls	r1, r1, #8
 800204a:	05c0      	lsls	r0, r0, #23
 800204c:	f001 f912 	bl	8003274 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive_DMA(&hspi1, in_buffer, out_buffer_, n_bytes);
 8002050:	466b      	mov	r3, sp
 8002052:	4c2c      	ldr	r4, [pc, #176]	; (8002104 <S2LPSpiRaw+0x100>)
 8002054:	0032      	movs	r2, r6
 8002056:	0020      	movs	r0, r4
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	9901      	ldr	r1, [sp, #4]
 800205c:	f002 f8c6 	bl	80041ec <HAL_SPI_TransmitReceive_DMA>

  if(!can_return_bef_tx)
 8002060:	2d00      	cmp	r5, #0
 8002062:	d133      	bne.n	80020cc <S2LPSpiRaw+0xc8>
  {
    WAIT_FOR_SPI_TC();
 8002064:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <S2LPSpiRaw+0x104>)
 800206a:	18d1      	adds	r1, r2, r3
 800206c:	424b      	negs	r3, r1
 800206e:	4159      	adcs	r1, r3
 8002070:	4249      	negs	r1, r1
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <S2LPSpiRaw+0x108>)
 8002074:	4d26      	ldr	r5, [pc, #152]	; (8002110 <S2LPSpiRaw+0x10c>)
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	2302      	movs	r3, #2
 800207a:	42aa      	cmp	r2, r5
 800207c:	d011      	beq.n	80020a2 <S2LPSpiRaw+0x9e>
 800207e:	4d25      	ldr	r5, [pc, #148]	; (8002114 <S2LPSpiRaw+0x110>)
 8002080:	331e      	adds	r3, #30
 8002082:	42aa      	cmp	r2, r5
 8002084:	d00d      	beq.n	80020a2 <S2LPSpiRaw+0x9e>
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <S2LPSpiRaw+0x114>)
 8002088:	429a      	cmp	r2, r3
 800208a:	d02b      	beq.n	80020e4 <S2LPSpiRaw+0xe0>
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <S2LPSpiRaw+0x118>)
 800208e:	429a      	cmp	r2, r3
 8002090:	d02b      	beq.n	80020ea <S2LPSpiRaw+0xe6>
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <S2LPSpiRaw+0x11c>)
 8002094:	429a      	cmp	r2, r3
 8002096:	d02b      	beq.n	80020f0 <S2LPSpiRaw+0xec>
 8002098:	2580      	movs	r5, #128	; 0x80
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <S2LPSpiRaw+0x120>)
 800209c:	04ad      	lsls	r5, r5, #18
 800209e:	400b      	ands	r3, r1
 80020a0:	195b      	adds	r3, r3, r5
 80020a2:	4203      	tst	r3, r0
 80020a4:	d0e5      	beq.n	8002072 <S2LPSpiRaw+0x6e>
 80020a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80020a8:	f000 fee4 	bl	8002e74 <HAL_DMA_IRQHandler>
 80020ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80020ae:	f000 fee1 	bl	8002e74 <HAL_DMA_IRQHandler>
 80020b2:	0020      	movs	r0, r4
 80020b4:	f002 f99e 	bl	80043f4 <HAL_SPI_GetState>
 80020b8:	0002      	movs	r2, r0
 80020ba:	2801      	cmp	r0, #1
 80020bc:	d1f3      	bne.n	80020a6 <S2LPSpiRaw+0xa2>

    SdkEvalSPICSHigh();
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	20a0      	movs	r0, #160	; 0xa0
 80020c2:	0209      	lsls	r1, r1, #8
 80020c4:	05c0      	lsls	r0, r0, #23
 80020c6:	f001 f8d5 	bl	8003274 <HAL_GPIO_WritePin>
 80020ca:	b662      	cpsie	i
    SPI_EXIT_CRITICAL();
  }

  spi_in_use = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	703b      	strb	r3, [r7, #0]
}
 80020d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 80020d2:	200a      	movs	r0, #10
    waiting_irq=0;
 80020d4:	701d      	strb	r5, [r3, #0]
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 80020d6:	f000 fe25 	bl	8002d24 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 80020da:	200a      	movs	r0, #10
 80020dc:	f000 fe22 	bl	8002d24 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	e7ae      	b.n	8002042 <S2LPSpiRaw+0x3e>
    WAIT_FOR_SPI_TC();
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	e7db      	b.n	80020a2 <S2LPSpiRaw+0x9e>
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	e7d8      	b.n	80020a2 <S2LPSpiRaw+0x9e>
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	e7d5      	b.n	80020a2 <S2LPSpiRaw+0x9e>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000263 	.word	0x20000263
 80020fc:	200002e3 	.word	0x200002e3
 8002100:	20000364 	.word	0x20000364
 8002104:	20000420 	.word	0x20000420
 8002108:	bffdff94 	.word	0xbffdff94
 800210c:	40020000 	.word	0x40020000
 8002110:	40020008 	.word	0x40020008
 8002114:	4002001c 	.word	0x4002001c
 8002118:	40020030 	.word	0x40020030
 800211c:	40020044 	.word	0x40020044
 8002120:	40020058 	.word	0x40020058
 8002124:	fe200000 	.word	0xfe200000

08002128 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002128:	b510      	push	{r4, lr}
  if(waiting_irq)
 800212a:	4c08      	ldr	r4, [pc, #32]	; (800214c <HAL_SPI_TxRxCpltCallback+0x24>)
 800212c:	7823      	ldrb	r3, [r4, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_SPI_TxRxCpltCallback+0x20>
  {
    SdkEvalSPICSHigh();
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	20a0      	movs	r0, #160	; 0xa0
 8002136:	2201      	movs	r2, #1
 8002138:	0209      	lsls	r1, r1, #8
 800213a:	05c0      	lsls	r0, r0, #23
 800213c:	f001 f89a 	bl	8003274 <HAL_GPIO_WritePin>
    waiting_irq=0;
 8002140:	2300      	movs	r3, #0
 8002142:	7023      	strb	r3, [r4, #0]
    SdkEvalSpiRawTC();
 8002144:	f7ff ff5c 	bl	8002000 <SdkEvalSpiRawTC>
  }
}
 8002148:	bd10      	pop	{r4, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000364 	.word	0x20000364

08002150 <ST_MCU_API_SpiRaw>:

void ST_MCU_API_SpiRaw(uint8_t n_bytes, uint8_t* in_buffer, uint8_t* out_buffer, uint8_t can_return_bef_tx)
{
 8002150:	b510      	push	{r4, lr}
  /* in this implementation we are not interested in the value of the can_return_bef_tx flag.
  We always pass 0 to the S2LPSpiRaw so that the CPU will wait the DMA for the end of transfer. */
  S2LPSpiRaw(n_bytes,in_buffer,out_buffer,0);
 8002152:	2300      	movs	r3, #0
 8002154:	f7ff ff56 	bl	8002004 <S2LPSpiRaw>
}
 8002158:	bd10      	pop	{r4, pc}
	...

0800215c <S2LPGetSpiInUse>:
  spi_in_use = state;
}

uint8_t S2LPGetSpiInUse(void)
{
  return spi_in_use;
 800215c:	4b01      	ldr	r3, [pc, #4]	; (8002164 <S2LPGetSpiInUse+0x8>)
 800215e:	7818      	ldrb	r0, [r3, #0]
 8002160:	b2c0      	uxtb	r0, r0
}
 8002162:	4770      	bx	lr
 8002164:	200002e3 	.word	0x200002e3

08002168 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002168:	2201      	movs	r2, #1
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_MspInit+0x18>)
 800216c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216e:	430a      	orrs	r2, r1
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002176:	0552      	lsls	r2, r2, #21
 8002178:	430a      	orrs	r2, r1
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217c:	4770      	bx	lr
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000

08002184 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002184:	4770      	bx	lr

08002186 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <HardFault_Handler>

08002188 <SVC_Handler>:
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:
 800218a:	4770      	bx	lr

0800218c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218e:	f000 fbbb 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002192:	bd10      	pop	{r4, pc}

08002194 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002194:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

	//printUart("*** RTC_IRQHandler IN\r");
	Configure_RTC_Clock();
 8002196:	f7ff fdbb 	bl	8001d10 <Configure_RTC_Clock>
	
  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800219a:	4c19      	ldr	r4, [pc, #100]	; (8002200 <RTC_IRQHandler+0x6c>)
 800219c:	0020      	movs	r0, r4
 800219e:	f001 ff3f 	bl	8004020 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80021a2:	0020      	movs	r0, r4
 80021a4:	f001 fefa 	bl	8003f9c <HAL_RTCEx_DeactivateWakeUpTimer>

  if(!getNextRtcWakeUpFlag())
 80021a8:	f7ff fdf8 	bl	8001d9c <getNextRtcWakeUpFlag>
 80021ac:	1e04      	subs	r4, r0, #0
 80021ae:	d117      	bne.n	80021e0 <RTC_IRQHandler+0x4c>
  {
    setRtcIrqFlag(1);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff fddb 	bl	8001d6c <setRtcIrqFlag>
		
		setRtcInUseFlag(0);
 80021b6:	0020      	movs	r0, r4
 80021b8:	f7ff fdd2 	bl	8001d60 <setRtcInUseFlag>
		
    if(getNotifyEndFlag())
 80021bc:	f000 fa6e 	bl	800269c <getNotifyEndFlag>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d008      	beq.n	80021d6 <RTC_IRQHandler+0x42>
    {
      if(getRtcInUseForCsFlag())
 80021c4:	f7ff fdf0 	bl	8001da8 <getRtcInUseForCsFlag>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d005      	beq.n	80021d8 <RTC_IRQHandler+0x44>
      {
				setRtcInUseForCsFlag(0);
 80021cc:	0020      	movs	r0, r4
 80021ce:	f7ff fdd3 	bl	8001d78 <setRtcInUseForCsFlag>
				ST_RF_API_Timer_Channel_Clear_CB();
 80021d2:	f002 ff9d 	bl	8005110 <ST_RF_API_Timer_Channel_Clear_CB>
		
		//n_intermediate_tim_irq++;
  }
	
  /* USER CODE END RTC_IRQn 1 */
}
 80021d6:	bd10      	pop	{r4, pc}
				ST_RF_API_Timer_CB(TIMER_STOP);
 80021d8:	2001      	movs	r0, #1
 80021da:	f002 ff93 	bl	8005104 <ST_RF_API_Timer_CB>
 80021de:	e7fa      	b.n	80021d6 <RTC_IRQHandler+0x42>
		MCU_API_timer_start(getNextRtcWakeUpFlag());
 80021e0:	f7ff fddc 	bl	8001d9c <getNextRtcWakeUpFlag>
 80021e4:	f000 fa08 	bl	80025f8 <MCU_API_timer_start>
    n_intermediate_tim_irq = getNIntermediateTimIrqFlag();
 80021e8:	f000 fa5e 	bl	80026a8 <getNIntermediateTimIrqFlag>
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <RTC_IRQHandler+0x70>)
 80021ee:	6018      	str	r0, [r3, #0]
		n_intermediate_tim_irq++;
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	3201      	adds	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
		setNIntermediateTimIrqFlag(n_intermediate_tim_irq);
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	b2c0      	uxtb	r0, r0
 80021fa:	f000 fa49 	bl	8002690 <setNIntermediateTimIrqFlag>
}
 80021fe:	e7ea      	b.n	80021d6 <RTC_IRQHandler+0x42>
 8002200:	200003fc 	.word	0x200003fc
 8002204:	20000368 	.word	0x20000368

08002208 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002208:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800220a:	2004      	movs	r0, #4
 800220c:	f001 f838 	bl	8003280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002210:	bd10      	pop	{r4, pc}

08002212 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002212:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002214:	2040      	movs	r0, #64	; 0x40
 8002216:	f001 f833 	bl	8003280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800221a:	bd10      	pop	{r4, pc}

0800221c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800221c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800221e:	4803      	ldr	r0, [pc, #12]	; (800222c <DMA1_Channel2_3_IRQHandler+0x10>)
 8002220:	f000 fe28 	bl	8002e74 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002226:	f000 fe25 	bl	8002e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800222a:	bd10      	pop	{r4, pc}
 800222c:	20000478 	.word	0x20000478
 8002230:	200004c0 	.word	0x200004c0

08002234 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002234:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002236:	4803      	ldr	r0, [pc, #12]	; (8002244 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 8002238:	f000 fe1c 	bl	8002e74 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800223e:	f000 fe19 	bl	8002e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002242:	bd10      	pop	{r4, pc}
 8002244:	200005c0 	.word	0x200005c0
 8002248:	20000608 	.word	0x20000608

0800224c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800224c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <ADC1_COMP_IRQHandler+0xc>)
 8002250:	f000 fc6c 	bl	8002b2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002254:	bd10      	pop	{r4, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	20000394 	.word	0x20000394

0800225c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800225c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800225e:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM21_IRQHandler+0xc>)
 8002260:	f002 f9e1 	bl	8004626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002264:	bd10      	pop	{r4, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	20000584 	.word	0x20000584

0800226c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	000e      	movs	r6, r1
 8002270:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	2500      	movs	r5, #0
 8002274:	42a5      	cmp	r5, r4
 8002276:	db01      	blt.n	800227c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002278:	0020      	movs	r0, r4
 800227a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800227c:	e000      	b.n	8002280 <_read+0x14>
 800227e:	bf00      	nop
 8002280:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	3501      	adds	r5, #1
 8002284:	e7f6      	b.n	8002274 <_read+0x8>

08002286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002286:	b570      	push	{r4, r5, r6, lr}
 8002288:	000e      	movs	r6, r1
 800228a:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	2500      	movs	r5, #0
 800228e:	42a5      	cmp	r5, r4
 8002290:	db01      	blt.n	8002296 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002292:	0020      	movs	r0, r4
 8002294:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002296:	5d70      	ldrb	r0, [r6, r5]
 8002298:	f000 fa90 	bl	80027bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	3501      	adds	r5, #1
 800229e:	e7f6      	b.n	800228e <_write+0x8>

080022a0 <_close>:

int _close(int file)
{
	return -1;
 80022a0:	2001      	movs	r0, #1
}
 80022a2:	4240      	negs	r0, r0
 80022a4:	4770      	bx	lr

080022a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	019b      	lsls	r3, r3, #6
	return 0;
}
 80022aa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80022ac:	604b      	str	r3, [r1, #4]
}
 80022ae:	4770      	bx	lr

080022b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80022b0:	2001      	movs	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80022b4:	2000      	movs	r0, #0
 80022b6:	4770      	bx	lr

080022b8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <_sbrk+0x2c>)
{
 80022ba:	0003      	movs	r3, r0
	if (heap_end == 0)
 80022bc:	6811      	ldr	r1, [r2, #0]
{
 80022be:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80022c0:	2900      	cmp	r1, #0
 80022c2:	d101      	bne.n	80022c8 <_sbrk+0x10>
		heap_end = &end;
 80022c4:	4908      	ldr	r1, [pc, #32]	; (80022e8 <_sbrk+0x30>)
 80022c6:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80022c8:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80022ca:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80022cc:	18c3      	adds	r3, r0, r3
 80022ce:	428b      	cmp	r3, r1
 80022d0:	d906      	bls.n	80022e0 <_sbrk+0x28>
	{
		errno = ENOMEM;
 80022d2:	f002 fff1 	bl	80052b8 <__errno>
 80022d6:	230c      	movs	r3, #12
 80022d8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80022da:	2001      	movs	r0, #1
 80022dc:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80022de:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80022e0:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80022e2:	e7fc      	b.n	80022de <_sbrk+0x26>
 80022e4:	2000036c 	.word	0x2000036c
 80022e8:	20000700 	.word	0x20000700

080022ec <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <SystemInit+0x44>)
 80022f0:	0052      	lsls	r2, r2, #1
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <SystemInit+0x48>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	490d      	ldr	r1, [pc, #52]	; (8002338 <SystemInit+0x4c>)
 8002304:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002306:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002308:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	438a      	bics	r2, r1
 800230e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	490a      	ldr	r1, [pc, #40]	; (800233c <SystemInit+0x50>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4909      	ldr	r1, [pc, #36]	; (8002340 <SystemInit+0x54>)
 800231c:	400a      	ands	r2, r1
 800231e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <SystemInit+0x58>)
 8002328:	0512      	lsls	r2, r2, #20
 800232a:	609a      	str	r2, [r3, #8]
#endif
}
 800232c:	4770      	bx	lr
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	40021000 	.word	0x40021000
 8002334:	88ff400c 	.word	0x88ff400c
 8002338:	fef6fff6 	.word	0xfef6fff6
 800233c:	fffbffff 	.word	0xfffbffff
 8002340:	ff02ffff 	.word	0xff02ffff
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002348:	b510      	push	{r4, lr}
 800234a:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234c:	2210      	movs	r2, #16
 800234e:	2100      	movs	r1, #0
 8002350:	a802      	add	r0, sp, #8
 8002352:	f002 ffe4 	bl	800531e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	2208      	movs	r2, #8
 8002358:	2100      	movs	r1, #0
 800235a:	4668      	mov	r0, sp
 800235c:	f002 ffdf 	bl	800531e <memset>

  htim2.Instance = TIM2;
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	4c14      	ldr	r4, [pc, #80]	; (80023b4 <MX_TIM2_Init+0x6c>)
 8002364:	05db      	lsls	r3, r3, #23
 8002366:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8002368:	2300      	movs	r3, #0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800236a:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 800236c:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 0;
 8002370:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002376:	f002 f86f 	bl	8004458 <HAL_TIM_Base_Init>
 800237a:	2800      	cmp	r0, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 800237e:	f7ff fb51 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002384:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002386:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002388:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800238c:	f002 f8a6 	bl	80044dc <HAL_TIM_ConfigClockSource>
 8002390:	2800      	cmp	r0, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
 8002394:	f7ff fb46 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800239a:	4669      	mov	r1, sp
 800239c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023a2:	f002 f9c8 	bl	8004736 <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80023aa:	f7ff fb3b 	bl	8001a24 <Error_Handler>
  }

}
 80023ae:	b006      	add	sp, #24
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	20000544 	.word	0x20000544

080023b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ba:	2208      	movs	r2, #8
 80023bc:	2100      	movs	r1, #0
 80023be:	4668      	mov	r0, sp
 80023c0:	f002 ffad 	bl	800531e <memset>

  htim6.Instance = TIM6;
 80023c4:	4c0d      	ldr	r4, [pc, #52]	; (80023fc <MX_TIM6_Init+0x44>)
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_TIM6_Init+0x48>)
  htim6.Init.Prescaler = 16-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	2500      	movs	r5, #0
  htim6.Instance = TIM6;
 80023ca:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 16-1;
 80023cc:	230f      	movs	r3, #15
  htim6.Init.Period = 0;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023ce:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 16-1;
 80023d0:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 0;
 80023d4:	60e5      	str	r5, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023d8:	f002 f83e 	bl	8004458 <HAL_TIM_Base_Init>
 80023dc:	42a8      	cmp	r0, r5
 80023de:	d001      	beq.n	80023e4 <MX_TIM6_Init+0x2c>
  {
    Error_Handler();
 80023e0:	f7ff fb20 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023e4:	4669      	mov	r1, sp
 80023e6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e8:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ec:	f002 f9a3 	bl	8004736 <HAL_TIMEx_MasterConfigSynchronization>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80023f4:	f7ff fb16 	bl	8001a24 <Error_Handler>
  }

}
 80023f8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	20000508 	.word	0x20000508
 8002400:	40001000 	.word	0x40001000

08002404 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8002404:	b510      	push	{r4, lr}
 8002406:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002408:	2210      	movs	r2, #16
 800240a:	2100      	movs	r1, #0
 800240c:	a802      	add	r0, sp, #8
 800240e:	f002 ff86 	bl	800531e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	2208      	movs	r2, #8
 8002414:	2100      	movs	r1, #0
 8002416:	4668      	mov	r0, sp
 8002418:	f002 ff81 	bl	800531e <memset>

  htim21.Instance = TIM21;
 800241c:	4c14      	ldr	r4, [pc, #80]	; (8002470 <MX_TIM21_Init+0x6c>)
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_TIM21_Init+0x70>)
  htim21.Init.Prescaler = 16000-1;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 50-1;
 8002420:	2231      	movs	r2, #49	; 0x31
  htim21.Instance = TIM21;
 8002422:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 16000-1;
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_TIM21_Init+0x74>)
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002426:	0020      	movs	r0, r4
  htim21.Init.Prescaler = 16000-1;
 8002428:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	2300      	movs	r3, #0
  htim21.Init.Period = 50-1;
 800242c:	60e2      	str	r2, [r4, #12]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	60a3      	str	r3, [r4, #8]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002430:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002432:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002434:	f002 f810 	bl	8004458 <HAL_TIM_Base_Init>
 8002438:	2800      	cmp	r0, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM21_Init+0x3c>
  {
    Error_Handler();
 800243c:	f7ff faf2 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002440:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002442:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002444:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002446:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800244a:	f002 f847 	bl	80044dc <HAL_TIM_ConfigClockSource>
 800244e:	2800      	cmp	r0, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM21_Init+0x52>
  {
    Error_Handler();
 8002452:	f7ff fae7 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002458:	4669      	mov	r1, sp
 800245a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002460:	f002 f969 	bl	8004736 <HAL_TIMEx_MasterConfigSynchronization>
 8002464:	2800      	cmp	r0, #0
 8002466:	d001      	beq.n	800246c <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8002468:	f7ff fadc 	bl	8001a24 <Error_Handler>
  }

}
 800246c:	b006      	add	sp, #24
 800246e:	bd10      	pop	{r4, pc}
 8002470:	20000584 	.word	0x20000584
 8002474:	40010800 	.word	0x40010800
 8002478:	00003e7f 	.word	0x00003e7f

0800247c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	6803      	ldr	r3, [r0, #0]
{
 8002480:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM2)
 8002482:	05d2      	lsls	r2, r2, #23
 8002484:	4293      	cmp	r3, r2
 8002486:	d105      	bne.n	8002494 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002488:	2301      	movs	r3, #1
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_TIM_Base_MspInit+0x48>)
 800248c:	6b91      	ldr	r1, [r2, #56]	; 0x38
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800248e:	430b      	orrs	r3, r1
 8002490:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8002492:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM6)
 8002494:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d103      	bne.n	80024a2 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_TIM_Base_MspInit+0x48>)
 800249c:	2310      	movs	r3, #16
 800249e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80024a0:	e7f5      	b.n	800248e <HAL_TIM_Base_MspInit+0x12>
  else if(tim_baseHandle->Instance==TIM21)
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_TIM_Base_MspInit+0x50>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d1f4      	bne.n	8002492 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80024a8:	2304      	movs	r3, #4
 80024aa:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <HAL_TIM_Base_MspInit+0x48>)
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80024ac:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 80024ae:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	0011      	movs	r1, r2
 80024b8:	f000 fc00 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80024bc:	2014      	movs	r0, #20
 80024be:	f000 fc27 	bl	8002d10 <HAL_NVIC_EnableIRQ>
}
 80024c2:	e7e6      	b.n	8002492 <HAL_TIM_Base_MspInit+0x16>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40001000 	.word	0x40001000
 80024cc:	40010800 	.word	0x40010800

080024d0 <SdkEvalTimersTimConfig>:
 * @param  nPrescaler prescaler factor.
 * @param  nPeriod period factor.
 * @retval None.
 */
void SdkEvalTimersTimConfig(TIM_HandleTypeDef* TIM_TimeBaseStructure, uint16_t nPrescaler, uint16_t nPeriod)
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
	TIM_TypeDef *xTim=TIM_TimeBaseStructure->Instance;
 80024d2:	6805      	ldr	r5, [r0, #0]
{
 80024d4:	0004      	movs	r4, r0

	/* disable the timer */
	__HAL_TIM_DISABLE(TIM_TimeBaseStructure);
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <SdkEvalTimersTimConfig+0x60>)
 80024d8:	6a28      	ldr	r0, [r5, #32]
 80024da:	4218      	tst	r0, r3
 80024dc:	d103      	bne.n	80024e6 <SdkEvalTimersTimConfig+0x16>
 80024de:	2001      	movs	r0, #1
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	4383      	bics	r3, r0
 80024e4:	602b      	str	r3, [r5, #0]

	/* Configure the timer in update mode */
	__HAL_TIM_DISABLE_IT(TIM_TimeBaseStructure, TIM_IT_UPDATE);
 80024e6:	2301      	movs	r3, #1
 80024e8:	68e8      	ldr	r0, [r5, #12]
 80024ea:	4398      	bics	r0, r3
 80024ec:	60e8      	str	r0, [r5, #12]

	/* put the timer clock on */
	if(xTim == TIM2) {
 80024ee:	2080      	movs	r0, #128	; 0x80
 80024f0:	05c0      	lsls	r0, r0, #23
 80024f2:	4285      	cmp	r5, r0
 80024f4:	d103      	bne.n	80024fe <SdkEvalTimersTimConfig+0x2e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80024f6:	480f      	ldr	r0, [pc, #60]	; (8002534 <SdkEvalTimersTimConfig+0x64>)
 80024f8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80024fa:	4333      	orrs	r3, r6
 80024fc:	6383      	str	r3, [r0, #56]	; 0x38
	}

	/* Time base configuration */
	TIM_TimeBaseStructure->Init.Prescaler         = nPrescaler;
	TIM_TimeBaseStructure->Init.Period            = nPeriod;
	TIM_TimeBaseStructure->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80024fe:	2600      	movs	r6, #0
	TIM_TimeBaseStructure->Init.CounterMode       = TIM_COUNTERMODE_UP;

	/* Init the time base structure */
	HAL_TIM_Base_Init(TIM_TimeBaseStructure);
 8002500:	0020      	movs	r0, r4
	TIM_TimeBaseStructure->Init.Prescaler         = nPrescaler;
 8002502:	6061      	str	r1, [r4, #4]
	TIM_TimeBaseStructure->Init.Period            = nPeriod;
 8002504:	60e2      	str	r2, [r4, #12]
	TIM_TimeBaseStructure->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002506:	6126      	str	r6, [r4, #16]
	TIM_TimeBaseStructure->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002508:	60a6      	str	r6, [r4, #8]
	HAL_TIM_Base_Init(TIM_TimeBaseStructure);
 800250a:	f001 ffa5 	bl	8004458 <HAL_TIM_Base_Init>


	/* NVIC configuration */
	if(xTim == TIM2) {
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	05db      	lsls	r3, r3, #23
 8002512:	429d      	cmp	r5, r3
 8002514:	d107      	bne.n	8002526 <SdkEvalTimersTimConfig+0x56>
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002516:	200f      	movs	r0, #15
 8002518:	0032      	movs	r2, r6
 800251a:	2101      	movs	r1, #1
 800251c:	f000 fbce 	bl	8002cbc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002520:	200f      	movs	r0, #15
 8002522:	f000 fbf5 	bl	8002d10 <HAL_NVIC_EnableIRQ>
	}

	/* Clear the timer pending bit */
	__HAL_TIM_CLEAR_FLAG(TIM_TimeBaseStructure, TIM_FLAG_UPDATE);
 8002526:	2202      	movs	r2, #2
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	4252      	negs	r2, r2
 800252c:	611a      	str	r2, [r3, #16]
}
 800252e:	bd70      	pop	{r4, r5, r6, pc}
 8002530:	00001111 	.word	0x00001111
 8002534:	40021000 	.word	0x40021000

08002538 <ST_MCU_API_TimerCalibration>:

void ST_MCU_API_TimerCalibration(uint16_t duration_ms)
{
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	b090      	sub	sp, #64	; 0x40
	TIM_HandleTypeDef  Tim2_Handler={.Instance=TIM2};
 800253c:	2238      	movs	r2, #56	; 0x38
 800253e:	2100      	movs	r1, #0
{
 8002540:	0004      	movs	r4, r0
	TIM_HandleTypeDef  Tim2_Handler={.Instance=TIM2};
 8002542:	a802      	add	r0, sp, #8
 8002544:	f002 feeb 	bl	800531e <memset>
 8002548:	2380      	movs	r3, #128	; 0x80
	}
}

/* Set flags */
void setNotifyEndFlag(uint8_t notifyEnd) {
	notify_end = notifyEnd;
 800254a:	2501      	movs	r5, #1
	TIM_HandleTypeDef  Tim2_Handler={.Instance=TIM2};
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	9301      	str	r3, [sp, #4]
	Configure_RTC_Clock();
 8002550:	f7ff fbde 	bl	8001d10 <Configure_RTC_Clock>
	notify_end = notifyEnd;
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <ST_MCU_API_TimerCalibration+0xa8>)
 8002556:	701d      	strb	r5, [r3, #0]
	rtcHandler = getRtcHandler();
 8002558:	f7ff fc38 	bl	8001dcc <getRtcHandler>
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 800255c:	6801      	ldr	r1, [r0, #0]
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <ST_MCU_API_TimerCalibration+0xac>)
 8002560:	68ca      	ldr	r2, [r1, #12]
	rtcHandler = getRtcHandler();
 8002562:	4e21      	ldr	r6, [pc, #132]	; (80025e8 <ST_MCU_API_TimerCalibration+0xb0>)
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4313      	orrs	r3, r2
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002568:	2280      	movs	r2, #128	; 0x80
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 800256a:	60cb      	str	r3, [r1, #12]
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <ST_MCU_API_TimerCalibration+0xb4>)
 800256e:	0352      	lsls	r2, r2, #13
	rtcHandler = getRtcHandler();
 8002570:	6030      	str	r0, [r6, #0]
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002572:	615a      	str	r2, [r3, #20]
	setNextRtcWakeUpFlag(0);
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff fc05 	bl	8001d84 <setNextRtcWakeUpFlag>
	SdkEvalTimersTimConfig(&Tim2_Handler,16000-1,65535-1);
 800257a:	491d      	ldr	r1, [pc, #116]	; (80025f0 <ST_MCU_API_TimerCalibration+0xb8>)
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <ST_MCU_API_TimerCalibration+0xbc>)
 800257e:	a801      	add	r0, sp, #4
 8002580:	f7ff ffa6 	bl	80024d0 <SdkEvalTimersTimConfig>
	__HAL_TIM_DISABLE_IT(&Tim2_Handler, TIM_IT_UPDATE);
 8002584:	9a01      	ldr	r2, [sp, #4]
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8002586:	200f      	movs	r0, #15
	__HAL_TIM_DISABLE_IT(&Tim2_Handler, TIM_IT_UPDATE);
 8002588:	68d3      	ldr	r3, [r2, #12]
 800258a:	43ab      	bics	r3, r5
 800258c:	60d3      	str	r3, [r2, #12]
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800258e:	f000 fbc9 	bl	8002d24 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Start(&Tim2_Handler);
 8002592:	a801      	add	r0, sp, #4
 8002594:	f001 ff7b 	bl	800448e <HAL_TIM_Base_Start>
	HAL_RTCEx_SetWakeUpTimer_IT(rtcHandler,((getRtcPrescFlag()*duration_ms)/1000),RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8002598:	6835      	ldr	r5, [r6, #0]
 800259a:	f7ff fc11 	bl	8001dc0 <getRtcPrescFlag>
 800259e:	21fa      	movs	r1, #250	; 0xfa
 80025a0:	4360      	muls	r0, r4
 80025a2:	0089      	lsls	r1, r1, #2
 80025a4:	f7fe fc34 	bl	8000e10 <__divsi3>
 80025a8:	2200      	movs	r2, #0
 80025aa:	0001      	movs	r1, r0
 80025ac:	0028      	movs	r0, r5
 80025ae:	f001 fc77 	bl	8003ea0 <HAL_RTCEx_SetWakeUpTimer_IT>
	while(!getRtcIrqFlag());
 80025b2:	f7ff fbff 	bl	8001db4 <getRtcIrqFlag>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d0fb      	beq.n	80025b2 <ST_MCU_API_TimerCalibration+0x7a>
	c=Tim2_Handler.Instance->CNT;
 80025ba:	9b01      	ldr	r3, [sp, #4]
	setRtcIrqFlag(0);
 80025bc:	2000      	movs	r0, #0
	c=Tim2_Handler.Instance->CNT;
 80025be:	6a5d      	ldr	r5, [r3, #36]	; 0x24
	setRtcIrqFlag(0);
 80025c0:	f7ff fbd4 	bl	8001d6c <setRtcIrqFlag>
	HAL_TIM_Base_Stop(&Tim2_Handler);
 80025c4:	a801      	add	r0, sp, #4
 80025c6:	f001 ff75 	bl	80044b4 <HAL_TIM_Base_Stop>
	rtc_presc=(duration_ms*getRtcPrescFlag())/c;
 80025ca:	f7ff fbf9 	bl	8001dc0 <getRtcPrescFlag>
 80025ce:	b2a9      	uxth	r1, r5
 80025d0:	4360      	muls	r0, r4
 80025d2:	f7fe fc1d 	bl	8000e10 <__divsi3>
	setRtcPrescFlag(rtc_presc);
 80025d6:	b280      	uxth	r0, r0
 80025d8:	f7ff fbda 	bl	8001d90 <setRtcPrescFlag>
}
 80025dc:	b010      	add	sp, #64	; 0x40
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	20000374 	.word	0x20000374
 80025e4:	fffffb7f 	.word	0xfffffb7f
 80025e8:	20000580 	.word	0x20000580
 80025ec:	40010400 	.word	0x40010400
 80025f0:	00003e7f 	.word	0x00003e7f
 80025f4:	0000fffe 	.word	0x0000fffe

080025f8 <MCU_API_timer_start>:
{
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	0004      	movs	r4, r0
	ST_RF_API_Timer_CB(TIMER_START); /* To notify the rf_api layer */
 80025fc:	2000      	movs	r0, #0
 80025fe:	f002 fd81 	bl	8005104 <ST_RF_API_Timer_CB>
	setRtcIrqFlag(0);
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff fbb2 	bl	8001d6c <setRtcIrqFlag>
	rtcHandler = getRtcHandler();
 8002608:	f7ff fbe0 	bl	8001dcc <getRtcHandler>
 800260c:	4d19      	ldr	r5, [pc, #100]	; (8002674 <MCU_API_timer_start+0x7c>)
 800260e:	6028      	str	r0, [r5, #0]
	if (time_duration_in_s == DECAY_LEVEL)
 8002610:	2c22      	cmp	r4, #34	; 0x22
 8002612:	d100      	bne.n	8002616 <MCU_API_timer_start+0x1e>
		time_duration_in_s += 2; /* In order to make RX-PROTOCOL End of Listening Window working */
 8002614:	3402      	adds	r4, #2
	Configure_RTC_Clock();
 8002616:	f7ff fb7b 	bl	8001d10 <Configure_RTC_Clock>
	notify_end = notifyEnd;
 800261a:	2001      	movs	r0, #1
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MCU_API_timer_start+0x80>)
}

void setNIntermediateTimIrqFlag(uint8_t nIntermediateTimeIrq) {
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 800261e:	2600      	movs	r6, #0
	notify_end = notifyEnd;
 8002620:	7018      	strb	r0, [r3, #0]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <MCU_API_timer_start+0x84>)
 8002628:	68ca      	ldr	r2, [r1, #12]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	4313      	orrs	r3, r2
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800262e:	2280      	movs	r2, #128	; 0x80
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8002630:	60cb      	str	r3, [r1, #12]
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <MCU_API_timer_start+0x88>)
 8002634:	0352      	lsls	r2, r2, #13
 8002636:	615a      	str	r2, [r3, #20]
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MCU_API_timer_start+0x8c>)
 800263a:	601e      	str	r6, [r3, #0]
	setRtcInUseFlag(1);
 800263c:	f7ff fb90 	bl	8001d60 <setRtcInUseFlag>
	rtc_wup_tick = (time_duration_in_s)*getRtcPrescFlag(); //(time_duration_in_s)*rtc_presc;
 8002640:	f7ff fbbe 	bl	8001dc0 <getRtcPrescFlag>
 8002644:	0021      	movs	r1, r4
	if(rtc_wup_tick>65535)
 8002646:	2380      	movs	r3, #128	; 0x80
	rtc_wup_tick = (time_duration_in_s)*getRtcPrescFlag(); //(time_duration_in_s)*rtc_presc;
 8002648:	4341      	muls	r1, r0
	if(rtc_wup_tick>65535)
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	4299      	cmp	r1, r3
 800264e:	d302      	bcc.n	8002656 <MCU_API_timer_start+0x5e>
		next_rtc_wakeup_tick=(rtc_wup_tick)-65535;
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <MCU_API_timer_start+0x90>)
 8002652:	18ce      	adds	r6, r1, r3
		rtc_wup_tick=65535;
 8002654:	490d      	ldr	r1, [pc, #52]	; (800268c <MCU_API_timer_start+0x94>)
	HAL_RTCEx_SetWakeUpTimer_IT(rtcHandler,rtc_wup_tick,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8002656:	2200      	movs	r2, #0
 8002658:	6828      	ldr	r0, [r5, #0]
 800265a:	f001 fc21 	bl	8003ea0 <HAL_RTCEx_SetWakeUpTimer_IT>
	next_rtc_wakeup=(next_rtc_wakeup_tick/getRtcPrescFlag());
 800265e:	f7ff fbaf 	bl	8001dc0 <getRtcPrescFlag>
 8002662:	0001      	movs	r1, r0
 8002664:	0030      	movs	r0, r6
 8002666:	f7fe fb49 	bl	8000cfc <__udivsi3>
	setNextRtcWakeUpFlag(next_rtc_wakeup);
 800266a:	f7ff fb8b 	bl	8001d84 <setNextRtcWakeUpFlag>
}
 800266e:	2000      	movs	r0, #0
 8002670:	bd70      	pop	{r4, r5, r6, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20000580 	.word	0x20000580
 8002678:	20000374 	.word	0x20000374
 800267c:	fffffb7f 	.word	0xfffffb7f
 8002680:	40010400 	.word	0x40010400
 8002684:	20000370 	.word	0x20000370
 8002688:	ffff0001 	.word	0xffff0001
 800268c:	0000ffff 	.word	0x0000ffff

08002690 <setNIntermediateTimIrqFlag>:
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 8002690:	4b01      	ldr	r3, [pc, #4]	; (8002698 <setNIntermediateTimIrqFlag+0x8>)
 8002692:	6018      	str	r0, [r3, #0]
}
 8002694:	4770      	bx	lr
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	20000370 	.word	0x20000370

0800269c <getNotifyEndFlag>:

/* Get flags */
uint8_t getNotifyEndFlag(void) {
	return notify_end;
 800269c:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <getNotifyEndFlag+0x8>)
 800269e:	7818      	ldrb	r0, [r3, #0]
 80026a0:	b2c0      	uxtb	r0, r0
}
 80026a2:	4770      	bx	lr
 80026a4:	20000374 	.word	0x20000374

080026a8 <getNIntermediateTimIrqFlag>:

uint32_t getNIntermediateTimIrqFlag(void) {
	return n_intermediate_tim_irq;
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <getNIntermediateTimIrqFlag+0x8>)
 80026aa:	6818      	ldr	r0, [r3, #0]
}
 80026ac:	4770      	bx	lr
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	20000370 	.word	0x20000370

080026b4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <MX_USART1_UART_Init+0x30>)
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART1_UART_Init+0x34>)
{
 80026b8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80026ba:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80026bc:	23e1      	movs	r3, #225	; 0xe1
 80026be:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80026c2:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026cc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026d6:	f002 fac1 	bl	8004c5c <HAL_UART_Init>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80026de:	f7ff f9a1 	bl	8001a24 <Error_Handler>
  }

}
 80026e2:	bd10      	pop	{r4, pc}
 80026e4:	20000650 	.word	0x20000650
 80026e8:	40013800 	.word	0x40013800

080026ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	0005      	movs	r5, r0
 80026f0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f2:	2214      	movs	r2, #20
 80026f4:	2100      	movs	r1, #0
 80026f6:	a801      	add	r0, sp, #4
 80026f8:	f002 fe11 	bl	800531e <memset>
  if(uartHandle->Instance==USART1)
 80026fc:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <HAL_UART_MspInit+0xb8>)
 80026fe:	682a      	ldr	r2, [r5, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d14d      	bne.n	80027a0 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_UART_MspInit+0xbc>)
 8002708:	01d2      	lsls	r2, r2, #7
 800270a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800270e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8002712:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	430a      	orrs	r2, r1
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	400b      	ands	r3, r1
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002726:	23c0      	movs	r3, #192	; 0xc0
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002734:	18db      	adds	r3, r3, r3
 8002736:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f000 fcdc 	bl	80030f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002740:	4c1a      	ldr	r4, [pc, #104]	; (80027ac <HAL_UART_MspInit+0xc0>)
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_UART_MspInit+0xc4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002744:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002746:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800274c:	3b60      	subs	r3, #96	; 0x60
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800274e:	6067      	str	r7, [r4, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002750:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002752:	60e6      	str	r6, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002754:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002756:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002758:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800275a:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800275c:	f000 fb06 	bl	8002d6c <HAL_DMA_Init>
 8002760:	42b0      	cmp	r0, r6
 8002762:	d001      	beq.n	8002768 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8002764:	f7ff f95e 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_UART_MspInit+0xc8>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800276a:	66ec      	str	r4, [r5, #108]	; 0x6c
 800276c:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800276e:	4c12      	ldr	r4, [pc, #72]	; (80027b8 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002770:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002772:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8002774:	2303      	movs	r3, #3
 8002776:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002778:	330d      	adds	r3, #13
 800277a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002780:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002782:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002784:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002786:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002788:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800278a:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800278c:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800278e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002790:	f000 faec 	bl	8002d6c <HAL_DMA_Init>
 8002794:	2800      	cmp	r0, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 8002798:	f7ff f944 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800279c:	66ac      	str	r4, [r5, #104]	; 0x68
 800279e:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027a0:	b007      	add	sp, #28
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40021000 	.word	0x40021000
 80027ac:	20000608 	.word	0x20000608
 80027b0:	40020058 	.word	0x40020058
 80027b4:	40020044 	.word	0x40020044
 80027b8:	200005c0 	.word	0x200005c0

080027bc <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */

int __io_putchar(int ch) {
 80027bc:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__io_putchar+0x14>)
int __io_putchar(int ch) {
 80027c0:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80027c2:	2201      	movs	r2, #1
 80027c4:	4803      	ldr	r0, [pc, #12]	; (80027d4 <__io_putchar+0x18>)
 80027c6:	a901      	add	r1, sp, #4
 80027c8:	f002 f9aa 	bl	8004b20 <HAL_UART_Transmit>
  return ch;
}
 80027cc:	9801      	ldr	r0, [sp, #4]
 80027ce:	bd0e      	pop	{r1, r2, r3, pc}
 80027d0:	0000ffff 	.word	0x0000ffff
 80027d4:	20000650 	.word	0x20000650

080027d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80027da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80027dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027de:	e003      	b.n	80027e8 <LoopCopyDataInit>

080027e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80027e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027e6:	3104      	adds	r1, #4

080027e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80027e8:	480b      	ldr	r0, [pc, #44]	; (8002818 <LoopForever+0xa>)
  ldr  r3, =_edata
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <LoopForever+0xe>)
  adds  r2, r0, r1
 80027ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027f0:	d3f6      	bcc.n	80027e0 <CopyDataInit>
  ldr  r2, =_sbss
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <LoopForever+0x12>)
  b  LoopFillZerobss
 80027f4:	e002      	b.n	80027fc <LoopFillZerobss>

080027f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80027f6:	2300      	movs	r3, #0
  str  r3, [r2]
 80027f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fa:	3204      	adds	r2, #4

080027fc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <LoopForever+0x16>)
  cmp  r2, r3
 80027fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002800:	d3f9      	bcc.n	80027f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002802:	f7ff fd73 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002806:	f002 fd5d 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280a:	f7ff f9ab 	bl	8001b64 <main>

0800280e <LoopForever>:

LoopForever:
    b LoopForever
 800280e:	e7fe      	b.n	800280e <LoopForever>
   ldr   r0, =_estack
 8002810:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002814:	08006cec 	.word	0x08006cec
  ldr  r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800281c:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 8002820:	2000018c 	.word	0x2000018c
  ldr  r3, = _ebss
 8002824:	200006fc 	.word	0x200006fc

08002828 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <DMA1_Channel1_IRQHandler>
	...

0800282c <FEM_Init>:
 * This function can be redefined for special needs.
 * @param  None
 * @retval None
 */
void FEM_Init()
{
 800282c:	b513      	push	{r0, r1, r4, lr}

	/* Configuration of S2LP GPIO to control external PA signal CSD, CPS, CTX */
	uint8_t tmp[]={
 800282e:	2403      	movs	r4, #3
 8002830:	4905      	ldr	r1, [pc, #20]	; (8002848 <FEM_Init+0x1c>)
 8002832:	0022      	movs	r2, r4
 8002834:	a801      	add	r0, sp, #4
 8002836:	f002 fd69 	bl	800530c <memcpy>
			(uint8_t)S2LP_GPIO_DIG_OUT_TX_RX_MODE | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP,
			(uint8_t)S2LP_GPIO_DIG_OUT_RX_STATE   | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP,
			(uint8_t)S2LP_GPIO_DIG_OUT_TX_STATE   | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP
	};

	S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 800283a:	0021      	movs	r1, r4
 800283c:	aa01      	add	r2, sp, #4
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff fb62 	bl	8001f08 <S2LPSpiWriteRegisters>
}
 8002844:	bd13      	pop	{r0, r1, r4, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	08006823 	.word	0x08006823

0800284c <FEM_Operation>:
 *         @arg FEM_TX: TX mode
 *         @arg FEM_RX: RX mode
 * @retval None
 */
void FEM_Operation(FEM_OperationType operation)
{
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	0005      	movs	r5, r0
	FEM_Init();
 8002850:	f7ff ffec 	bl	800282c <FEM_Init>

	switch (operation)
 8002854:	4c13      	ldr	r4, [pc, #76]	; (80028a4 <FEM_Operation+0x58>)
 8002856:	2d02      	cmp	r5, #2
 8002858:	d015      	beq.n	8002886 <FEM_Operation+0x3a>
 800285a:	26a2      	movs	r6, #162	; 0xa2
 800285c:	2d03      	cmp	r5, #3
 800285e:	d019      	beq.n	8002894 <FEM_Operation+0x48>
 8002860:	2d01      	cmp	r5, #1
 8002862:	d008      	beq.n	8002876 <FEM_Operation+0x2a>
	{
	case FEM_SHUTDOWN:
		tmp[0]=LOW;
 8002864:	7026      	strb	r6, [r4, #0]
		tmp[1]=LOW;
 8002866:	7066      	strb	r6, [r4, #1]
		tmp[2]=LOW;
 8002868:	70a6      	strb	r6, [r4, #2]

		tmp[0]=HIGH;
		tmp[1]=HIGH;
		tmp[2]=HIGH;

		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 800286a:	0022      	movs	r2, r4
 800286c:	2103      	movs	r1, #3

		tmp[0]=LOW;
		tmp[1]=LOW;
		tmp[2]=HIGH;

		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff fb4a 	bl	8001f08 <S2LPSpiWriteRegisters>
		tmp[2]=LOW;

		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
		break;
	}
}
 8002874:	bd70      	pop	{r4, r5, r6, pc}
		printf("TX\n");
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <FEM_Operation+0x5c>)
 8002878:	f002 fdfa 	bl	8005470 <puts>
		tmp[0]=HIGH;
 800287c:	239a      	movs	r3, #154	; 0x9a
		tmp[1]=LOW;
 800287e:	7066      	strb	r6, [r4, #1]
		tmp[0]=HIGH;
 8002880:	7023      	strb	r3, [r4, #0]
		tmp[2]=HIGH;
 8002882:	70a3      	strb	r3, [r4, #2]
 8002884:	e7f1      	b.n	800286a <FEM_Operation+0x1e>
		printf("TX\n");
 8002886:	4808      	ldr	r0, [pc, #32]	; (80028a8 <FEM_Operation+0x5c>)
 8002888:	f002 fdf2 	bl	8005470 <puts>
		tmp[0]=HIGH;
 800288c:	239a      	movs	r3, #154	; 0x9a
 800288e:	7023      	strb	r3, [r4, #0]
		tmp[1]=HIGH;
 8002890:	7063      	strb	r3, [r4, #1]
 8002892:	e7f6      	b.n	8002882 <FEM_Operation+0x36>
		tmp[2]=HIGH;
 8002894:	239a      	movs	r3, #154	; 0x9a
		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 8002896:	0022      	movs	r2, r4
 8002898:	0029      	movs	r1, r5
		tmp[0]=LOW;
 800289a:	7026      	strb	r6, [r4, #0]
		tmp[1]=LOW;
 800289c:	7066      	strb	r6, [r4, #1]
		tmp[2]=HIGH;
 800289e:	70a3      	strb	r3, [r4, #2]
		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 80028a0:	e7e5      	b.n	800286e <FEM_Operation+0x22>
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	20000375 	.word	0x20000375
 80028a8:	08006827 	.word	0x08006827

080028ac <EepromRead>:

	/* Put the SPI chip select high to end the transaction */
	EepromSPICSHigh();
#endif
	return 0;
}
 80028ac:	2000      	movs	r0, #0
 80028ae:	4770      	bx	lr

080028b0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80028b0:	21fa      	movs	r1, #250	; 0xfa
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_InitTick+0x2c>)
{
 80028b4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80028b6:	0089      	lsls	r1, r1, #2
{
 80028b8:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	f7fe fa1e 	bl	8000cfc <__udivsi3>
 80028c0:	f000 fa3a 	bl	8002d38 <HAL_SYSTICK_Config>
 80028c4:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80028c8:	2c00      	cmp	r4, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80028cc:	3802      	subs	r0, #2
 80028ce:	0022      	movs	r2, r4
 80028d0:	0029      	movs	r1, r5
 80028d2:	f000 f9f3 	bl	8002cbc <HAL_NVIC_SetPriority>
 80028d6:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000084 	.word	0x20000084

080028e0 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_Init+0x24>)
{
 80028e4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80028e6:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e8:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ee:	f7ff ffdf 	bl	80028b0 <HAL_InitTick>
 80028f2:	1e04      	subs	r4, r0, #0
 80028f4:	d103      	bne.n	80028fe <HAL_Init+0x1e>
    HAL_MspInit();
 80028f6:	f7ff fc37 	bl	8002168 <HAL_MspInit>
}
 80028fa:	0020      	movs	r0, r4
 80028fc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80028fe:	2401      	movs	r4, #1
 8002900:	e7fb      	b.n	80028fa <HAL_Init+0x1a>
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	40022000 	.word	0x40022000

08002908 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002908:	4a02      	ldr	r2, [pc, #8]	; (8002914 <HAL_IncTick+0xc>)
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	4770      	bx	lr
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	200006d0 	.word	0x200006d0

08002918 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002918:	4b01      	ldr	r3, [pc, #4]	; (8002920 <HAL_GetTick+0x8>)
 800291a:	6818      	ldr	r0, [r3, #0]
}
 800291c:	4770      	bx	lr
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	200006d0 	.word	0x200006d0

08002924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff fff6 	bl	8002918 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 800292c:	1c63      	adds	r3, r4, #1
 800292e:	1e5a      	subs	r2, r3, #1
 8002930:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8002932:	0005      	movs	r5, r0
    wait++;
 8002934:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002936:	f7ff ffef 	bl	8002918 <HAL_GetTick>
 800293a:	1b40      	subs	r0, r0, r5
 800293c:	42a0      	cmp	r0, r4
 800293e:	d3fa      	bcc.n	8002936 <HAL_Delay+0x12>
  {
  }
}
 8002940:	bd70      	pop	{r4, r5, r6, pc}
	...

08002944 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <ADC_DelayMicroSecond+0x24>)
{
 8002946:	b513      	push	{r0, r1, r4, lr}
 8002948:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <ADC_DelayMicroSecond+0x28>)
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f7fe f9d5 	bl	8000cfc <__udivsi3>
 8002952:	4344      	muls	r4, r0
 8002954:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002956:	9b01      	ldr	r3, [sp, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d100      	bne.n	800295e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800295c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800295e:	9b01      	ldr	r3, [sp, #4]
 8002960:	3b01      	subs	r3, #1
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	e7f7      	b.n	8002956 <ADC_DelayMicroSecond+0x12>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	20000084 	.word	0x20000084
 800296c:	000f4240 	.word	0x000f4240

08002970 <HAL_ADC_Init>:
{
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
  if(hadc == NULL)
 8002976:	2c00      	cmp	r4, #0
 8002978:	d01b      	beq.n	80029b2 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800297a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002980:	0022      	movs	r2, r4
 8002982:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002984:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002986:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002988:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800298a:	f7fe fe31 	bl	80015f0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800298e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002990:	06db      	lsls	r3, r3, #27
 8002992:	d406      	bmi.n	80029a2 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	0008      	movs	r0, r1
 800299c:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800299e:	4211      	tst	r1, r2
 80029a0:	d008      	beq.n	80029b4 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	2310      	movs	r3, #16
 80029a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80029a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a8:	4313      	orrs	r3, r2
 80029aa:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80029ac:	2300      	movs	r3, #0
 80029ae:	3450      	adds	r4, #80	; 0x50
 80029b0:	7023      	strb	r3, [r4, #0]
}
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80029b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029b6:	4955      	ldr	r1, [pc, #340]	; (8002b0c <HAL_ADC_Init+0x19c>)
 80029b8:	4011      	ands	r1, r2
 80029ba:	2202      	movs	r2, #2
 80029bc:	430a      	orrs	r2, r1
 80029be:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029c0:	2203      	movs	r2, #3
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	4011      	ands	r1, r2
 80029c6:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_ADC_Init+0x1a0>)
 80029c8:	2901      	cmp	r1, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_ADC_Init+0x62>
 80029cc:	681d      	ldr	r5, [r3, #0]
 80029ce:	420d      	tst	r5, r1
 80029d0:	d119      	bne.n	8002a06 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80029d2:	2680      	movs	r6, #128	; 0x80
 80029d4:	6861      	ldr	r1, [r4, #4]
 80029d6:	05f6      	lsls	r6, r6, #23
 80029d8:	004d      	lsls	r5, r1, #1
 80029da:	086d      	lsrs	r5, r5, #1
 80029dc:	42b5      	cmp	r5, r6
 80029de:	d003      	beq.n	80029e8 <HAL_ADC_Init+0x78>
 80029e0:	2580      	movs	r5, #128	; 0x80
 80029e2:	062d      	lsls	r5, r5, #24
 80029e4:	42a9      	cmp	r1, r5
 80029e6:	d176      	bne.n	8002ad6 <HAL_ADC_Init+0x166>
 80029e8:	691d      	ldr	r5, [r3, #16]
 80029ea:	00ad      	lsls	r5, r5, #2
 80029ec:	08ad      	lsrs	r5, r5, #2
 80029ee:	611d      	str	r5, [r3, #16]
 80029f0:	691d      	ldr	r5, [r3, #16]
 80029f2:	4329      	orrs	r1, r5
 80029f4:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80029f6:	2518      	movs	r5, #24
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	43a9      	bics	r1, r5
 80029fc:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80029fe:	68d9      	ldr	r1, [r3, #12]
 8002a00:	68a5      	ldr	r5, [r4, #8]
 8002a02:	4329      	orrs	r1, r5
 8002a04:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002a06:	6811      	ldr	r1, [r2, #0]
 8002a08:	4d42      	ldr	r5, [pc, #264]	; (8002b14 <HAL_ADC_Init+0x1a4>)
 8002a0a:	4029      	ands	r1, r5
 8002a0c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a10:	6815      	ldr	r5, [r2, #0]
 8002a12:	0649      	lsls	r1, r1, #25
 8002a14:	4329      	orrs	r1, r5
 8002a16:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	0552      	lsls	r2, r2, #21
 8002a1e:	4211      	tst	r1, r2
 8002a20:	d102      	bne.n	8002a28 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	493b      	ldr	r1, [pc, #236]	; (8002b18 <HAL_ADC_Init+0x1a8>)
 8002a2c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002a2e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002a30:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a32:	68dd      	ldr	r5, [r3, #12]
 8002a34:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002a36:	2902      	cmp	r1, #2
 8002a38:	d100      	bne.n	8002a3c <HAL_ADC_Init+0xcc>
 8002a3a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a3c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a3e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a40:	4332      	orrs	r2, r6
 8002a42:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002a44:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a46:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002a48:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a4a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002a4c:	69e5      	ldr	r5, [r4, #28]
 8002a4e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a50:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a52:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a54:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a56:	0025      	movs	r5, r4
 8002a58:	352c      	adds	r5, #44	; 0x2c
 8002a5a:	782d      	ldrb	r5, [r5, #0]
 8002a5c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a5e:	432a      	orrs	r2, r5
 8002a60:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a62:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a64:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a68:	30ff      	adds	r0, #255	; 0xff
 8002a6a:	4282      	cmp	r2, r0
 8002a6c:	d004      	beq.n	8002a78 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a6e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002a70:	68d8      	ldr	r0, [r3, #12]
 8002a72:	432a      	orrs	r2, r5
 8002a74:	4302      	orrs	r2, r0
 8002a76:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a78:	1ca2      	adds	r2, r4, #2
 8002a7a:	7fd2      	ldrb	r2, [r2, #31]
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a80:	2900      	cmp	r1, #0
 8002a82:	d134      	bne.n	8002aee <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	0252      	lsls	r2, r2, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002a8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002a90:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002a92:	2901      	cmp	r1, #1
 8002a94:	d133      	bne.n	8002afe <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002a96:	4821      	ldr	r0, [pc, #132]	; (8002b1c <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002a98:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002a9a:	4002      	ands	r2, r0
 8002a9c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002a9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002aa0:	6918      	ldr	r0, [r3, #16]
 8002aa2:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8002aa4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002aa6:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002aa8:	4302      	orrs	r2, r0
 8002aaa:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002ab2:	2107      	movs	r1, #7
 8002ab4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002ab6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002ab8:	438a      	bics	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002ac4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002ac6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002aca:	4393      	bics	r3, r2
 8002acc:	001a      	movs	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002ad4:	e76d      	b.n	80029b2 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002ad6:	691d      	ldr	r5, [r3, #16]
 8002ad8:	4e11      	ldr	r6, [pc, #68]	; (8002b20 <HAL_ADC_Init+0x1b0>)
 8002ada:	00ad      	lsls	r5, r5, #2
 8002adc:	08ad      	lsrs	r5, r5, #2
 8002ade:	611d      	str	r5, [r3, #16]
 8002ae0:	6815      	ldr	r5, [r2, #0]
 8002ae2:	4035      	ands	r5, r6
 8002ae4:	6015      	str	r5, [r2, #0]
 8002ae6:	6815      	ldr	r5, [r2, #0]
 8002ae8:	4329      	orrs	r1, r5
 8002aea:	6011      	str	r1, [r2, #0]
 8002aec:	e783      	b.n	80029f6 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aee:	2120      	movs	r1, #32
 8002af0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002af2:	4301      	orrs	r1, r0
 8002af4:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002af8:	430a      	orrs	r2, r1
 8002afa:	65a2      	str	r2, [r4, #88]	; 0x58
 8002afc:	e7c7      	b.n	8002a8e <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002afe:	2101      	movs	r1, #1
 8002b00:	420a      	tst	r2, r1
 8002b02:	d0d6      	beq.n	8002ab2 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	438a      	bics	r2, r1
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	e7d2      	b.n	8002ab2 <HAL_ADC_Init+0x142>
 8002b0c:	fffffefd 	.word	0xfffffefd
 8002b10:	40012708 	.word	0x40012708
 8002b14:	fdffffff 	.word	0xfdffffff
 8002b18:	fffe0219 	.word	0xfffe0219
 8002b1c:	fffffc03 	.word	0xfffffc03
 8002b20:	ffc3ffff 	.word	0xffc3ffff

08002b24 <HAL_ADC_ConvCpltCallback>:
 8002b24:	4770      	bx	lr

08002b26 <HAL_ADC_LevelOutOfWindowCallback>:
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADC_ErrorCallback>:
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	6803      	ldr	r3, [r0, #0]
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002b32:	6819      	ldr	r1, [r3, #0]
{
 8002b34:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002b36:	4211      	tst	r1, r2
 8002b38:	d002      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x14>
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	4211      	tst	r1, r2
 8002b3e:	d106      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002b40:	2208      	movs	r2, #8
 8002b42:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002b44:	4211      	tst	r1, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x76>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	4211      	tst	r1, r2
 8002b4c:	d029      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x76>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002b50:	06d2      	lsls	r2, r2, #27
 8002b52:	d404      	bmi.n	8002b5e <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b5e:	22c0      	movs	r2, #192	; 0xc0
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	4211      	tst	r1, r2
 8002b66:	d113      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x64>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b68:	1c62      	adds	r2, r4, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b6a:	7fd2      	ldrb	r2, [r2, #31]
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	d10f      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x64>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	0712      	lsls	r2, r2, #28
 8002b74:	d50c      	bpl.n	8002b90 <HAL_ADC_IRQHandler+0x64>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	0752      	lsls	r2, r2, #29
 8002b7a:	d43f      	bmi.n	8002bfc <HAL_ADC_IRQHandler+0xd0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b7c:	210c      	movs	r1, #12
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	438a      	bics	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002b84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_ADC_IRQHandler+0xe4>)
 8002b88:	401a      	ands	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002b90:	0020      	movs	r0, r4
 8002b92:	f7ff ffc7 	bl	8002b24 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002b96:	69a3      	ldr	r3, [r4, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d002      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x76>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002ba2:	2580      	movs	r5, #128	; 0x80
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	422a      	tst	r2, r5
 8002baa:	d00c      	beq.n	8002bc6 <HAL_ADC_IRQHandler+0x9a>
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	422b      	tst	r3, r5
 8002bb0:	d009      	beq.n	8002bc6 <HAL_ADC_IRQHandler+0x9a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002bb6:	025b      	lsls	r3, r3, #9
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	f7ff ffb2 	bl	8002b26 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	4211      	tst	r1, r2
 8002bce:	d014      	beq.n	8002bfa <HAL_ADC_IRQHandler+0xce>
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	4211      	tst	r1, r2
 8002bd4:	d011      	beq.n	8002bfa <HAL_ADC_IRQHandler+0xce>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002bd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_ADC_IRQHandler+0xb6>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002bdc:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002bde:	07d2      	lsls	r2, r2, #31
 8002be0:	d508      	bpl.n	8002bf4 <HAL_ADC_IRQHandler+0xc8>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002be2:	2202      	movs	r2, #2
 8002be4:	6da1      	ldr	r1, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8002be6:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002be8:	430a      	orrs	r2, r1
 8002bea:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bec:	2210      	movs	r2, #16
 8002bee:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002bf0:	f7ff ff9a 	bl	8002b28 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002c00:	4313      	orrs	r3, r2
 8002c02:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c04:	2301      	movs	r3, #1
 8002c06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c0c:	e7c0      	b.n	8002b90 <HAL_ADC_IRQHandler+0x64>
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	fffffefe 	.word	0xfffffefe

08002c14 <HAL_ADC_ConfigChannel>:
{
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002c16:	0004      	movs	r4, r0
 8002c18:	3450      	adds	r4, #80	; 0x50
 8002c1a:	7822      	ldrb	r2, [r4, #0]
{
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8002c20:	2002      	movs	r0, #2
 8002c22:	2a01      	cmp	r2, #1
 8002c24:	d00b      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x2a>
 8002c26:	3801      	subs	r0, #1
 8002c28:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6891      	ldr	r1, [r2, #8]
 8002c2e:	0749      	lsls	r1, r1, #29
 8002c30:	d506      	bpl.n	8002c40 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c32:	2220      	movs	r2, #32
 8002c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c36:	430a      	orrs	r2, r1
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	7023      	strb	r3, [r4, #0]
}
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	6828      	ldr	r0, [r5, #0]
 8002c44:	4e19      	ldr	r6, [pc, #100]	; (8002cac <HAL_ADC_ConfigChannel+0x98>)
 8002c46:	686f      	ldr	r7, [r5, #4]
 8002c48:	0341      	lsls	r1, r0, #13
 8002c4a:	02db      	lsls	r3, r3, #11
 8002c4c:	0b49      	lsrs	r1, r1, #13
 8002c4e:	4003      	ands	r3, r0
 8002c50:	42b7      	cmp	r7, r6
 8002c52:	d019      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002c54:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002c56:	4301      	orrs	r1, r0
 8002c58:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_ADC_ConfigChannel+0x9c>)
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002c66:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002c6c:	f7ff fe6a 	bl	8002944 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	039b      	lsls	r3, r3, #14
 8002c74:	d505      	bpl.n	8002c82 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <HAL_ADC_ConfigChannel+0x9c>)
 8002c7a:	03db      	lsls	r3, r3, #15
 8002c7c:	6811      	ldr	r1, [r2, #0]
 8002c7e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002c80:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002c82:	2000      	movs	r0, #0
 8002c84:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002c86:	e7da      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002c88:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8002c8a:	438d      	bics	r5, r1
 8002c8c:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002c92:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <HAL_ADC_ConfigChannel+0x9c>)
 8002c94:	4907      	ldr	r1, [pc, #28]	; (8002cb4 <HAL_ADC_ConfigChannel+0xa0>)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	400b      	ands	r3, r1
 8002c9a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002c9c:	0383      	lsls	r3, r0, #14
 8002c9e:	d5f0      	bpl.n	8002c82 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002ca0:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <HAL_ADC_ConfigChannel+0x9c>)
 8002ca2:	4905      	ldr	r1, [pc, #20]	; (8002cb8 <HAL_ADC_ConfigChannel+0xa4>)
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	e7ea      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x6c>
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	00001001 	.word	0x00001001
 8002cb0:	40012708 	.word	0x40012708
 8002cb4:	ff7fffff 	.word	0xff7fffff
 8002cb8:	ffbfffff 	.word	0xffbfffff

08002cbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cbc:	b530      	push	{r4, r5, lr}
 8002cbe:	25ff      	movs	r5, #255	; 0xff
 8002cc0:	2403      	movs	r4, #3
 8002cc2:	002a      	movs	r2, r5
 8002cc4:	4004      	ands	r4, r0
 8002cc6:	00e4      	lsls	r4, r4, #3
 8002cc8:	40a2      	lsls	r2, r4
 8002cca:	0189      	lsls	r1, r1, #6
 8002ccc:	4029      	ands	r1, r5
 8002cce:	43d2      	mvns	r2, r2
 8002cd0:	40a1      	lsls	r1, r4
 8002cd2:	b2c3      	uxtb	r3, r0
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	da0b      	bge.n	8002cf0 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd8:	200f      	movs	r0, #15
 8002cda:	4003      	ands	r3, r0
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	480a      	ldr	r0, [pc, #40]	; (8002d08 <HAL_NVIC_SetPriority+0x4c>)
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	181b      	adds	r3, r3, r0
 8002ce6:	69d8      	ldr	r0, [r3, #28]
 8002ce8:	4002      	ands	r2, r0
 8002cea:	4311      	orrs	r1, r2
 8002cec:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002cee:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_NVIC_SetPriority+0x50>)
 8002cf2:	0880      	lsrs	r0, r0, #2
 8002cf4:	0080      	lsls	r0, r0, #2
 8002cf6:	18c0      	adds	r0, r0, r3
 8002cf8:	23c0      	movs	r3, #192	; 0xc0
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	58c4      	ldr	r4, [r0, r3]
 8002cfe:	4022      	ands	r2, r4
 8002d00:	4311      	orrs	r1, r2
 8002d02:	50c1      	str	r1, [r0, r3]
 8002d04:	e7f3      	b.n	8002cee <HAL_NVIC_SetPriority+0x32>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d10:	231f      	movs	r3, #31
 8002d12:	4018      	ands	r0, r3
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	4083      	lsls	r3, r0
 8002d18:	4a01      	ldr	r2, [pc, #4]	; (8002d20 <HAL_NVIC_EnableIRQ+0x10>)
 8002d1a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d1c:	4770      	bx	lr
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d24:	231f      	movs	r3, #31
 8002d26:	4018      	ands	r0, r3
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	4083      	lsls	r3, r0
 8002d2c:	4a01      	ldr	r2, [pc, #4]	; (8002d34 <HAL_NVIC_DisableIRQ+0x10>)
 8002d2e:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002d30:	4770      	bx	lr
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	e000e104 	.word	0xe000e104

08002d38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	1e43      	subs	r3, r0, #1
 8002d3c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d20d      	bcs.n	8002d60 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d44:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d48:	4807      	ldr	r0, [pc, #28]	; (8002d68 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d4c:	6a03      	ldr	r3, [r0, #32]
 8002d4e:	0609      	lsls	r1, r1, #24
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d5c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d60:	4770      	bx	lr
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	e000e010 	.word	0xe000e010
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
  if(hdma == NULL)
 8002d72:	2c00      	cmp	r4, #0
 8002d74:	d035      	beq.n	8002de2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d76:	6825      	ldr	r5, [r4, #0]
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_DMA_Init+0x78>)
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	18e8      	adds	r0, r5, r3
 8002d7e:	f7fd ffbd 	bl	8000cfc <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d84:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002d86:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d8c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d8e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d90:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d94:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d96:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002d98:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002d9c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	433b      	orrs	r3, r7
 8002da0:	6967      	ldr	r7, [r4, #20]
 8002da2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	69a7      	ldr	r7, [r4, #24]
 8002da6:	433b      	orrs	r3, r7
 8002da8:	69e7      	ldr	r7, [r4, #28]
 8002daa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	6a27      	ldr	r7, [r4, #32]
 8002dae:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002db0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002db2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	01db      	lsls	r3, r3, #7
 8002db8:	4299      	cmp	r1, r3
 8002dba:	d00c      	beq.n	8002dd6 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dbc:	251c      	movs	r5, #28
 8002dbe:	4028      	ands	r0, r5
 8002dc0:	3d0d      	subs	r5, #13
 8002dc2:	4085      	lsls	r5, r0
 8002dc4:	490a      	ldr	r1, [pc, #40]	; (8002df0 <HAL_DMA_Init+0x84>)
 8002dc6:	680b      	ldr	r3, [r1, #0]
 8002dc8:	43ab      	bics	r3, r5
 8002dca:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dcc:	6863      	ldr	r3, [r4, #4]
 8002dce:	680d      	ldr	r5, [r1, #0]
 8002dd0:	4083      	lsls	r3, r0
 8002dd2:	432b      	orrs	r3, r5
 8002dd4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002dd8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dda:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ddc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002dde:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002de0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de4:	bffdfff8 	.word	0xbffdfff8
 8002de8:	40020000 	.word	0x40020000
 8002dec:	ffff800f 	.word	0xffff800f
 8002df0:	400200a8 	.word	0x400200a8

08002df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002df6:	1d45      	adds	r5, r0, #5
{
 8002df8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002dfa:	7feb      	ldrb	r3, [r5, #31]
{
 8002dfc:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002dfe:	2002      	movs	r0, #2
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d029      	beq.n	8002e58 <HAL_DMA_Start_IT+0x64>
 8002e04:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e06:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002e08:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	469c      	mov	ip, r3
 8002e10:	4660      	mov	r0, ip
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2801      	cmp	r0, #1
 8002e16:	d12a      	bne.n	8002e6e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	3001      	adds	r0, #1
 8002e1a:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1e:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e20:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8002e22:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e24:	361c      	adds	r6, #28
 8002e26:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8002e28:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e2a:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8002e2c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e2e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002e30:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e32:	9b01      	ldr	r3, [sp, #4]
 8002e34:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68a3      	ldr	r3, [r4, #8]
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d10e      	bne.n	8002e5a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e3c:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e3e:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002e40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e46:	230e      	movs	r3, #14
 8002e48:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e4e:	2301      	movs	r3, #1
 8002e50:	6802      	ldr	r2, [r0, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2000      	movs	r0, #0
}
 8002e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e5a:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002e5c:	60c2      	str	r2, [r0, #12]
 8002e5e:	e7ef      	b.n	8002e40 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e60:	2204      	movs	r2, #4
 8002e62:	6803      	ldr	r3, [r0, #0]
 8002e64:	4393      	bics	r3, r2
 8002e66:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e68:	6802      	ldr	r2, [r0, #0]
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	e7ed      	b.n	8002e4a <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8002e6e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8002e70:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8002e72:	e7f1      	b.n	8002e58 <HAL_DMA_Start_IT+0x64>

08002e74 <HAL_DMA_IRQHandler>:
{
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e76:	221c      	movs	r2, #28
 8002e78:	2704      	movs	r7, #4
 8002e7a:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e7e:	4032      	ands	r2, r6
 8002e80:	003e      	movs	r6, r7
 8002e82:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e84:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e86:	6803      	ldr	r3, [r0, #0]
 8002e88:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e8a:	4235      	tst	r5, r6
 8002e8c:	d00d      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x36>
 8002e8e:	423c      	tst	r4, r7
 8002e90:	d00b      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	0692      	lsls	r2, r2, #26
 8002e96:	d402      	bmi.n	8002e9e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	43ba      	bics	r2, r7
 8002e9c:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002e9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002ea0:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d019      	beq.n	8002eda <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002ea6:	4798      	blx	r3
  return;
 8002ea8:	e017      	b.n	8002eda <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002eaa:	2702      	movs	r7, #2
 8002eac:	003e      	movs	r6, r7
 8002eae:	4096      	lsls	r6, r2
 8002eb0:	4235      	tst	r5, r6
 8002eb2:	d013      	beq.n	8002edc <HAL_DMA_IRQHandler+0x68>
 8002eb4:	423c      	tst	r4, r7
 8002eb6:	d011      	beq.n	8002edc <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	0692      	lsls	r2, r2, #26
 8002ebc:	d406      	bmi.n	8002ecc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ebe:	240a      	movs	r4, #10
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	43a2      	bics	r2, r4
 8002ec4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	1d83      	adds	r3, r0, #6
 8002eca:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ed0:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002ed2:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8002ed4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d1e5      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x32>
}
 8002eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002edc:	2608      	movs	r6, #8
 8002ede:	0037      	movs	r7, r6
 8002ee0:	4097      	lsls	r7, r2
 8002ee2:	423d      	tst	r5, r7
 8002ee4:	d0f9      	beq.n	8002eda <HAL_DMA_IRQHandler+0x66>
 8002ee6:	4234      	tst	r4, r6
 8002ee8:	d0f7      	beq.n	8002eda <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eea:	250e      	movs	r5, #14
 8002eec:	681c      	ldr	r4, [r3, #0]
 8002eee:	43ac      	bics	r4, r5
 8002ef0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	001c      	movs	r4, r3
 8002ef6:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8002ef8:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002efa:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002efc:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002efe:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002f00:	2200      	movs	r2, #0
 8002f02:	1d43      	adds	r3, r0, #5
 8002f04:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002f06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f08:	e7e5      	b.n	8002ed6 <HAL_DMA_IRQHandler+0x62>
	...

08002f0c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <FLASH_SetErrorCode+0xa4>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	6990      	ldr	r0, [r2, #24]
 8002f12:	0049      	lsls	r1, r1, #1
 8002f14:	0003      	movs	r3, r0
{
 8002f16:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f18:	400b      	ands	r3, r1
 8002f1a:	4208      	tst	r0, r1
 8002f1c:	d005      	beq.n	8002f2a <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	4824      	ldr	r0, [pc, #144]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
 8002f22:	6944      	ldr	r4, [r0, #20]
 8002f24:	4323      	orrs	r3, r4
 8002f26:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002f28:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002f2a:	2080      	movs	r0, #128	; 0x80
 8002f2c:	6991      	ldr	r1, [r2, #24]
 8002f2e:	0080      	lsls	r0, r0, #2
 8002f30:	4201      	tst	r1, r0
 8002f32:	d005      	beq.n	8002f40 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f34:	2101      	movs	r1, #1
 8002f36:	4c1f      	ldr	r4, [pc, #124]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8002f38:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f3a:	6965      	ldr	r5, [r4, #20]
 8002f3c:	4329      	orrs	r1, r5
 8002f3e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	6991      	ldr	r1, [r2, #24]
 8002f44:	00c0      	lsls	r0, r0, #3
 8002f46:	4201      	tst	r1, r0
 8002f48:	d005      	beq.n	8002f56 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002f4a:	2108      	movs	r1, #8
 8002f4c:	4c19      	ldr	r4, [pc, #100]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8002f4e:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002f50:	6965      	ldr	r5, [r4, #20]
 8002f52:	4329      	orrs	r1, r5
 8002f54:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f56:	2080      	movs	r0, #128	; 0x80
 8002f58:	6991      	ldr	r1, [r2, #24]
 8002f5a:	0100      	lsls	r0, r0, #4
 8002f5c:	4201      	tst	r1, r0
 8002f5e:	d005      	beq.n	8002f6c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f60:	2104      	movs	r1, #4
 8002f62:	4c14      	ldr	r4, [pc, #80]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8002f64:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f66:	6965      	ldr	r5, [r4, #20]
 8002f68:	4329      	orrs	r1, r5
 8002f6a:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002f6c:	2080      	movs	r0, #128	; 0x80
 8002f6e:	6991      	ldr	r1, [r2, #24]
 8002f70:	0180      	lsls	r0, r0, #6
 8002f72:	4201      	tst	r1, r0
 8002f74:	d005      	beq.n	8002f82 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002f76:	2110      	movs	r1, #16
 8002f78:	4c0e      	ldr	r4, [pc, #56]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 8002f7a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002f7c:	6965      	ldr	r5, [r4, #20]
 8002f7e:	4329      	orrs	r1, r5
 8002f80:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8002f82:	6991      	ldr	r1, [r2, #24]
 8002f84:	0389      	lsls	r1, r1, #14
 8002f86:	d505      	bpl.n	8002f94 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8002f88:	2020      	movs	r0, #32
 8002f8a:	4c0a      	ldr	r4, [pc, #40]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8002f8c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8002f8e:	6961      	ldr	r1, [r4, #20]
 8002f90:	4301      	orrs	r1, r0
 8002f92:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8002f94:	2080      	movs	r0, #128	; 0x80
 8002f96:	6991      	ldr	r1, [r2, #24]
 8002f98:	0240      	lsls	r0, r0, #9
 8002f9a:	4201      	tst	r1, r0
 8002f9c:	d005      	beq.n	8002faa <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	4c04      	ldr	r4, [pc, #16]	; (8002fb4 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8002fa2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8002fa4:	6965      	ldr	r5, [r4, #20]
 8002fa6:	4329      	orrs	r1, r5
 8002fa8:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002faa:	6193      	str	r3, [r2, #24]
}  
 8002fac:	bd30      	pop	{r4, r5, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	200006d4 	.word	0x200006d4

08002fb8 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <HAL_FLASH_GetError+0x8>)
 8002fba:	6958      	ldr	r0, [r3, #20]
}
 8002fbc:	4770      	bx	lr
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	200006d4 	.word	0x200006d4

08002fc4 <FLASH_WaitForLastOperation>:
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff fca6 	bl	8002918 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002fcc:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8002fce:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <FLASH_WaitForLastOperation+0x74>)
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	6991      	ldr	r1, [r2, #24]
 8002fd6:	4231      	tst	r1, r6
 8002fd8:	d121      	bne.n	800301e <FLASH_WaitForLastOperation+0x5a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002fda:	2102      	movs	r1, #2
 8002fdc:	6990      	ldr	r0, [r2, #24]
 8002fde:	4208      	tst	r0, r1
 8002fe0:	d000      	beq.n	8002fe4 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002fe2:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	05d2      	lsls	r2, r2, #23
 8002fe8:	d415      	bmi.n	8003016 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002fea:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002fec:	0592      	lsls	r2, r2, #22
 8002fee:	d412      	bmi.n	8003016 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002ff0:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002ff2:	0552      	lsls	r2, r2, #21
 8002ff4:	d40f      	bmi.n	8003016 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002ff6:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002ff8:	0512      	lsls	r2, r2, #20
 8002ffa:	d40c      	bmi.n	8003016 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002ffc:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002ffe:	0492      	lsls	r2, r2, #18
 8003000:	d409      	bmi.n	8003016 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003002:	6999      	ldr	r1, [r3, #24]
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	0008      	movs	r0, r1
 8003008:	0292      	lsls	r2, r2, #10
 800300a:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800300c:	4211      	tst	r1, r2
 800300e:	d102      	bne.n	8003016 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003010:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003012:	03db      	lsls	r3, r3, #15
 8003014:	d508      	bpl.n	8003028 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8003016:	f7ff ff79 	bl	8002f0c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800301a:	2001      	movs	r0, #1
 800301c:	e004      	b.n	8003028 <FLASH_WaitForLastOperation+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800301e:	1c61      	adds	r1, r4, #1
 8003020:	d0d8      	beq.n	8002fd4 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003022:	2c00      	cmp	r4, #0
 8003024:	d101      	bne.n	800302a <FLASH_WaitForLastOperation+0x66>
        return HAL_TIMEOUT;
 8003026:	2003      	movs	r0, #3
}
 8003028:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800302a:	f7ff fc75 	bl	8002918 <HAL_GetTick>
 800302e:	1b40      	subs	r0, r0, r5
 8003030:	42a0      	cmp	r0, r4
 8003032:	d9cd      	bls.n	8002fd0 <FLASH_WaitForLastOperation+0xc>
 8003034:	e7f7      	b.n	8003026 <FLASH_WaitForLastOperation+0x62>
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40022000 	.word	0x40022000

0800303c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800303c:	2201      	movs	r2, #1
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003040:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	4211      	tst	r1, r2
 8003046:	d00a      	beq.n	800305e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003048:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003050:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003054:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003056:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800305a:	6858      	ldr	r0, [r3, #4]
 800305c:	4010      	ands	r0, r2
}
 800305e:	4770      	bx	lr
 8003060:	40022000 	.word	0x40022000
 8003064:	89abcdef 	.word	0x89abcdef
 8003068:	02030405 	.word	0x02030405

0800306c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800306c:	2301      	movs	r3, #1
 800306e:	4a03      	ldr	r2, [pc, #12]	; (800307c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003070:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003072:	6851      	ldr	r1, [r2, #4]
 8003074:	430b      	orrs	r3, r1
 8003076:	6053      	str	r3, [r2, #4]
}
 8003078:	4770      	bx	lr
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40022000 	.word	0x40022000

08003080 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8003080:	b510      	push	{r4, lr}
 8003082:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 8003086:	f7ff ff9d 	bl	8002fc4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800308a:	2800      	cmp	r0, #0
 800308c:	d105      	bne.n	800309a <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 8003090:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8003092:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 8003096:	f7ff ff95 	bl	8002fc4 <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800309a:	bd10      	pop	{r4, pc}
 800309c:	0000c350 	.word	0x0000c350
 80030a0:	200006d4 	.word	0x200006d4

080030a4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030a6:	4f12      	ldr	r7, [pc, #72]	; (80030f0 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 80030a8:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80030aa:	7c3b      	ldrb	r3, [r7, #16]
{
 80030ac:	000d      	movs	r5, r1
 80030ae:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 80030b0:	2002      	movs	r0, #2
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d00c      	beq.n	80030d0 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 80030b6:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030b8:	480e      	ldr	r0, [pc, #56]	; (80030f4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 80030ba:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030bc:	f7ff ff82 	bl	8002fc4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d103      	bne.n	80030cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030c4:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80030c6:	2e02      	cmp	r6, #2
 80030c8:	d103      	bne.n	80030d2 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80030ca:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030cc:	2300      	movs	r3, #0
 80030ce:	743b      	strb	r3, [r7, #16]

  return status;
}
 80030d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80030d2:	2e01      	cmp	r6, #1
 80030d4:	d102      	bne.n	80030dc <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80030d6:	b2a4      	uxth	r4, r4
 80030d8:	802c      	strh	r4, [r5, #0]
 80030da:	e7f7      	b.n	80030cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80030dc:	2e00      	cmp	r6, #0
 80030de:	d003      	beq.n	80030e8 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030e0:	4804      	ldr	r0, [pc, #16]	; (80030f4 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80030e2:	f7ff ff6f 	bl	8002fc4 <FLASH_WaitForLastOperation>
 80030e6:	e7f1      	b.n	80030cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80030e8:	b2e4      	uxtb	r4, r4
 80030ea:	702c      	strb	r4, [r5, #0]
 80030ec:	e7ee      	b.n	80030cc <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	200006d4 	.word	0x200006d4
 80030f4:	0000c350 	.word	0x0000c350

080030f8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80030f8:	4a54      	ldr	r2, [pc, #336]	; (800324c <HAL_GPIO_Init+0x154>)
{
 80030fa:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80030fc:	1882      	adds	r2, r0, r2
 80030fe:	1e54      	subs	r4, r2, #1
 8003100:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003102:	2300      	movs	r3, #0
{
 8003104:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003106:	3205      	adds	r2, #5
 8003108:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800310a:	680a      	ldr	r2, [r1, #0]
 800310c:	0014      	movs	r4, r2
 800310e:	40dc      	lsrs	r4, r3
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003112:	b005      	add	sp, #20
 8003114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003116:	2501      	movs	r5, #1
 8003118:	0014      	movs	r4, r2
 800311a:	409d      	lsls	r5, r3
 800311c:	402c      	ands	r4, r5
 800311e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8003120:	422a      	tst	r2, r5
 8003122:	d100      	bne.n	8003126 <HAL_GPIO_Init+0x2e>
 8003124:	e08f      	b.n	8003246 <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003126:	684a      	ldr	r2, [r1, #4]
 8003128:	9200      	str	r2, [sp, #0]
 800312a:	2210      	movs	r2, #16
 800312c:	9e00      	ldr	r6, [sp, #0]
 800312e:	4396      	bics	r6, r2
 8003130:	2e02      	cmp	r6, #2
 8003132:	d10f      	bne.n	8003154 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8003134:	08da      	lsrs	r2, r3, #3
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003136:	2407      	movs	r4, #7
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800313c:	6a17      	ldr	r7, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800313e:	9202      	str	r2, [sp, #8]
 8003140:	220f      	movs	r2, #15
 8003142:	401c      	ands	r4, r3
 8003144:	00a4      	lsls	r4, r4, #2
 8003146:	40a2      	lsls	r2, r4
 8003148:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800314a:	690a      	ldr	r2, [r1, #16]
 800314c:	40a2      	lsls	r2, r4
 800314e:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8003150:	9a02      	ldr	r2, [sp, #8]
 8003152:	6217      	str	r7, [r2, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003154:	2203      	movs	r2, #3
 8003156:	005c      	lsls	r4, r3, #1
 8003158:	40a2      	lsls	r2, r4
 800315a:	3e01      	subs	r6, #1
 800315c:	43d2      	mvns	r2, r2
 800315e:	2e01      	cmp	r6, #1
 8003160:	d80d      	bhi.n	800317e <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003162:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8003164:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003166:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003168:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800316c:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 800316e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003172:	9d00      	ldr	r5, [sp, #0]
 8003174:	06ed      	lsls	r5, r5, #27
 8003176:	0fed      	lsrs	r5, r5, #31
 8003178:	409d      	lsls	r5, r3
 800317a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800317c:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800317e:	2503      	movs	r5, #3
 8003180:	9e00      	ldr	r6, [sp, #0]
      temp = GPIOx->MODER;
 8003182:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003184:	402e      	ands	r6, r5
 8003186:	40a6      	lsls	r6, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003188:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800318c:	6006      	str	r6, [r0, #0]
      temp = GPIOx->PUPDR;
 800318e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003190:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003192:	688e      	ldr	r6, [r1, #8]
 8003194:	40a6      	lsls	r6, r4
 8003196:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003198:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800319a:	9a00      	ldr	r2, [sp, #0]
 800319c:	00d2      	lsls	r2, r2, #3
 800319e:	d552      	bpl.n	8003246 <HAL_GPIO_Init+0x14e>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80031a0:	001e      	movs	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	2701      	movs	r7, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80031a4:	402e      	ands	r6, r5
 80031a6:	00b6      	lsls	r6, r6, #2
 80031a8:	46b4      	mov	ip, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	4c29      	ldr	r4, [pc, #164]	; (8003250 <HAL_GPIO_Init+0x158>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80031ac:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80031b0:	433a      	orrs	r2, r7
 80031b2:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <HAL_GPIO_Init+0x15c>)
 80031b6:	089c      	lsrs	r4, r3, #2
 80031b8:	00a4      	lsls	r4, r4, #2
 80031ba:	18a4      	adds	r4, r4, r2
 80031bc:	68a2      	ldr	r2, [r4, #8]
 80031be:	9202      	str	r2, [sp, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80031c0:	4662      	mov	r2, ip
 80031c2:	4096      	lsls	r6, r2
 80031c4:	9a02      	ldr	r2, [sp, #8]
 80031c6:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031c8:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80031ca:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031cc:	05f6      	lsls	r6, r6, #23
 80031ce:	2200      	movs	r2, #0
 80031d0:	42b0      	cmp	r0, r6
 80031d2:	d00c      	beq.n	80031ee <HAL_GPIO_Init+0xf6>
 80031d4:	4e20      	ldr	r6, [pc, #128]	; (8003258 <HAL_GPIO_Init+0x160>)
 80031d6:	003a      	movs	r2, r7
 80031d8:	42b0      	cmp	r0, r6
 80031da:	d008      	beq.n	80031ee <HAL_GPIO_Init+0xf6>
 80031dc:	4e1f      	ldr	r6, [pc, #124]	; (800325c <HAL_GPIO_Init+0x164>)
 80031de:	19fa      	adds	r2, r7, r7
 80031e0:	42b0      	cmp	r0, r6
 80031e2:	d004      	beq.n	80031ee <HAL_GPIO_Init+0xf6>
 80031e4:	4e1e      	ldr	r6, [pc, #120]	; (8003260 <HAL_GPIO_Init+0x168>)
 80031e6:	002a      	movs	r2, r5
 80031e8:	42b0      	cmp	r0, r6
 80031ea:	d000      	beq.n	80031ee <HAL_GPIO_Init+0xf6>
 80031ec:	9a03      	ldr	r2, [sp, #12]
 80031ee:	4665      	mov	r5, ip
 80031f0:	40aa      	lsls	r2, r5
 80031f2:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f4:	9f00      	ldr	r7, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031f6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <HAL_GPIO_Init+0x16c>)
        temp &= ~((uint32_t)iocurrent);
 80031fc:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 80031fe:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003200:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8003202:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003204:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003206:	03ff      	lsls	r7, r7, #15
 8003208:	d401      	bmi.n	800320e <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 800320a:	0035      	movs	r5, r6
 800320c:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800320e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003210:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003212:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003214:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003216:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003218:	03bf      	lsls	r7, r7, #14
 800321a:	d401      	bmi.n	8003220 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 800321c:	0035      	movs	r5, r6
 800321e:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003220:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003222:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003224:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003226:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003228:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322a:	02ff      	lsls	r7, r7, #11
 800322c:	d401      	bmi.n	8003232 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800322e:	0035      	movs	r5, r6
 8003230:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003232:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003234:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003236:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003238:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800323a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323c:	02bf      	lsls	r7, r7, #10
 800323e:	d401      	bmi.n	8003244 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003240:	4025      	ands	r5, r4
 8003242:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003244:	60d6      	str	r6, [r2, #12]
    position++;
 8003246:	3301      	adds	r3, #1
 8003248:	e75f      	b.n	800310a <HAL_GPIO_Init+0x12>
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	afffe400 	.word	0xafffe400
 8003250:	40021000 	.word	0x40021000
 8003254:	40010000 	.word	0x40010000
 8003258:	50000400 	.word	0x50000400
 800325c:	50000800 	.word	0x50000800
 8003260:	50000c00 	.word	0x50000c00
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003268:	6900      	ldr	r0, [r0, #16]
 800326a:	4008      	ands	r0, r1
 800326c:	1e41      	subs	r1, r0, #1
 800326e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003270:	b2c0      	uxtb	r0, r0
}
 8003272:	4770      	bx	lr

08003274 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003274:	2a00      	cmp	r2, #0
 8003276:	d001      	beq.n	800327c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003278:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800327a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800327c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800327e:	e7fc      	b.n	800327a <HAL_GPIO_WritePin+0x6>

08003280 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003282:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	4210      	tst	r0, r2
 8003288:	d002      	beq.n	8003290 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800328a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800328c:	f7fe faf0 	bl	8001870 <HAL_GPIO_EXTI_Callback>
  }
}
 8003290:	bd10      	pop	{r4, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40010400 	.word	0x40010400

08003298 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <HAL_PWR_EnableBkUpAccess+0x10>)
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	6811      	ldr	r1, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	4770      	bx	lr
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	40007000 	.word	0x40007000

080032ac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80032b0:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80032b2:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80032b4:	400a      	ands	r2, r1
 80032b6:	2a08      	cmp	r2, #8
 80032b8:	d029      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x62>
 80032ba:	2a0c      	cmp	r2, #12
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x26>
 80032be:	2a04      	cmp	r2, #4
 80032c0:	d11d      	bne.n	80032fe <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032c2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032c6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80032c8:	17c0      	asrs	r0, r0, #31
 80032ca:	4018      	ands	r0, r3
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_GetSysClockFreq+0x70>)
 80032ce:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80032d0:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032d2:	4813      	ldr	r0, [pc, #76]	; (8003320 <HAL_RCC_GetSysClockFreq+0x74>)
 80032d4:	028a      	lsls	r2, r1, #10
 80032d6:	0f12      	lsrs	r2, r2, #28
 80032d8:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032da:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032dc:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80032de:	0f89      	lsrs	r1, r1, #30
 80032e0:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e2:	03c0      	lsls	r0, r0, #15
 80032e4:	d504      	bpl.n	80032f0 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 80032e6:	480f      	ldr	r0, [pc, #60]	; (8003324 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 80032e8:	4350      	muls	r0, r2
 80032ea:	f7fd fd07 	bl	8000cfc <__udivsi3>
 80032ee:	e7ef      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	06db      	lsls	r3, r3, #27
 80032f4:	d501      	bpl.n	80032fa <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80032f6:	480c      	ldr	r0, [pc, #48]	; (8003328 <HAL_RCC_GetSysClockFreq+0x7c>)
 80032f8:	e7f6      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 80032fa:	4808      	ldr	r0, [pc, #32]	; (800331c <HAL_RCC_GetSysClockFreq+0x70>)
 80032fc:	e7f4      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032fe:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003300:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003302:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003308:	3301      	adds	r3, #1
 800330a:	4098      	lsls	r0, r3
  return sysclockfreq;
 800330c:	e7e0      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800330e:	4805      	ldr	r0, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x78>)
 8003310:	e7de      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x24>
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	40021000 	.word	0x40021000
 8003318:	ff48e500 	.word	0xff48e500
 800331c:	00f42400 	.word	0x00f42400
 8003320:	0800681a 	.word	0x0800681a
 8003324:	007a1200 	.word	0x007a1200
 8003328:	003d0900 	.word	0x003d0900

0800332c <HAL_RCC_OscConfig>:
{
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	0005      	movs	r5, r0
 8003330:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003332:	2800      	cmp	r0, #0
 8003334:	d058      	beq.n	80033e8 <HAL_RCC_OscConfig+0xbc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003336:	230c      	movs	r3, #12
 8003338:	4cbe      	ldr	r4, [pc, #760]	; (8003634 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003340:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	025b      	lsls	r3, r3, #9
 8003346:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003348:	07d2      	lsls	r2, r2, #31
 800334a:	d441      	bmi.n	80033d0 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	079b      	lsls	r3, r3, #30
 8003350:	d500      	bpl.n	8003354 <HAL_RCC_OscConfig+0x28>
 8003352:	e08a      	b.n	800346a <HAL_RCC_OscConfig+0x13e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	06db      	lsls	r3, r3, #27
 8003358:	d528      	bpl.n	80033ac <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800335a:	2e00      	cmp	r6, #0
 800335c:	d000      	beq.n	8003360 <HAL_RCC_OscConfig+0x34>
 800335e:	e0da      	b.n	8003516 <HAL_RCC_OscConfig+0x1ea>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	059b      	lsls	r3, r3, #22
 8003364:	d502      	bpl.n	800336c <HAL_RCC_OscConfig+0x40>
 8003366:	69eb      	ldr	r3, [r5, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03d      	beq.n	80033e8 <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336c:	6862      	ldr	r2, [r4, #4]
 800336e:	49b2      	ldr	r1, [pc, #712]	; (8003638 <HAL_RCC_OscConfig+0x30c>)
 8003370:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003372:	400a      	ands	r2, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003378:	6861      	ldr	r1, [r4, #4]
 800337a:	6a2a      	ldr	r2, [r5, #32]
 800337c:	0209      	lsls	r1, r1, #8
 800337e:	0a09      	lsrs	r1, r1, #8
 8003380:	0612      	lsls	r2, r2, #24
 8003382:	430a      	orrs	r2, r1
 8003384:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0b5b      	lsrs	r3, r3, #13
 800338a:	3301      	adds	r3, #1
 800338c:	0212      	lsls	r2, r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003392:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003394:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003396:	060a      	lsls	r2, r1, #24
 8003398:	49a8      	ldr	r1, [pc, #672]	; (800363c <HAL_RCC_OscConfig+0x310>)
 800339a:	0f12      	lsrs	r2, r2, #28
 800339c:	5c8a      	ldrb	r2, [r1, r2]
 800339e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033a0:	4aa7      	ldr	r2, [pc, #668]	; (8003640 <HAL_RCC_OscConfig+0x314>)
 80033a2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80033a4:	f7ff fa84 	bl	80028b0 <HAL_InitTick>
        if(status != HAL_OK)
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d134      	bne.n	8003416 <HAL_RCC_OscConfig+0xea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	071b      	lsls	r3, r3, #28
 80033b0:	d500      	bpl.n	80033b4 <HAL_RCC_OscConfig+0x88>
 80033b2:	e0e7      	b.n	8003584 <HAL_RCC_OscConfig+0x258>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	075b      	lsls	r3, r3, #29
 80033b8:	d500      	bpl.n	80033bc <HAL_RCC_OscConfig+0x90>
 80033ba:	e109      	b.n	80035d0 <HAL_RCC_OscConfig+0x2a4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	d500      	bpl.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033c2:	e18e      	b.n	80036e2 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d000      	beq.n	80033cc <HAL_RCC_OscConfig+0xa0>
 80033ca:	e1bd      	b.n	8003748 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 80033cc:	2000      	movs	r0, #0
 80033ce:	e022      	b.n	8003416 <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	2e08      	cmp	r6, #8
 80033d2:	d003      	beq.n	80033dc <HAL_RCC_OscConfig+0xb0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d4:	2e0c      	cmp	r6, #12
 80033d6:	d109      	bne.n	80033ec <HAL_RCC_OscConfig+0xc0>
 80033d8:	2f00      	cmp	r7, #0
 80033da:	d007      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	039b      	lsls	r3, r3, #14
 80033e0:	d5b4      	bpl.n	800334c <HAL_RCC_OscConfig+0x20>
 80033e2:	686b      	ldr	r3, [r5, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1b1      	bne.n	800334c <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ec:	686a      	ldr	r2, [r5, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d113      	bne.n	800341a <HAL_RCC_OscConfig+0xee>
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80033f8:	f7ff fa8e 	bl	8002918 <HAL_GetTick>
 80033fc:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	0292      	lsls	r2, r2, #10
 8003404:	4213      	tst	r3, r2
 8003406:	d1a1      	bne.n	800334c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7ff fa86 	bl	8002918 <HAL_GetTick>
 800340c:	9b01      	ldr	r3, [sp, #4]
 800340e:	1ac0      	subs	r0, r0, r3
 8003410:	2864      	cmp	r0, #100	; 0x64
 8003412:	d9f4      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8003414:	2003      	movs	r0, #3
}
 8003416:	b007      	add	sp, #28
 8003418:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341a:	21a0      	movs	r1, #160	; 0xa0
 800341c:	02c9      	lsls	r1, r1, #11
 800341e:	428a      	cmp	r2, r1
 8003420:	d105      	bne.n	800342e <HAL_RCC_OscConfig+0x102>
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	6821      	ldr	r1, [r4, #0]
 8003426:	02d2      	lsls	r2, r2, #11
 8003428:	430a      	orrs	r2, r1
 800342a:	6022      	str	r2, [r4, #0]
 800342c:	e7e1      	b.n	80033f2 <HAL_RCC_OscConfig+0xc6>
 800342e:	6821      	ldr	r1, [r4, #0]
 8003430:	4884      	ldr	r0, [pc, #528]	; (8003644 <HAL_RCC_OscConfig+0x318>)
 8003432:	4001      	ands	r1, r0
 8003434:	6021      	str	r1, [r4, #0]
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	400b      	ands	r3, r1
 800343a:	9305      	str	r3, [sp, #20]
 800343c:	9b05      	ldr	r3, [sp, #20]
 800343e:	4982      	ldr	r1, [pc, #520]	; (8003648 <HAL_RCC_OscConfig+0x31c>)
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	400b      	ands	r3, r1
 8003444:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003446:	2a00      	cmp	r2, #0
 8003448:	d1d6      	bne.n	80033f8 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800344a:	f7ff fa65 	bl	8002918 <HAL_GetTick>
 800344e:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	0292      	lsls	r2, r2, #10
 8003456:	4213      	tst	r3, r2
 8003458:	d100      	bne.n	800345c <HAL_RCC_OscConfig+0x130>
 800345a:	e777      	b.n	800334c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7ff fa5c 	bl	8002918 <HAL_GetTick>
 8003460:	9b01      	ldr	r3, [sp, #4]
 8003462:	1ac0      	subs	r0, r0, r3
 8003464:	2864      	cmp	r0, #100	; 0x64
 8003466:	d9f3      	bls.n	8003450 <HAL_RCC_OscConfig+0x124>
 8003468:	e7d4      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
    hsi_state = RCC_OscInitStruct->HSIState;
 800346a:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346c:	2e04      	cmp	r6, #4
 800346e:	d003      	beq.n	8003478 <HAL_RCC_OscConfig+0x14c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003470:	2e0c      	cmp	r6, #12
 8003472:	d123      	bne.n	80034bc <HAL_RCC_OscConfig+0x190>
 8003474:	2f00      	cmp	r7, #0
 8003476:	d121      	bne.n	80034bc <HAL_RCC_OscConfig+0x190>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	075b      	lsls	r3, r3, #29
 800347c:	d501      	bpl.n	8003482 <HAL_RCC_OscConfig+0x156>
 800347e:	2a00      	cmp	r2, #0
 8003480:	d0b2      	beq.n	80033e8 <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	6861      	ldr	r1, [r4, #4]
 8003484:	692b      	ldr	r3, [r5, #16]
 8003486:	4871      	ldr	r0, [pc, #452]	; (800364c <HAL_RCC_OscConfig+0x320>)
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	4001      	ands	r1, r0
 800348c:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800348e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	438b      	bics	r3, r1
 8003496:	4313      	orrs	r3, r2
 8003498:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f7ff ff07 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800349e:	68e3      	ldr	r3, [r4, #12]
 80034a0:	4a66      	ldr	r2, [pc, #408]	; (800363c <HAL_RCC_OscConfig+0x310>)
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	0f1b      	lsrs	r3, r3, #28
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	40d8      	lsrs	r0, r3
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x314>)
 80034ac:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7ff f9fe 	bl	80028b0 <HAL_InitTick>
      if(status != HAL_OK)
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d100      	bne.n	80034ba <HAL_RCC_OscConfig+0x18e>
 80034b8:	e74c      	b.n	8003354 <HAL_RCC_OscConfig+0x28>
 80034ba:	e7ac      	b.n	8003416 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034bc:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80034be:	2a00      	cmp	r2, #0
 80034c0:	d018      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034c2:	2109      	movs	r1, #9
 80034c4:	438b      	bics	r3, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80034ca:	f7ff fa25 	bl	8002918 <HAL_GetTick>
 80034ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d0:	2204      	movs	r2, #4
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	4213      	tst	r3, r2
 80034d6:	d007      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	6862      	ldr	r2, [r4, #4]
 80034da:	692b      	ldr	r3, [r5, #16]
 80034dc:	495b      	ldr	r1, [pc, #364]	; (800364c <HAL_RCC_OscConfig+0x320>)
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	400a      	ands	r2, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	6063      	str	r3, [r4, #4]
 80034e6:	e735      	b.n	8003354 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e8:	f7ff fa16 	bl	8002918 <HAL_GetTick>
 80034ec:	1bc0      	subs	r0, r0, r7
 80034ee:	2802      	cmp	r0, #2
 80034f0:	d9ee      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1a4>
 80034f2:	e78f      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI_DISABLE();
 80034f4:	2201      	movs	r2, #1
 80034f6:	4393      	bics	r3, r2
 80034f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80034fa:	f7ff fa0d 	bl	8002918 <HAL_GetTick>
 80034fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003500:	2204      	movs	r2, #4
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	4213      	tst	r3, r2
 8003506:	d100      	bne.n	800350a <HAL_RCC_OscConfig+0x1de>
 8003508:	e724      	b.n	8003354 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7ff fa05 	bl	8002918 <HAL_GetTick>
 800350e:	1bc0      	subs	r0, r0, r7
 8003510:	2802      	cmp	r0, #2
 8003512:	d9f5      	bls.n	8003500 <HAL_RCC_OscConfig+0x1d4>
 8003514:	e77e      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003516:	69eb      	ldr	r3, [r5, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_ENABLE();
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	6822      	ldr	r2, [r4, #0]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4313      	orrs	r3, r2
 8003524:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003526:	f7ff f9f7 	bl	8002918 <HAL_GetTick>
 800352a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	4213      	tst	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003536:	6863      	ldr	r3, [r4, #4]
 8003538:	4a3f      	ldr	r2, [pc, #252]	; (8003638 <HAL_RCC_OscConfig+0x30c>)
 800353a:	4013      	ands	r3, r2
 800353c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800353e:	4313      	orrs	r3, r2
 8003540:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003542:	6862      	ldr	r2, [r4, #4]
 8003544:	6a2b      	ldr	r3, [r5, #32]
 8003546:	0212      	lsls	r2, r2, #8
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	0a12      	lsrs	r2, r2, #8
 800354c:	4313      	orrs	r3, r2
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	e72c      	b.n	80033ac <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003552:	f7ff f9e1 	bl	8002918 <HAL_GetTick>
 8003556:	1bc0      	subs	r0, r0, r7
 8003558:	2802      	cmp	r0, #2
 800355a:	d9e7      	bls.n	800352c <HAL_RCC_OscConfig+0x200>
 800355c:	e75a      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_MSI_DISABLE();
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x324>)
 8003562:	4013      	ands	r3, r2
 8003564:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003566:	f7ff f9d7 	bl	8002918 <HAL_GetTick>
 800356a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	4213      	tst	r3, r2
 8003574:	d100      	bne.n	8003578 <HAL_RCC_OscConfig+0x24c>
 8003576:	e719      	b.n	80033ac <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003578:	f7ff f9ce 	bl	8002918 <HAL_GetTick>
 800357c:	1bc0      	subs	r0, r0, r7
 800357e:	2802      	cmp	r0, #2
 8003580:	d9f4      	bls.n	800356c <HAL_RCC_OscConfig+0x240>
 8003582:	e747      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003584:	696a      	ldr	r2, [r5, #20]
 8003586:	2301      	movs	r3, #1
 8003588:	2a00      	cmp	r2, #0
 800358a:	d010      	beq.n	80035ae <HAL_RCC_OscConfig+0x282>
      __HAL_RCC_LSI_ENABLE();
 800358c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800358e:	4313      	orrs	r3, r2
 8003590:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003592:	f7ff f9c1 	bl	8002918 <HAL_GetTick>
 8003596:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003598:	2202      	movs	r2, #2
 800359a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800359c:	4213      	tst	r3, r2
 800359e:	d000      	beq.n	80035a2 <HAL_RCC_OscConfig+0x276>
 80035a0:	e708      	b.n	80033b4 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7ff f9b9 	bl	8002918 <HAL_GetTick>
 80035a6:	1bc0      	subs	r0, r0, r7
 80035a8:	2802      	cmp	r0, #2
 80035aa:	d9f5      	bls.n	8003598 <HAL_RCC_OscConfig+0x26c>
 80035ac:	e732      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_LSI_DISABLE();
 80035ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80035b0:	439a      	bics	r2, r3
 80035b2:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80035b4:	f7ff f9b0 	bl	8002918 <HAL_GetTick>
 80035b8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ba:	2202      	movs	r2, #2
 80035bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80035be:	4213      	tst	r3, r2
 80035c0:	d100      	bne.n	80035c4 <HAL_RCC_OscConfig+0x298>
 80035c2:	e6f7      	b.n	80033b4 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7ff f9a8 	bl	8002918 <HAL_GetTick>
 80035c8:	1bc0      	subs	r0, r0, r7
 80035ca:	2802      	cmp	r0, #2
 80035cc:	d9f5      	bls.n	80035ba <HAL_RCC_OscConfig+0x28e>
 80035ce:	e721      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d0:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035d6:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80035d8:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	421a      	tst	r2, r3
 80035dc:	d104      	bne.n	80035e8 <HAL_RCC_OscConfig+0x2bc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035e0:	4313      	orrs	r3, r2
 80035e2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	4f1a      	ldr	r7, [pc, #104]	; (8003654 <HAL_RCC_OscConfig+0x328>)
 80035ec:	0052      	lsls	r2, r2, #1
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4213      	tst	r3, r2
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_OscConfig+0x2da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	68ab      	ldr	r3, [r5, #8]
 80035f8:	0052      	lsls	r2, r2, #1
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d12c      	bne.n	8003658 <HAL_RCC_OscConfig+0x32c>
 80035fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003600:	4313      	orrs	r3, r2
 8003602:	6523      	str	r3, [r4, #80]	; 0x50
 8003604:	e04d      	b.n	80036a2 <HAL_RCC_OscConfig+0x376>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	0052      	lsls	r2, r2, #1
 800360c:	4313      	orrs	r3, r2
 800360e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003610:	f7ff f982 	bl	8002918 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8003618:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	9a03      	ldr	r2, [sp, #12]
 8003620:	4213      	tst	r3, r2
 8003622:	d1e7      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7ff f978 	bl	8002918 <HAL_GetTick>
 8003628:	9b02      	ldr	r3, [sp, #8]
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	2864      	cmp	r0, #100	; 0x64
 800362e:	d9f5      	bls.n	800361c <HAL_RCC_OscConfig+0x2f0>
 8003630:	e6f0      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40021000 	.word	0x40021000
 8003638:	ffff1fff 	.word	0xffff1fff
 800363c:	08006802 	.word	0x08006802
 8003640:	20000084 	.word	0x20000084
 8003644:	fffeffff 	.word	0xfffeffff
 8003648:	fffbffff 	.word	0xfffbffff
 800364c:	ffffe0ff 	.word	0xffffe0ff
 8003650:	fffffeff 	.word	0xfffffeff
 8003654:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <HAL_RCC_OscConfig+0x35e>
 800365c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800365e:	4a6b      	ldr	r2, [pc, #428]	; (800380c <HAL_RCC_OscConfig+0x4e0>)
 8003660:	4013      	ands	r3, r2
 8003662:	6523      	str	r3, [r4, #80]	; 0x50
 8003664:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003666:	4a6a      	ldr	r2, [pc, #424]	; (8003810 <HAL_RCC_OscConfig+0x4e4>)
 8003668:	4013      	ands	r3, r2
 800366a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800366c:	f7ff f954 	bl	8002918 <HAL_GetTick>
 8003670:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4213      	tst	r3, r2
 800367a:	d01a      	beq.n	80036b2 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7ff f94c 	bl	8002918 <HAL_GetTick>
 8003680:	4b64      	ldr	r3, [pc, #400]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003682:	1bc0      	subs	r0, r0, r7
 8003684:	4298      	cmp	r0, r3
 8003686:	d9f4      	bls.n	8003672 <HAL_RCC_OscConfig+0x346>
 8003688:	e6c4      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368a:	21a0      	movs	r1, #160	; 0xa0
 800368c:	00c9      	lsls	r1, r1, #3
 800368e:	428b      	cmp	r3, r1
 8003690:	d118      	bne.n	80036c4 <HAL_RCC_OscConfig+0x398>
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	430b      	orrs	r3, r1
 800369a:	6523      	str	r3, [r4, #80]	; 0x50
 800369c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800369e:	431a      	orrs	r2, r3
 80036a0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80036a2:	f7ff f939 	bl	8002918 <HAL_GetTick>
 80036a6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	4213      	tst	r3, r2
 80036b0:	d010      	beq.n	80036d4 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 80036b2:	9b01      	ldr	r3, [sp, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d000      	beq.n	80036ba <HAL_RCC_OscConfig+0x38e>
 80036b8:	e680      	b.n	80033bc <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036bc:	4a56      	ldr	r2, [pc, #344]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 80036be:	4013      	ands	r3, r2
 80036c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80036c2:	e67b      	b.n	80033bc <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036c6:	4a51      	ldr	r2, [pc, #324]	; (800380c <HAL_RCC_OscConfig+0x4e0>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	6523      	str	r3, [r4, #80]	; 0x50
 80036cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036ce:	4a50      	ldr	r2, [pc, #320]	; (8003810 <HAL_RCC_OscConfig+0x4e4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	e796      	b.n	8003602 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7ff f920 	bl	8002918 <HAL_GetTick>
 80036d8:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 80036da:	1bc0      	subs	r0, r0, r7
 80036dc:	4298      	cmp	r0, r3
 80036de:	d9e3      	bls.n	80036a8 <HAL_RCC_OscConfig+0x37c>
 80036e0:	e698      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036e2:	69a9      	ldr	r1, [r5, #24]
 80036e4:	2301      	movs	r3, #1
 80036e6:	4a4d      	ldr	r2, [pc, #308]	; (800381c <HAL_RCC_OscConfig+0x4f0>)
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d018      	beq.n	800371e <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI48_ENABLE();
 80036ec:	68a1      	ldr	r1, [r4, #8]
 80036ee:	4319      	orrs	r1, r3
 80036f0:	60a1      	str	r1, [r4, #8]
 80036f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6363      	str	r3, [r4, #52]	; 0x34
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	6a11      	ldr	r1, [r2, #32]
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	430b      	orrs	r3, r1
 8003700:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003702:	f7ff f909 	bl	8002918 <HAL_GetTick>
 8003706:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003708:	2202      	movs	r2, #2
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	4213      	tst	r3, r2
 800370e:	d000      	beq.n	8003712 <HAL_RCC_OscConfig+0x3e6>
 8003710:	e658      	b.n	80033c4 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003712:	f7ff f901 	bl	8002918 <HAL_GetTick>
 8003716:	1bc0      	subs	r0, r0, r7
 8003718:	2802      	cmp	r0, #2
 800371a:	d9f5      	bls.n	8003708 <HAL_RCC_OscConfig+0x3dc>
 800371c:	e67a      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI48_DISABLE();
 800371e:	68a1      	ldr	r1, [r4, #8]
 8003720:	4399      	bics	r1, r3
 8003722:	60a1      	str	r1, [r4, #8]
 8003724:	6a13      	ldr	r3, [r2, #32]
 8003726:	493e      	ldr	r1, [pc, #248]	; (8003820 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	400b      	ands	r3, r1
 800372a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800372c:	f7ff f8f4 	bl	8002918 <HAL_GetTick>
 8003730:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003732:	2202      	movs	r2, #2
 8003734:	68a3      	ldr	r3, [r4, #8]
 8003736:	4213      	tst	r3, r2
 8003738:	d100      	bne.n	800373c <HAL_RCC_OscConfig+0x410>
 800373a:	e643      	b.n	80033c4 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800373c:	f7ff f8ec 	bl	8002918 <HAL_GetTick>
 8003740:	1bc0      	subs	r0, r0, r7
 8003742:	2802      	cmp	r0, #2
 8003744:	d9f5      	bls.n	8003732 <HAL_RCC_OscConfig+0x406>
 8003746:	e665      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003748:	2e0c      	cmp	r6, #12
 800374a:	d043      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4a8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374c:	4a35      	ldr	r2, [pc, #212]	; (8003824 <HAL_RCC_OscConfig+0x4f8>)
 800374e:	2b02      	cmp	r3, #2
 8003750:	d12e      	bne.n	80037b0 <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_PLL_DISABLE();
 8003752:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003754:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003756:	4013      	ands	r3, r2
 8003758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800375a:	f7ff f8dd 	bl	8002918 <HAL_GetTick>
 800375e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003760:	04bf      	lsls	r7, r7, #18
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	423b      	tst	r3, r7
 8003766:	d11d      	bne.n	80037a4 <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003768:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800376a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800376c:	68e2      	ldr	r2, [r4, #12]
 800376e:	430b      	orrs	r3, r1
 8003770:	492d      	ldr	r1, [pc, #180]	; (8003828 <HAL_RCC_OscConfig+0x4fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003772:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	400a      	ands	r2, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800377a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4313      	orrs	r3, r2
 800377e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	045b      	lsls	r3, r3, #17
 8003786:	4313      	orrs	r3, r2
 8003788:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800378a:	f7ff f8c5 	bl	8002918 <HAL_GetTick>
 800378e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	4233      	tst	r3, r6
 8003794:	d000      	beq.n	8003798 <HAL_RCC_OscConfig+0x46c>
 8003796:	e619      	b.n	80033cc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7ff f8be 	bl	8002918 <HAL_GetTick>
 800379c:	1b40      	subs	r0, r0, r5
 800379e:	2802      	cmp	r0, #2
 80037a0:	d9f6      	bls.n	8003790 <HAL_RCC_OscConfig+0x464>
 80037a2:	e637      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7ff f8b8 	bl	8002918 <HAL_GetTick>
 80037a8:	1b80      	subs	r0, r0, r6
 80037aa:	2802      	cmp	r0, #2
 80037ac:	d9d9      	bls.n	8003762 <HAL_RCC_OscConfig+0x436>
 80037ae:	e631      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_PLL_DISABLE();
 80037b0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037b2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4013      	ands	r3, r2
 80037b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037b8:	f7ff f8ae 	bl	8002918 <HAL_GetTick>
 80037bc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037be:	04b6      	lsls	r6, r6, #18
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	4233      	tst	r3, r6
 80037c4:	d100      	bne.n	80037c8 <HAL_RCC_OscConfig+0x49c>
 80037c6:	e601      	b.n	80033cc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c8:	f7ff f8a6 	bl	8002918 <HAL_GetTick>
 80037cc:	1b40      	subs	r0, r0, r5
 80037ce:	2802      	cmp	r0, #2
 80037d0:	d9f6      	bls.n	80037c0 <HAL_RCC_OscConfig+0x494>
 80037d2:	e61f      	b.n	8003414 <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 80037d4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d100      	bne.n	80037dc <HAL_RCC_OscConfig+0x4b0>
 80037da:	e61c      	b.n	8003416 <HAL_RCC_OscConfig+0xea>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037dc:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80037de:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80037e2:	0252      	lsls	r2, r2, #9
 80037e4:	401a      	ands	r2, r3
 80037e6:	428a      	cmp	r2, r1
 80037e8:	d000      	beq.n	80037ec <HAL_RCC_OscConfig+0x4c0>
 80037ea:	e5fd      	b.n	80033e8 <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037ec:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037f0:	0392      	lsls	r2, r2, #14
 80037f2:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f4:	428a      	cmp	r2, r1
 80037f6:	d000      	beq.n	80037fa <HAL_RCC_OscConfig+0x4ce>
 80037f8:	e5f6      	b.n	80033e8 <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80037fa:	22c0      	movs	r2, #192	; 0xc0
 80037fc:	0412      	lsls	r2, r2, #16
 80037fe:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003800:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003802:	4293      	cmp	r3, r2
 8003804:	d100      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
 8003806:	e5e1      	b.n	80033cc <HAL_RCC_OscConfig+0xa0>
 8003808:	e5ee      	b.n	80033e8 <HAL_RCC_OscConfig+0xbc>
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	fffffeff 	.word	0xfffffeff
 8003810:	fffffbff 	.word	0xfffffbff
 8003814:	00001388 	.word	0x00001388
 8003818:	efffffff 	.word	0xefffffff
 800381c:	40010000 	.word	0x40010000
 8003820:	ffffdfff 	.word	0xffffdfff
 8003824:	feffffff 	.word	0xfeffffff
 8003828:	ff02ffff 	.word	0xff02ffff

0800382c <HAL_RCC_ClockConfig>:
{
 800382c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800382e:	1e04      	subs	r4, r0, #0
 8003830:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003834:	2001      	movs	r0, #1
}
 8003836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	2201      	movs	r2, #1
 800383a:	4d51      	ldr	r5, [pc, #324]	; (8003980 <HAL_RCC_ClockConfig+0x154>)
 800383c:	9901      	ldr	r1, [sp, #4]
 800383e:	682b      	ldr	r3, [r5, #0]
 8003840:	4013      	ands	r3, r2
 8003842:	428b      	cmp	r3, r1
 8003844:	d327      	bcc.n	8003896 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	0793      	lsls	r3, r2, #30
 800384a:	d42f      	bmi.n	80038ac <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384c:	07d3      	lsls	r3, r2, #31
 800384e:	d435      	bmi.n	80038bc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	2301      	movs	r3, #1
 8003852:	682a      	ldr	r2, [r5, #0]
 8003854:	9901      	ldr	r1, [sp, #4]
 8003856:	401a      	ands	r2, r3
 8003858:	428a      	cmp	r2, r1
 800385a:	d900      	bls.n	800385e <HAL_RCC_ClockConfig+0x32>
 800385c:	e081      	b.n	8003962 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	4d48      	ldr	r5, [pc, #288]	; (8003984 <HAL_RCC_ClockConfig+0x158>)
 8003862:	0753      	lsls	r3, r2, #29
 8003864:	d500      	bpl.n	8003868 <HAL_RCC_ClockConfig+0x3c>
 8003866:	e084      	b.n	8003972 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	0713      	lsls	r3, r2, #28
 800386a:	d506      	bpl.n	800387a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800386c:	68ea      	ldr	r2, [r5, #12]
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	4945      	ldr	r1, [pc, #276]	; (8003988 <HAL_RCC_ClockConfig+0x15c>)
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	400a      	ands	r2, r1
 8003876:	4313      	orrs	r3, r2
 8003878:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387a:	f7ff fd17 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800387e:	68eb      	ldr	r3, [r5, #12]
 8003880:	4a42      	ldr	r2, [pc, #264]	; (800398c <HAL_RCC_ClockConfig+0x160>)
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	0f1b      	lsrs	r3, r3, #28
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	40d8      	lsrs	r0, r3
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_ClockConfig+0x164>)
 800388c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800388e:	2000      	movs	r0, #0
 8003890:	f7ff f80e 	bl	80028b0 <HAL_InitTick>
  if(status != HAL_OK)
 8003894:	e7cf      	b.n	8003836 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	9901      	ldr	r1, [sp, #4]
 800389a:	4393      	bics	r3, r2
 800389c:	430b      	orrs	r3, r1
 800389e:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	4013      	ands	r3, r2
 80038a4:	9a01      	ldr	r2, [sp, #4]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d1c4      	bne.n	8003834 <HAL_RCC_ClockConfig+0x8>
 80038aa:	e7cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	20f0      	movs	r0, #240	; 0xf0
 80038ae:	4935      	ldr	r1, [pc, #212]	; (8003984 <HAL_RCC_ClockConfig+0x158>)
 80038b0:	68cb      	ldr	r3, [r1, #12]
 80038b2:	4383      	bics	r3, r0
 80038b4:	68a0      	ldr	r0, [r4, #8]
 80038b6:	4303      	orrs	r3, r0
 80038b8:	60cb      	str	r3, [r1, #12]
 80038ba:	e7c7      	b.n	800384c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038bc:	4e31      	ldr	r6, [pc, #196]	; (8003984 <HAL_RCC_ClockConfig+0x158>)
 80038be:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c0:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c2:	2a02      	cmp	r2, #2
 80038c4:	d119      	bne.n	80038fa <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c6:	039b      	lsls	r3, r3, #14
 80038c8:	d5b4      	bpl.n	8003834 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	2103      	movs	r1, #3
 80038cc:	68f3      	ldr	r3, [r6, #12]
 80038ce:	438b      	bics	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80038d4:	f7ff f820 	bl	8002918 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80038da:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d119      	bne.n	8003914 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e0:	220c      	movs	r2, #12
 80038e2:	68f3      	ldr	r3, [r6, #12]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d0b2      	beq.n	8003850 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ea:	f7ff f815 	bl	8002918 <HAL_GetTick>
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_ClockConfig+0x168>)
 80038f0:	1bc0      	subs	r0, r0, r7
 80038f2:	4298      	cmp	r0, r3
 80038f4:	d9f4      	bls.n	80038e0 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80038f6:	2003      	movs	r0, #3
 80038f8:	e79d      	b.n	8003836 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fa:	2a03      	cmp	r2, #3
 80038fc:	d102      	bne.n	8003904 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	d4e3      	bmi.n	80038ca <HAL_RCC_ClockConfig+0x9e>
 8003902:	e797      	b.n	8003834 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003904:	2a01      	cmp	r2, #1
 8003906:	d102      	bne.n	800390e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003908:	075b      	lsls	r3, r3, #29
 800390a:	d4de      	bmi.n	80038ca <HAL_RCC_ClockConfig+0x9e>
 800390c:	e792      	b.n	8003834 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800390e:	059b      	lsls	r3, r3, #22
 8003910:	d4db      	bmi.n	80038ca <HAL_RCC_ClockConfig+0x9e>
 8003912:	e78f      	b.n	8003834 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003914:	2b03      	cmp	r3, #3
 8003916:	d10b      	bne.n	8003930 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	220c      	movs	r2, #12
 800391a:	68f3      	ldr	r3, [r6, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	4293      	cmp	r3, r2
 8003920:	d096      	beq.n	8003850 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003922:	f7fe fff9 	bl	8002918 <HAL_GetTick>
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_RCC_ClockConfig+0x168>)
 8003928:	1bc0      	subs	r0, r0, r7
 800392a:	4298      	cmp	r0, r3
 800392c:	d9f4      	bls.n	8003918 <HAL_RCC_ClockConfig+0xec>
 800392e:	e7e2      	b.n	80038f6 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003930:	2b01      	cmp	r3, #1
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003934:	220c      	movs	r2, #12
 8003936:	68f3      	ldr	r3, [r6, #12]
 8003938:	4213      	tst	r3, r2
 800393a:	d089      	beq.n	8003850 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fe ffec 	bl	8002918 <HAL_GetTick>
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_RCC_ClockConfig+0x168>)
 8003942:	1bc0      	subs	r0, r0, r7
 8003944:	4298      	cmp	r0, r3
 8003946:	d9f5      	bls.n	8003934 <HAL_RCC_ClockConfig+0x108>
 8003948:	e7d5      	b.n	80038f6 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394a:	f7fe ffe5 	bl	8002918 <HAL_GetTick>
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_ClockConfig+0x168>)
 8003950:	1bc0      	subs	r0, r0, r7
 8003952:	4298      	cmp	r0, r3
 8003954:	d8cf      	bhi.n	80038f6 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003956:	220c      	movs	r2, #12
 8003958:	68f3      	ldr	r3, [r6, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	2b04      	cmp	r3, #4
 800395e:	d1f4      	bne.n	800394a <HAL_RCC_ClockConfig+0x11e>
 8003960:	e776      	b.n	8003850 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	682a      	ldr	r2, [r5, #0]
 8003964:	439a      	bics	r2, r3
 8003966:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003968:	682a      	ldr	r2, [r5, #0]
 800396a:	421a      	tst	r2, r3
 800396c:	d100      	bne.n	8003970 <HAL_RCC_ClockConfig+0x144>
 800396e:	e776      	b.n	800385e <HAL_RCC_ClockConfig+0x32>
 8003970:	e760      	b.n	8003834 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003972:	68eb      	ldr	r3, [r5, #12]
 8003974:	4908      	ldr	r1, [pc, #32]	; (8003998 <HAL_RCC_ClockConfig+0x16c>)
 8003976:	400b      	ands	r3, r1
 8003978:	68e1      	ldr	r1, [r4, #12]
 800397a:	430b      	orrs	r3, r1
 800397c:	60eb      	str	r3, [r5, #12]
 800397e:	e773      	b.n	8003868 <HAL_RCC_ClockConfig+0x3c>
 8003980:	40022000 	.word	0x40022000
 8003984:	40021000 	.word	0x40021000
 8003988:	ffffc7ff 	.word	0xffffc7ff
 800398c:	08006802 	.word	0x08006802
 8003990:	20000084 	.word	0x20000084
 8003994:	00001388 	.word	0x00001388
 8003998:	fffff8ff 	.word	0xfffff8ff

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	055b      	lsls	r3, r3, #21
 80039a4:	0f5b      	lsrs	r3, r3, #29
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	4a03      	ldr	r2, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80039aa:	6810      	ldr	r0, [r2, #0]
 80039ac:	40d8      	lsrs	r0, r3
}
 80039ae:	4770      	bx	lr
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08006812 	.word	0x08006812
 80039b8:	20000084 	.word	0x20000084

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	049b      	lsls	r3, r3, #18
 80039c4:	0f5b      	lsrs	r3, r3, #29
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	4a03      	ldr	r2, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80039ca:	6810      	ldr	r0, [r2, #0]
 80039cc:	40d8      	lsrs	r0, r3
}
 80039ce:	4770      	bx	lr
 80039d0:	40021000 	.word	0x40021000
 80039d4:	08006812 	.word	0x08006812
 80039d8:	20000084 	.word	0x20000084

080039dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039dc:	6803      	ldr	r3, [r0, #0]
{
 80039de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039e0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e2:	069b      	lsls	r3, r3, #26
 80039e4:	d53d      	bpl.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80039e8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4c5a      	ldr	r4, [pc, #360]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80039ec:	055b      	lsls	r3, r3, #21
 80039ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80039f0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	421a      	tst	r2, r3
 80039f4:	d104      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039f8:	4313      	orrs	r3, r2
 80039fa:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	2780      	movs	r7, #128	; 0x80
 8003a02:	4e55      	ldr	r6, [pc, #340]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8003a04:	007f      	lsls	r7, r7, #1
 8003a06:	6833      	ldr	r3, [r6, #0]
 8003a08:	423b      	tst	r3, r7
 8003a0a:	d063      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a0c:	686b      	ldr	r3, [r5, #4]
 8003a0e:	22c0      	movs	r2, #192	; 0xc0
 8003a10:	20c0      	movs	r0, #192	; 0xc0
 8003a12:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a14:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a16:	0292      	lsls	r2, r2, #10
 8003a18:	0380      	lsls	r0, r0, #14
 8003a1a:	0017      	movs	r7, r2
 8003a1c:	4016      	ands	r6, r2
 8003a1e:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003a20:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003a22:	428b      	cmp	r3, r1
 8003a24:	d167      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003a26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a28:	001a      	movs	r2, r3
 8003a2a:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003a2c:	423b      	tst	r3, r7
 8003a2e:	d16a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a30:	6869      	ldr	r1, [r5, #4]
 8003a32:	23c0      	movs	r3, #192	; 0xc0
 8003a34:	000a      	movs	r2, r1
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	401a      	ands	r2, r3
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	4846      	ldr	r0, [pc, #280]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8003a42:	4003      	ands	r3, r0
 8003a44:	20c0      	movs	r0, #192	; 0xc0
 8003a46:	0380      	lsls	r0, r0, #14
 8003a48:	4001      	ands	r1, r0
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a50:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a52:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a54:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d103      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a5c:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a62:	682b      	ldr	r3, [r5, #0]
 8003a64:	07da      	lsls	r2, r3, #31
 8003a66:	d506      	bpl.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	493a      	ldr	r1, [pc, #232]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003a6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003a6e:	4382      	bics	r2, r0
 8003a70:	68a8      	ldr	r0, [r5, #8]
 8003a72:	4302      	orrs	r2, r0
 8003a74:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a76:	079a      	lsls	r2, r3, #30
 8003a78:	d506      	bpl.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a7a:	200c      	movs	r0, #12
 8003a7c:	4935      	ldr	r1, [pc, #212]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003a7e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003a80:	4382      	bics	r2, r0
 8003a82:	68e8      	ldr	r0, [r5, #12]
 8003a84:	4302      	orrs	r2, r0
 8003a86:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a88:	075a      	lsls	r2, r3, #29
 8003a8a:	d506      	bpl.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a8c:	4931      	ldr	r1, [pc, #196]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003a8e:	4835      	ldr	r0, [pc, #212]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a90:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003a92:	4002      	ands	r2, r0
 8003a94:	6928      	ldr	r0, [r5, #16]
 8003a96:	4302      	orrs	r2, r0
 8003a98:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9a:	071a      	lsls	r2, r3, #28
 8003a9c:	d506      	bpl.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9e:	492d      	ldr	r1, [pc, #180]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003aa0:	4831      	ldr	r0, [pc, #196]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003aa2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003aa4:	4002      	ands	r2, r0
 8003aa6:	6968      	ldr	r0, [r5, #20]
 8003aa8:	4302      	orrs	r2, r0
 8003aaa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aac:	065a      	lsls	r2, r3, #25
 8003aae:	d506      	bpl.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab0:	4928      	ldr	r1, [pc, #160]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003ab2:	482e      	ldr	r0, [pc, #184]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003ab4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003ab6:	4002      	ands	r2, r0
 8003ab8:	69e8      	ldr	r0, [r5, #28]
 8003aba:	4302      	orrs	r2, r0
 8003abc:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003abe:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	d517      	bpl.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003ac4:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003ac6:	492a      	ldr	r1, [pc, #168]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ac8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003aca:	400b      	ands	r3, r1
 8003acc:	69a9      	ldr	r1, [r5, #24]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad4:	6833      	ldr	r3, [r6, #0]
 8003ad6:	433b      	orrs	r3, r7
 8003ad8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003ada:	f7fe ff1d 	bl	8002918 <HAL_GetTick>
 8003ade:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	6833      	ldr	r3, [r6, #0]
 8003ae2:	423b      	tst	r3, r7
 8003ae4:	d192      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe ff17 	bl	8002918 <HAL_GetTick>
 8003aea:	9b01      	ldr	r3, [sp, #4]
 8003aec:	1ac0      	subs	r0, r0, r3
 8003aee:	2864      	cmp	r0, #100	; 0x64
 8003af0:	d9f6      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x104>
          return HAL_TIMEOUT;
 8003af2:	2003      	movs	r0, #3
}
 8003af4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003af6:	4296      	cmp	r6, r2
 8003af8:	d195      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003afa:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8003afc:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003afe:	039b      	lsls	r3, r3, #14
 8003b00:	d400      	bmi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003b02:	e790      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003b04:	e7f6      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003b06:	42b2      	cmp	r2, r6
 8003b08:	d100      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003b0a:	e791      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	069b      	lsls	r3, r3, #26
 8003b10:	d400      	bmi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003b12:	e78d      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b14:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003b16:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b18:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003b1a:	0312      	lsls	r2, r2, #12
 8003b1c:	4302      	orrs	r2, r0
 8003b1e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b20:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b24:	4814      	ldr	r0, [pc, #80]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003b26:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	4002      	ands	r2, r0
 8003b2a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003b2c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003b2e:	05cb      	lsls	r3, r1, #23
 8003b30:	d400      	bmi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003b32:	e77d      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8003b34:	f7fe fef0 	bl	8002918 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b38:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003b3a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3c:	00bf      	lsls	r7, r7, #2
 8003b3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b40:	423b      	tst	r3, r7
 8003b42:	d000      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003b44:	e774      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fe fee7 	bl	8002918 <HAL_GetTick>
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8003b4c:	1b80      	subs	r0, r0, r6
 8003b4e:	4298      	cmp	r0, r3
 8003b50:	d9f5      	bls.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003b52:	e7ce      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	ffcfffff 	.word	0xffcfffff
 8003b60:	efffffff 	.word	0xefffffff
 8003b64:	fffff3ff 	.word	0xfffff3ff
 8003b68:	ffffcfff 	.word	0xffffcfff
 8003b6c:	fbffffff 	.word	0xfbffffff
 8003b70:	fff3ffff 	.word	0xfff3ffff
 8003b74:	fffcffff 	.word	0xfffcffff
 8003b78:	fff7ffff 	.word	0xfff7ffff
 8003b7c:	00001388 	.word	0x00001388

08003b80 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b80:	21a0      	movs	r1, #160	; 0xa0
 8003b82:	6802      	ldr	r2, [r0, #0]
{
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b86:	68d3      	ldr	r3, [r2, #12]
{
 8003b88:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b8a:	438b      	bics	r3, r1
 8003b8c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003b8e:	f7fe fec3 	bl	8002918 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b92:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8003b94:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b96:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b98:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4233      	tst	r3, r6
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003ba2:	2000      	movs	r0, #0
}
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ba6:	f7fe feb7 	bl	8002918 <HAL_GetTick>
 8003baa:	1b40      	subs	r0, r0, r5
 8003bac:	42b8      	cmp	r0, r7
 8003bae:	d9f4      	bls.n	8003b9a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	e7f7      	b.n	8003ba4 <HAL_RTC_WaitForSynchro+0x24>

08003bb4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bb6:	2440      	movs	r4, #64	; 0x40
 8003bb8:	6803      	ldr	r3, [r0, #0]
{
 8003bba:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	4222      	tst	r2, r4
 8003bc0:	d001      	beq.n	8003bc6 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003bc2:	2000      	movs	r0, #0
}
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4252      	negs	r2, r2
 8003bca:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fea4 	bl	8002918 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003bd0:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8003bd2:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003bd4:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4223      	tst	r3, r4
 8003bdc:	d1f1      	bne.n	8003bc2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003bde:	f7fe fe9b 	bl	8002918 <HAL_GetTick>
 8003be2:	1b80      	subs	r0, r0, r6
 8003be4:	42b8      	cmp	r0, r7
 8003be6:	d9f6      	bls.n	8003bd6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8003be8:	2003      	movs	r0, #3
 8003bea:	e7eb      	b.n	8003bc4 <RTC_EnterInitMode+0x10>

08003bec <HAL_RTC_Init>:
{
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003bf0:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d01a      	beq.n	8003c2c <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bf6:	1c86      	adds	r6, r0, #2
 8003bf8:	7ff3      	ldrb	r3, [r6, #31]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8003c00:	1943      	adds	r3, r0, r5
 8003c02:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8003c04:	f7fe f86c 	bl	8001ce0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c08:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c0a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c0c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c0e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c10:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
 8003c14:	3a77      	subs	r2, #119	; 0x77
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c18:	f7ff ffcc 	bl	8003bb4 <RTC_EnterInitMode>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	1e05      	subs	r5, r0, #0
 8003c20:	d006      	beq.n	8003c30 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c22:	22ff      	movs	r2, #255	; 0xff
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c26:	2304      	movs	r3, #4
 8003c28:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8003c2a:	2501      	movs	r5, #1
}
 8003c2c:	0028      	movs	r0, r5
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	491b      	ldr	r1, [pc, #108]	; (8003ca0 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c34:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c36:	400a      	ands	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	4302      	orrs	r2, r0
 8003c40:	69a0      	ldr	r0, [r4, #24]
 8003c42:	4302      	orrs	r2, r0
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c48:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c4a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003c4e:	68a2      	ldr	r2, [r4, #8]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	0412      	lsls	r2, r2, #16
 8003c54:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c56:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003c58:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c62:	397d      	subs	r1, #125	; 0x7d
 8003c64:	438a      	bics	r2, r1
 8003c66:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c68:	69e2      	ldr	r2, [r4, #28]
 8003c6a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c6c:	4302      	orrs	r2, r0
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	069b      	lsls	r3, r3, #26
 8003c76:	d40c      	bmi.n	8003c92 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c78:	0020      	movs	r0, r4
 8003c7a:	f7ff ff81 	bl	8003b80 <HAL_RTC_WaitForSynchro>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8003c86:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8003c8e:	77e5      	strb	r5, [r4, #31]
 8003c90:	e7cb      	b.n	8003c2a <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8003c9c:	e7c6      	b.n	8003c2c <HAL_RTC_Init+0x40>
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	ff8fffbf 	.word	0xff8fffbf

08003ca4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8003ca4:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8003ca6:	2809      	cmp	r0, #9
 8003ca8:	d803      	bhi.n	8003cb2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	4318      	orrs	r0, r3
 8003cae:	b2c0      	uxtb	r0, r0
}
 8003cb0:	4770      	bx	lr
    Param -= 10U;
 8003cb2:	380a      	subs	r0, #10
    bcdhigh++;
 8003cb4:	3301      	adds	r3, #1
    Param -= 10U;
 8003cb6:	b2c0      	uxtb	r0, r0
 8003cb8:	e7f5      	b.n	8003ca6 <RTC_ByteToBcd2+0x2>
	...

08003cbc <HAL_RTC_SetTime>:
{
 8003cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003cbe:	1c43      	adds	r3, r0, #1
{
 8003cc0:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8003cc2:	9302      	str	r3, [sp, #8]
{
 8003cc4:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8003cc6:	7fd9      	ldrb	r1, [r3, #31]
 8003cc8:	2302      	movs	r3, #2
{
 8003cca:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8003ccc:	001f      	movs	r7, r3
 8003cce:	2901      	cmp	r1, #1
 8003cd0:	d038      	beq.n	8003d44 <HAL_RTC_SetTime+0x88>
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	1840      	adds	r0, r0, r1
 8003cd6:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd8:	18e9      	adds	r1, r5, r3
 8003cda:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	7820      	ldrb	r0, [r4, #0]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	7866      	ldrb	r6, [r4, #1]
 8003ce4:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ce6:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d12e      	bne.n	8003d4a <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cec:	9a01      	ldr	r2, [sp, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0011      	movs	r1, r2
 8003cf2:	4019      	ands	r1, r3
 8003cf4:	421a      	tst	r2, r3
 8003cf6:	d100      	bne.n	8003cfa <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 8003cf8:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003cfa:	f7ff ffd3 	bl	8003ca4 <RTC_ByteToBcd2>
 8003cfe:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003d00:	0030      	movs	r0, r6
 8003d02:	f7ff ffcf 	bl	8003ca4 <RTC_ByteToBcd2>
 8003d06:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003d08:	78a0      	ldrb	r0, [r4, #2]
 8003d0a:	f7ff ffcb 	bl	8003ca4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003d0e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003d10:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003d12:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003d14:	4303      	orrs	r3, r0
 8003d16:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003d18:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d1a:	23ca      	movs	r3, #202	; 0xca
 8003d1c:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d1e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d20:	6253      	str	r3, [r2, #36]	; 0x24
 8003d22:	3b77      	subs	r3, #119	; 0x77
 8003d24:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d26:	f7ff ff45 	bl	8003bb4 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d2a:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	1e07      	subs	r7, r0, #0
 8003d30:	d01a      	beq.n	8003d68 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d36:	2304      	movs	r3, #4
 8003d38:	9a03      	ldr	r2, [sp, #12]
 8003d3a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9a02      	ldr	r2, [sp, #8]
 8003d40:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8003d42:	2701      	movs	r7, #1
}
 8003d44:	0038      	movs	r0, r7
 8003d46:	b005      	add	sp, #20
 8003d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d4a:	9a01      	ldr	r2, [sp, #4]
 8003d4c:	6892      	ldr	r2, [r2, #8]
 8003d4e:	0011      	movs	r1, r2
 8003d50:	4019      	ands	r1, r3
 8003d52:	421a      	tst	r2, r3
 8003d54:	d100      	bne.n	8003d58 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 8003d56:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d58:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d5a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003d5c:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003d5e:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8003d60:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003d62:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003d64:	4306      	orrs	r6, r0
 8003d66:	e7d8      	b.n	8003d1a <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d68:	4815      	ldr	r0, [pc, #84]	; (8003dc0 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d6a:	4916      	ldr	r1, [pc, #88]	; (8003dc4 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d6c:	4006      	ands	r6, r0
 8003d6e:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d70:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d72:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d74:	400a      	ands	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d78:	68e2      	ldr	r2, [r4, #12]
 8003d7a:	6899      	ldr	r1, [r3, #8]
 8003d7c:	4302      	orrs	r2, r0
 8003d7e:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d80:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d82:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	438a      	bics	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	d40d      	bmi.n	8003dac <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d90:	0028      	movs	r0, r5
 8003d92:	f7ff fef5 	bl	8003b80 <HAL_RTC_WaitForSynchro>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d008      	beq.n	8003dac <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003da0:	2304      	movs	r3, #4
 8003da2:	9a03      	ldr	r2, [sp, #12]
 8003da4:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8003da6:	9b02      	ldr	r3, [sp, #8]
 8003da8:	77df      	strb	r7, [r3, #31]
 8003daa:	e7ca      	b.n	8003d42 <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dac:	22ff      	movs	r2, #255	; 0xff
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003db2:	2301      	movs	r3, #1
 8003db4:	9a03      	ldr	r2, [sp, #12]
 8003db6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003db8:	2300      	movs	r3, #0
 8003dba:	9a02      	ldr	r2, [sp, #8]
 8003dbc:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8003dbe:	e7c1      	b.n	8003d44 <HAL_RTC_SetTime+0x88>
 8003dc0:	007f7f7f 	.word	0x007f7f7f
 8003dc4:	fffbffff 	.word	0xfffbffff

08003dc8 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8003dc8:	2302      	movs	r3, #2
{
 8003dca:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003dcc:	1c47      	adds	r7, r0, #1
{
 8003dce:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8003dd0:	7ff9      	ldrb	r1, [r7, #31]
{
 8003dd2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8003dd4:	001d      	movs	r5, r3
{
 8003dd6:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8003dd8:	2901      	cmp	r1, #1
 8003dda:	d036      	beq.n	8003e4a <HAL_RTC_SetDate+0x82>
 8003ddc:	2101      	movs	r1, #1
 8003dde:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003de0:	18c1      	adds	r1, r0, r3
 8003de2:	77cb      	strb	r3, [r1, #31]
 8003de4:	9101      	str	r1, [sp, #4]
 8003de6:	7831      	ldrb	r1, [r6, #0]
 8003de8:	78f0      	ldrb	r0, [r6, #3]
 8003dea:	0349      	lsls	r1, r1, #13
 8003dec:	7873      	ldrb	r3, [r6, #1]
 8003dee:	78b5      	ldrb	r5, [r6, #2]
 8003df0:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	d14c      	bne.n	8003e90 <HAL_RTC_SetDate+0xc8>
 8003df6:	3210      	adds	r2, #16
 8003df8:	4213      	tst	r3, r2
 8003dfa:	d002      	beq.n	8003e02 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	330a      	adds	r3, #10
 8003e00:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003e02:	f7ff ff4f 	bl	8003ca4 <RTC_ByteToBcd2>
 8003e06:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003e08:	7870      	ldrb	r0, [r6, #1]
 8003e0a:	f7ff ff4b 	bl	8003ca4 <RTC_ByteToBcd2>
 8003e0e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003e10:	0028      	movs	r0, r5
 8003e12:	f7ff ff47 	bl	8003ca4 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003e16:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003e18:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003e1a:	041d      	lsls	r5, r3, #16
 8003e1c:	9b02      	ldr	r3, [sp, #8]
 8003e1e:	4318      	orrs	r0, r3
 8003e20:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e22:	22ca      	movs	r2, #202	; 0xca
 8003e24:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e26:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
 8003e2a:	3a77      	subs	r2, #119	; 0x77
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e2e:	f7ff fec1 	bl	8003bb4 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003e32:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	1e05      	subs	r5, r0, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e3e:	2304      	movs	r3, #4
 8003e40:	9a01      	ldr	r2, [sp, #4]
 8003e42:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8003e48:	2501      	movs	r5, #1
}
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	b005      	add	sp, #20
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e50:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e52:	4812      	ldr	r0, [pc, #72]	; (8003e9c <HAL_RTC_SetDate+0xd4>)
 8003e54:	4006      	ands	r6, r0
 8003e56:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	438a      	bics	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	069b      	lsls	r3, r3, #26
 8003e62:	d40c      	bmi.n	8003e7e <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e64:	0020      	movs	r0, r4
 8003e66:	f7ff fe8b 	bl	8003b80 <HAL_RTC_WaitForSynchro>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e6e:	22ff      	movs	r2, #255	; 0xff
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e74:	2304      	movs	r3, #4
 8003e76:	9a01      	ldr	r2, [sp, #4]
 8003e78:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8003e7a:	77fd      	strb	r5, [r7, #31]
 8003e7c:	e7e4      	b.n	8003e48 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003e84:	2301      	movs	r3, #1
 8003e86:	9a01      	ldr	r2, [sp, #4]
 8003e88:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8003e8e:	e7dc      	b.n	8003e4a <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003e90:	9a02      	ldr	r2, [sp, #8]
 8003e92:	0400      	lsls	r0, r0, #16
 8003e94:	4310      	orrs	r0, r2
 8003e96:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8003e98:	021e      	lsls	r6, r3, #8
 8003e9a:	e7c2      	b.n	8003e22 <HAL_RTC_SetDate+0x5a>
 8003e9c:	00ffff3f 	.word	0x00ffff3f

08003ea0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ea0:	2302      	movs	r3, #2
{
 8003ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea4:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8003ea6:	1c46      	adds	r6, r0, #1
{
 8003ea8:	9101      	str	r1, [sp, #4]
 8003eaa:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(hrtc);
 8003eac:	7ff2      	ldrb	r2, [r6, #31]
{
 8003eae:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	2a01      	cmp	r2, #1
 8003eb4:	d05a      	beq.n	8003f6c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 8003eb6:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eb8:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 8003eba:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ebc:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	32c9      	adds	r2, #201	; 0xc9
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ec4:	3a77      	subs	r2, #119	; 0x77
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	055b      	lsls	r3, r3, #21
 8003ecc:	d438      	bmi.n	8003f40 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	492f      	ldr	r1, [pc, #188]	; (8003f90 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8003ed2:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ed4:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003eda:	68d9      	ldr	r1, [r3, #12]
 8003edc:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8003ede:	b2c9      	uxtb	r1, r1
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8003ee4:	f7fe fd18 	bl	8002918 <HAL_GetTick>
 8003ee8:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	0011      	movs	r1, r2
 8003ef0:	4029      	ands	r1, r5
 8003ef2:	9103      	str	r1, [sp, #12]
 8003ef4:	422a      	tst	r2, r5
 8003ef6:	d03b      	beq.n	8003f70 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003ef8:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003efa:	9a01      	ldr	r2, [sp, #4]
 8003efc:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	438a      	bics	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	9902      	ldr	r1, [sp, #8]
 8003f08:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003f0a:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003f0c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003f0e:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8003f10:	0349      	lsls	r1, r1, #13
 8003f12:	6810      	ldr	r0, [r2, #0]
 8003f14:	4308      	orrs	r0, r1
 8003f16:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003f18:	6890      	ldr	r0, [r2, #8]
 8003f1a:	4301      	orrs	r1, r0
 8003f1c:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	6899      	ldr	r1, [r3, #8]
 8003f22:	01d2      	lsls	r2, r2, #7
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	6899      	ldr	r1, [r3, #8]
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f32:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f34:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8003f3c:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 8003f3e:	e015      	b.n	8003f6c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    tickstart = HAL_GetTick();
 8003f40:	f7fe fcea 	bl	8002918 <HAL_GetTick>
 8003f44:	0005      	movs	r5, r0
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003f46:	2204      	movs	r2, #4
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4213      	tst	r3, r2
 8003f4e:	d0be      	beq.n	8003ece <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f50:	f7fe fce2 	bl	8002918 <HAL_GetTick>
 8003f54:	23fa      	movs	r3, #250	; 0xfa
 8003f56:	1b40      	subs	r0, r0, r5
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4298      	cmp	r0, r3
 8003f5c:	d9f3      	bls.n	8003f46 <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f5e:	22ff      	movs	r2, #255	; 0xff
 8003f60:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f62:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003f66:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f68:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 8003f6a:	77f3      	strb	r3, [r6, #31]
}
 8003f6c:	b005      	add	sp, #20
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f70:	f7fe fcd2 	bl	8002918 <HAL_GetTick>
 8003f74:	9b00      	ldr	r3, [sp, #0]
 8003f76:	1ac0      	subs	r0, r0, r3
 8003f78:	23fa      	movs	r3, #250	; 0xfa
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4298      	cmp	r0, r3
 8003f7e:	d9b4      	bls.n	8003eea <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f80:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f82:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 8003f88:	9b03      	ldr	r3, [sp, #12]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f8a:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 8003f8c:	e7ed      	b.n	8003f6a <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	fffffbff 	.word	0xfffffbff
 8003f94:	fffffb7f 	.word	0xfffffb7f
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_RTCEx_DeactivateWakeUpTimer>:
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f9c:	2302      	movs	r3, #2
{
 8003f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003fa0:	1c45      	adds	r5, r0, #1
 8003fa2:	7fea      	ldrb	r2, [r5, #31]
{
 8003fa4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	2a01      	cmp	r2, #1
 8003faa:	d031      	beq.n	8004010 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
 8003fac:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fae:	18e6      	adds	r6, r4, r3
  __HAL_LOCK(hrtc);
 8003fb0:	77ea      	strb	r2, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fb2:	77f3      	strb	r3, [r6, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	32c9      	adds	r2, #201	; 0xc9
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003fba:	3a77      	subs	r2, #119	; 0x77
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4914      	ldr	r1, [pc, #80]	; (8004014 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>)
  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);

  tickstart = HAL_GetTick();
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003fc2:	2704      	movs	r7, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	4913      	ldr	r1, [pc, #76]	; (8004018 <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8003fd0:	f7fe fca2 	bl	8002918 <HAL_GetTick>
 8003fd4:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	0011      	movs	r1, r2
 8003fdc:	4039      	ands	r1, r7
 8003fde:	9101      	str	r1, [sp, #4]
 8003fe0:	423a      	tst	r2, r7
 8003fe2:	d006      	beq.n	8003ff2 <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fe4:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fe6:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003fea:	2301      	movs	r3, #1
 8003fec:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8003fee:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
 8003ff0:	e00e      	b.n	8004010 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ff2:	f7fe fc91 	bl	8002918 <HAL_GetTick>
 8003ff6:	9b00      	ldr	r3, [sp, #0]
 8003ff8:	1ac0      	subs	r0, r0, r3
 8003ffa:	23fa      	movs	r3, #250	; 0xfa
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4298      	cmp	r0, r3
 8004000:	d9e9      	bls.n	8003fd6 <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004002:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004004:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800400a:	9b01      	ldr	r3, [sp, #4]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800400c:	77f0      	strb	r0, [r6, #31]
      __HAL_UNLOCK(hrtc);
 800400e:	77eb      	strb	r3, [r5, #31]
}
 8004010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	fffffbff 	.word	0xfffffbff
 8004018:	ffffbfff 	.word	0xffffbfff

0800401c <HAL_RTCEx_WakeUpTimerEventCallback>:
 800401c:	4770      	bx	lr
	...

08004020 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004020:	6803      	ldr	r3, [r0, #0]
{
 8004022:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004024:	68db      	ldr	r3, [r3, #12]
{
 8004026:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004028:	055b      	lsls	r3, r3, #21
 800402a:	d507      	bpl.n	800403c <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800402c:	f7ff fff6 	bl	800401c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004030:	6821      	ldr	r1, [r4, #0]
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8004034:	68ca      	ldr	r2, [r1, #12]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	4313      	orrs	r3, r2
 800403a:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8004040:	0352      	lsls	r2, r2, #13
 8004042:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004044:	2301      	movs	r3, #1
 8004046:	3402      	adds	r4, #2
 8004048:	77e3      	strb	r3, [r4, #31]
}
 800404a:	bd10      	pop	{r4, pc}
 800404c:	fffffb7f 	.word	0xfffffb7f
 8004050:	40010400 	.word	0x40010400

08004054 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	0004      	movs	r4, r0
 8004058:	000d      	movs	r5, r1
 800405a:	0016      	movs	r6, r2
 800405c:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	6893      	ldr	r3, [r2, #8]
 8004062:	402b      	ands	r3, r5
 8004064:	429d      	cmp	r5, r3
 8004066:	d001      	beq.n	800406c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004068:	2000      	movs	r0, #0
 800406a:	e031      	b.n	80040d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 800406c:	1c73      	adds	r3, r6, #1
 800406e:	d0f7      	beq.n	8004060 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004070:	f7fe fc52 	bl	8002918 <HAL_GetTick>
 8004074:	1bc0      	subs	r0, r0, r7
 8004076:	4286      	cmp	r6, r0
 8004078:	d8f1      	bhi.n	800405e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407a:	21e0      	movs	r1, #224	; 0xe0
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	438a      	bics	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004084:	2282      	movs	r2, #130	; 0x82
 8004086:	6861      	ldr	r1, [r4, #4]
 8004088:	0052      	lsls	r2, r2, #1
 800408a:	4291      	cmp	r1, r2
 800408c:	d10c      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68a2      	ldr	r2, [r4, #8]
 8004092:	0209      	lsls	r1, r1, #8
 8004094:	428a      	cmp	r2, r1
 8004096:	d003      	beq.n	80040a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	00c9      	lsls	r1, r1, #3
 800409c:	428a      	cmp	r2, r1
 800409e:	d103      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
          __HAL_SPI_DISABLE(hspi);
 80040a0:	2140      	movs	r1, #64	; 0x40
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	438a      	bics	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040ac:	0189      	lsls	r1, r1, #6
 80040ae:	428a      	cmp	r2, r1
 80040b0:	d106      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          SPI_RESET_CRC(hspi);
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	4807      	ldr	r0, [pc, #28]	; (80040d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>)
 80040b6:	4001      	ands	r1, r0
 80040b8:	6019      	str	r1, [r3, #0]
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80040c0:	0023      	movs	r3, r4
 80040c2:	2201      	movs	r2, #1
 80040c4:	3351      	adds	r3, #81	; 0x51
 80040c6:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80040c8:	2300      	movs	r3, #0
 80040ca:	2003      	movs	r0, #3
 80040cc:	3450      	adds	r4, #80	; 0x50
 80040ce:	7023      	strb	r3, [r4, #0]
}
 80040d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	ffffdfff 	.word	0xffffdfff

080040d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040dc:	2282      	movs	r2, #130	; 0x82
{
 80040de:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e0:	6840      	ldr	r0, [r0, #4]
 80040e2:	0052      	lsls	r2, r2, #1
 80040e4:	4290      	cmp	r0, r2
 80040e6:	d11e      	bne.n	8004126 <SPI_EndRxTransaction+0x4e>
 80040e8:	2080      	movs	r0, #128	; 0x80
 80040ea:	2580      	movs	r5, #128	; 0x80
 80040ec:	68a2      	ldr	r2, [r4, #8]
 80040ee:	0200      	lsls	r0, r0, #8
 80040f0:	00ed      	lsls	r5, r5, #3
 80040f2:	4282      	cmp	r2, r0
 80040f4:	d001      	beq.n	80040fa <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f6:	42aa      	cmp	r2, r5
 80040f8:	d106      	bne.n	8004108 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040fa:	2740      	movs	r7, #64	; 0x40
 80040fc:	6826      	ldr	r6, [r4, #0]
 80040fe:	6830      	ldr	r0, [r6, #0]
 8004100:	43b8      	bics	r0, r7
 8004102:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004104:	42aa      	cmp	r2, r5
 8004106:	d00e      	beq.n	8004126 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	000a      	movs	r2, r1
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	0020      	movs	r0, r4
 800410e:	f7ff ffa1 	bl	8004054 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004112:	2800      	cmp	r0, #0
 8004114:	d101      	bne.n	800411a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8004116:	2000      	movs	r0, #0
}
 8004118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411a:	2320      	movs	r3, #32
 800411c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800411e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004120:	4313      	orrs	r3, r2
 8004122:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004124:	e7f8      	b.n	8004118 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	000a      	movs	r2, r1
 8004128:	2101      	movs	r1, #1
 800412a:	e7ef      	b.n	800410c <SPI_EndRxTransaction+0x34>

0800412c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800412e:	2282      	movs	r2, #130	; 0x82
{
 8004130:	b510      	push	{r4, lr}
 8004132:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004134:	6840      	ldr	r0, [r0, #4]
 8004136:	0052      	lsls	r2, r2, #1
 8004138:	4290      	cmp	r0, r2
 800413a:	d108      	bne.n	800414e <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800413c:	000a      	movs	r2, r1
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	0020      	movs	r0, r4
 8004142:	f7ff ff87 	bl	8004054 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004146:	2800      	cmp	r0, #0
 8004148:	d109      	bne.n	800415e <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800414a:	2000      	movs	r0, #0
}
 800414c:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800414e:	0022      	movs	r2, r4
 8004150:	3251      	adds	r2, #81	; 0x51
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	2a05      	cmp	r2, #5
 8004156:	d1f8      	bne.n	800414a <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004158:	000a      	movs	r2, r1
 800415a:	2101      	movs	r1, #1
 800415c:	e7f0      	b.n	8004140 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415e:	2320      	movs	r3, #32
 8004160:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004162:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004164:	4313      	orrs	r3, r2
 8004166:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004168:	e7f0      	b.n	800414c <SPI_EndRxTxTransaction+0x20>
	...

0800416c <HAL_SPI_Init>:
{
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004170:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004172:	2c00      	cmp	r4, #0
 8004174:	d037      	beq.n	80041e6 <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004176:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004178:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800417c:	3551      	adds	r5, #81	; 0x51
 800417e:	782b      	ldrb	r3, [r5, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8004186:	0023      	movs	r3, r4
 8004188:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 800418a:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800418c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800418e:	f7fd fe41 	bl	8001e14 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004192:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004194:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004196:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004198:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800419a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800419c:	680b      	ldr	r3, [r1, #0]
 800419e:	4393      	bics	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041a2:	6863      	ldr	r3, [r4, #4]
 80041a4:	69a2      	ldr	r2, [r4, #24]
 80041a6:	4303      	orrs	r3, r0
 80041a8:	68e0      	ldr	r0, [r4, #12]
 80041aa:	4303      	orrs	r3, r0
 80041ac:	6920      	ldr	r0, [r4, #16]
 80041ae:	4303      	orrs	r3, r0
 80041b0:	6960      	ldr	r0, [r4, #20]
 80041b2:	4303      	orrs	r3, r0
 80041b4:	69e0      	ldr	r0, [r4, #28]
 80041b6:	4303      	orrs	r3, r0
 80041b8:	6a20      	ldr	r0, [r4, #32]
 80041ba:	4303      	orrs	r3, r0
 80041bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80041be:	4303      	orrs	r3, r0
 80041c0:	2080      	movs	r0, #128	; 0x80
 80041c2:	0080      	lsls	r0, r0, #2
 80041c4:	4010      	ands	r0, r2
 80041c6:	4303      	orrs	r3, r0
 80041c8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041ca:	2304      	movs	r3, #4
 80041cc:	0c12      	lsrs	r2, r2, #16
 80041ce:	401a      	ands	r2, r3
 80041d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041d2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041d4:	431a      	orrs	r2, r3
 80041d6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d8:	69cb      	ldr	r3, [r1, #28]
 80041da:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <HAL_SPI_Init+0x7c>)
 80041dc:	4013      	ands	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80041e0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041e4:	702b      	strb	r3, [r5, #0]
}
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	fffff7ff 	.word	0xfffff7ff

080041ec <HAL_SPI_TransmitReceive_DMA>:
{
 80041ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80041ee:	0006      	movs	r6, r0
 80041f0:	3650      	adds	r6, #80	; 0x50
 80041f2:	7835      	ldrb	r5, [r6, #0]
{
 80041f4:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80041f6:	2002      	movs	r0, #2
 80041f8:	2d01      	cmp	r5, #1
 80041fa:	d048      	beq.n	800428e <HAL_SPI_TransmitReceive_DMA+0xa2>
  tmp_state           = hspi->State;
 80041fc:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 80041fe:	3801      	subs	r0, #1
 8004200:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8004202:	3551      	adds	r5, #81	; 0x51
 8004204:	7828      	ldrb	r0, [r5, #0]
 8004206:	b2c7      	uxtb	r7, r0
 8004208:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800420a:	2801      	cmp	r0, #1
 800420c:	d00d      	beq.n	800422a <HAL_SPI_TransmitReceive_DMA+0x3e>
 800420e:	2082      	movs	r0, #130	; 0x82
 8004210:	0040      	lsls	r0, r0, #1
 8004212:	4684      	mov	ip, r0
 8004214:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 8004216:	3803      	subs	r0, #3
 8004218:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800421a:	4567      	cmp	r7, ip
 800421c:	d135      	bne.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800421e:	68a7      	ldr	r7, [r4, #8]
 8004220:	2f00      	cmp	r7, #0
 8004222:	d132      	bne.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
 8004224:	9f01      	ldr	r7, [sp, #4]
 8004226:	2f04      	cmp	r7, #4
 8004228:	d12f      	bne.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
    errorcode = HAL_ERROR;
 800422a:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800422c:	2900      	cmp	r1, #0
 800422e:	d02c      	beq.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
 8004230:	2a00      	cmp	r2, #0
 8004232:	d02a      	beq.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d028      	beq.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004238:	7828      	ldrb	r0, [r5, #0]
 800423a:	2804      	cmp	r0, #4
 800423c:	d001      	beq.n	8004242 <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800423e:	2005      	movs	r0, #5
 8004240:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004242:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004244:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004246:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004248:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800424a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 800424c:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 800424e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004250:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004252:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004254:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004256:	782b      	ldrb	r3, [r5, #0]
 8004258:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800425a:	2b04      	cmp	r3, #4
 800425c:	d118      	bne.n	8004290 <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800425e:	4b23      	ldr	r3, [pc, #140]	; (80042ec <HAL_SPI_TransmitReceive_DMA+0x100>)
 8004260:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004262:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004264:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004266:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_SPI_TransmitReceive_DMA+0x108>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004268:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800426a:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004272:	310c      	adds	r1, #12
 8004274:	b29b      	uxth	r3, r3
 8004276:	f7fe fdbd 	bl	8002df4 <HAL_DMA_Start_IT>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d00c      	beq.n	8004298 <HAL_SPI_TransmitReceive_DMA+0xac>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800427e:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 8004280:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004282:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004284:	4313      	orrs	r3, r2
 8004286:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8004288:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 800428a:	2300      	movs	r3, #0
 800428c:	7033      	strb	r3, [r6, #0]
}
 800428e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_SPI_TransmitReceive_DMA+0x10c>)
 8004292:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_SPI_TransmitReceive_DMA+0x110>)
 8004296:	e7e5      	b.n	8004264 <HAL_SPI_TransmitReceive_DMA+0x78>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004298:	2701      	movs	r7, #1
 800429a:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800429c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800429e:	6851      	ldr	r1, [r2, #4]
 80042a0:	4339      	orrs	r1, r7
 80042a2:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80042a4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80042a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80042a8:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80042aa:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80042ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80042ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	320c      	adds	r2, #12
 80042b4:	f7fe fd9e 	bl	8002df4 <HAL_DMA_Start_IT>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d006      	beq.n	80042ca <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042bc:	2310      	movs	r3, #16
 80042be:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80042c0:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042c2:	4313      	orrs	r3, r2
 80042c4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80042c6:	702f      	strb	r7, [r5, #0]
    goto error;
 80042c8:	e7df      	b.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ca:	2240      	movs	r2, #64	; 0x40
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	4211      	tst	r1, r2
 80042d2:	d102      	bne.n	80042da <HAL_SPI_TransmitReceive_DMA+0xee>
    __HAL_SPI_ENABLE(hspi);
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042da:	2220      	movs	r2, #32
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042e2:	2202      	movs	r2, #2
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	e7ce      	b.n	800428a <HAL_SPI_TransmitReceive_DMA+0x9e>
 80042ec:	08004305 	.word	0x08004305
 80042f0:	08004341 	.word	0x08004341
 80042f4:	0800431d 	.word	0x0800431d
 80042f8:	08004311 	.word	0x08004311
 80042fc:	08004397 	.word	0x08004397

08004300 <HAL_SPI_RxCpltCallback>:
 8004300:	4770      	bx	lr

08004302 <HAL_SPI_RxHalfCpltCallback>:
 8004302:	4770      	bx	lr

08004304 <SPI_DMAHalfReceiveCplt>:
{
 8004304:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004306:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004308:	f7ff fffb 	bl	8004302 <HAL_SPI_RxHalfCpltCallback>
}
 800430c:	bd10      	pop	{r4, pc}

0800430e <HAL_SPI_TxRxHalfCpltCallback>:
 800430e:	4770      	bx	lr

08004310 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8004310:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004312:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004314:	f7ff fffb 	bl	800430e <HAL_SPI_TxRxHalfCpltCallback>
}
 8004318:	bd10      	pop	{r4, pc}

0800431a <HAL_SPI_ErrorCallback>:
 800431a:	4770      	bx	lr

0800431c <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800431c:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800431e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004320:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004322:	6802      	ldr	r2, [r0, #0]
 8004324:	6853      	ldr	r3, [r2, #4]
 8004326:	438b      	bics	r3, r1
 8004328:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800432a:	2310      	movs	r3, #16
 800432c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800432e:	4313      	orrs	r3, r2
 8004330:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004332:	0003      	movs	r3, r0
 8004334:	2201      	movs	r2, #1
 8004336:	3351      	adds	r3, #81	; 0x51
 8004338:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 800433a:	f7ff ffee 	bl	800431a <HAL_SPI_ErrorCallback>
}
 800433e:	bd10      	pop	{r4, pc}

08004340 <SPI_DMAReceiveCplt>:
{
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004344:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004346:	f7fe fae7 	bl	8002918 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	2520      	movs	r5, #32
 800434e:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8004350:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004352:	422b      	tst	r3, r5
 8004354:	d11b      	bne.n	800438e <SPI_DMAReceiveCplt+0x4e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004356:	2003      	movs	r0, #3
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	43a9      	bics	r1, r5
 800435e:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	4381      	bics	r1, r0
 8004364:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004366:	0020      	movs	r0, r4
 8004368:	2164      	movs	r1, #100	; 0x64
 800436a:	f7ff feb5 	bl	80040d8 <SPI_EndRxTransaction>
 800436e:	2800      	cmp	r0, #0
 8004370:	d000      	beq.n	8004374 <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004372:	6565      	str	r5, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004378:	0023      	movs	r3, r4
 800437a:	2201      	movs	r2, #1
 800437c:	3351      	adds	r3, #81	; 0x51
 800437e:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004380:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <SPI_DMAReceiveCplt+0x4e>
      HAL_SPI_ErrorCallback(hspi);
 8004386:	0020      	movs	r0, r4
 8004388:	f7ff ffc7 	bl	800431a <HAL_SPI_ErrorCallback>
}
 800438c:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_RxCpltCallback(hspi);
 800438e:	0020      	movs	r0, r4
 8004390:	f7ff ffb6 	bl	8004300 <HAL_SPI_RxCpltCallback>
 8004394:	e7fa      	b.n	800438c <SPI_DMAReceiveCplt+0x4c>

08004396 <SPI_DMATransmitReceiveCplt>:
{
 8004396:	b570      	push	{r4, r5, r6, lr}
 8004398:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800439a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800439c:	f7fe fabc 	bl	8002918 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	2520      	movs	r5, #32
 80043a4:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80043a6:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80043a8:	422b      	tst	r3, r5
 80043aa:	d11f      	bne.n	80043ec <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043ac:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043ae:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043b0:	684b      	ldr	r3, [r1, #4]
 80043b2:	43ab      	bics	r3, r5
 80043b4:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043b6:	2164      	movs	r1, #100	; 0x64
 80043b8:	f7ff feb8 	bl	800412c <SPI_EndRxTxTransaction>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d002      	beq.n	80043c6 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043c2:	431d      	orrs	r5, r3
 80043c4:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043c6:	2103      	movs	r1, #3
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	6853      	ldr	r3, [r2, #4]
 80043cc:	438b      	bics	r3, r1
 80043ce:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80043d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80043d6:	0023      	movs	r3, r4
 80043d8:	2201      	movs	r2, #1
 80043da:	3351      	adds	r3, #81	; 0x51
 80043dc:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 80043e4:	0020      	movs	r0, r4
 80043e6:	f7ff ff98 	bl	800431a <HAL_SPI_ErrorCallback>
}
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 80043ec:	0020      	movs	r0, r4
 80043ee:	f7fd fe9b 	bl	8002128 <HAL_SPI_TxRxCpltCallback>
 80043f2:	e7fa      	b.n	80043ea <SPI_DMATransmitReceiveCplt+0x54>

080043f4 <HAL_SPI_GetState>:
  return hspi->State;
 80043f4:	3051      	adds	r0, #81	; 0x51
 80043f6:	7800      	ldrb	r0, [r0, #0]
 80043f8:	b2c0      	uxtb	r0, r0
}
 80043fa:	4770      	bx	lr

080043fc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	2280      	movs	r2, #128	; 0x80
{
 80043fe:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004400:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004402:	05d2      	lsls	r2, r2, #23
 8004404:	4290      	cmp	r0, r2
 8004406:	d005      	beq.n	8004414 <TIM_Base_SetConfig+0x18>
 8004408:	4c10      	ldr	r4, [pc, #64]	; (800444c <TIM_Base_SetConfig+0x50>)
 800440a:	42a0      	cmp	r0, r4
 800440c:	d002      	beq.n	8004414 <TIM_Base_SetConfig+0x18>
 800440e:	4c10      	ldr	r4, [pc, #64]	; (8004450 <TIM_Base_SetConfig+0x54>)
 8004410:	42a0      	cmp	r0, r4
 8004412:	d10f      	bne.n	8004434 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004414:	2470      	movs	r4, #112	; 0x70
 8004416:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004418:	684c      	ldr	r4, [r1, #4]
 800441a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441c:	4290      	cmp	r0, r2
 800441e:	d005      	beq.n	800442c <TIM_Base_SetConfig+0x30>
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <TIM_Base_SetConfig+0x50>)
 8004422:	4290      	cmp	r0, r2
 8004424:	d002      	beq.n	800442c <TIM_Base_SetConfig+0x30>
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <TIM_Base_SetConfig+0x54>)
 8004428:	4290      	cmp	r0, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <TIM_Base_SetConfig+0x58>)
 800442e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004430:	68ca      	ldr	r2, [r1, #12]
 8004432:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	4393      	bics	r3, r2
 8004438:	690a      	ldr	r2, [r1, #16]
 800443a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800443c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800443e:	688b      	ldr	r3, [r1, #8]
 8004440:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004442:	680b      	ldr	r3, [r1, #0]
 8004444:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004446:	2301      	movs	r3, #1
 8004448:	6143      	str	r3, [r0, #20]
}
 800444a:	bd10      	pop	{r4, pc}
 800444c:	40010800 	.word	0x40010800
 8004450:	40011400 	.word	0x40011400
 8004454:	fffffcff 	.word	0xfffffcff

08004458 <HAL_TIM_Base_Init>:
{
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800445c:	2001      	movs	r0, #1
  if (htim == NULL)
 800445e:	2c00      	cmp	r4, #0
 8004460:	d014      	beq.n	800448c <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	0025      	movs	r5, r4
 8004464:	3539      	adds	r5, #57	; 0x39
 8004466:	782b      	ldrb	r3, [r5, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800446e:	0023      	movs	r3, r4
 8004470:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004472:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004474:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004476:	f7fe f801 	bl	800247c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800447a:	2302      	movs	r3, #2
 800447c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d21      	adds	r1, r4, #4
 8004482:	f7ff ffbb 	bl	80043fc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004486:	2301      	movs	r3, #1
  return HAL_OK;
 8004488:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800448a:	702b      	strb	r3, [r5, #0]
}
 800448c:	bd70      	pop	{r4, r5, r6, pc}

0800448e <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800448e:	0001      	movs	r1, r0
 8004490:	2302      	movs	r3, #2
 8004492:	3139      	adds	r1, #57	; 0x39
 8004494:	700b      	strb	r3, [r1, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004496:	6803      	ldr	r3, [r0, #0]
 8004498:	2007      	movs	r0, #7
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	2a06      	cmp	r2, #6
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 80044a2:	2201      	movs	r2, #1
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	4302      	orrs	r2, r0
 80044a8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	700b      	strb	r3, [r1, #0]
}
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	0001      	movs	r1, r0
 80044b6:	2302      	movs	r3, #2
 80044b8:	3139      	adds	r1, #57	; 0x39
 80044ba:	700b      	strb	r3, [r1, #0]
  __HAL_TIM_DISABLE(htim);
 80044bc:	6803      	ldr	r3, [r0, #0]
 80044be:	4a06      	ldr	r2, [pc, #24]	; (80044d8 <HAL_TIM_Base_Stop+0x24>)
 80044c0:	6a18      	ldr	r0, [r3, #32]
 80044c2:	4210      	tst	r0, r2
 80044c4:	d103      	bne.n	80044ce <HAL_TIM_Base_Stop+0x1a>
 80044c6:	2001      	movs	r0, #1
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4382      	bics	r2, r0
 80044cc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	2301      	movs	r3, #1
}
 80044d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80044d2:	700b      	strb	r3, [r1, #0]
}
 80044d4:	4770      	bx	lr
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	00001111 	.word	0x00001111

080044dc <HAL_TIM_ConfigClockSource>:
{
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80044de:	0004      	movs	r4, r0
 80044e0:	2202      	movs	r2, #2
 80044e2:	3438      	adds	r4, #56	; 0x38
 80044e4:	7825      	ldrb	r5, [r4, #0]
{
 80044e6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80044e8:	0010      	movs	r0, r2
 80044ea:	2d01      	cmp	r5, #1
 80044ec:	d024      	beq.n	8004538 <HAL_TIM_ConfigClockSource+0x5c>
  htim->State = HAL_TIM_STATE_BUSY;
 80044ee:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 80044f0:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 80044f4:	7026      	strb	r6, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80044f8:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fa:	4845      	ldr	r0, [pc, #276]	; (8004610 <HAL_TIM_ConfigClockSource+0x134>)
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fe:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8004500:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004502:	680a      	ldr	r2, [r1, #0]
 8004504:	2a60      	cmp	r2, #96	; 0x60
 8004506:	d055      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xd8>
 8004508:	d82f      	bhi.n	800456a <HAL_TIM_ConfigClockSource+0x8e>
 800450a:	2a40      	cmp	r2, #64	; 0x40
 800450c:	d100      	bne.n	8004510 <HAL_TIM_ConfigClockSource+0x34>
 800450e:	e069      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x108>
 8004510:	d813      	bhi.n	800453a <HAL_TIM_ConfigClockSource+0x5e>
 8004512:	2a20      	cmp	r2, #32
 8004514:	d004      	beq.n	8004520 <HAL_TIM_ConfigClockSource+0x44>
 8004516:	d809      	bhi.n	800452c <HAL_TIM_ConfigClockSource+0x50>
 8004518:	2110      	movs	r1, #16
 800451a:	0010      	movs	r0, r2
 800451c:	4388      	bics	r0, r1
 800451e:	d107      	bne.n	8004530 <HAL_TIM_ConfigClockSource+0x54>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004520:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004522:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004524:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004526:	430a      	orrs	r2, r1
 8004528:	2107      	movs	r1, #7
 800452a:	e040      	b.n	80045ae <HAL_TIM_ConfigClockSource+0xd2>
  switch (sClockSourceConfig->ClockSource)
 800452c:	2a30      	cmp	r2, #48	; 0x30
 800452e:	d0f7      	beq.n	8004520 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_READY;
 8004530:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004532:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004534:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004536:	7020      	strb	r0, [r4, #0]
}
 8004538:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800453a:	2a50      	cmp	r2, #80	; 0x50
 800453c:	d1f8      	bne.n	8004530 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453e:	6848      	ldr	r0, [r1, #4]
 8004540:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8004542:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004544:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004546:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004548:	43b7      	bics	r7, r6
 800454a:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800454e:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004550:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004552:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004554:	260a      	movs	r6, #10
 8004556:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 8004558:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800455a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455c:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800455e:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004560:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	438a      	bics	r2, r1
 8004564:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004566:	2257      	movs	r2, #87	; 0x57
 8004568:	e021      	b.n	80045ae <HAL_TIM_ConfigClockSource+0xd2>
  switch (sClockSourceConfig->ClockSource)
 800456a:	2a70      	cmp	r2, #112	; 0x70
 800456c:	d012      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xb8>
 800456e:	2080      	movs	r0, #128	; 0x80
 8004570:	0180      	lsls	r0, r0, #6
 8004572:	4282      	cmp	r2, r0
 8004574:	d1dc      	bne.n	8004530 <HAL_TIM_ConfigClockSource+0x54>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004576:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	4826      	ldr	r0, [pc, #152]	; (8004614 <HAL_TIM_ConfigClockSource+0x138>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457a:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457e:	688a      	ldr	r2, [r1, #8]
 8004580:	68c9      	ldr	r1, [r1, #12]
 8004582:	4332      	orrs	r2, r6
 8004584:	0209      	lsls	r1, r1, #8
 8004586:	430a      	orrs	r2, r1
 8004588:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800458c:	2280      	movs	r2, #128	; 0x80
 800458e:	6899      	ldr	r1, [r3, #8]
 8004590:	01d2      	lsls	r2, r2, #7
 8004592:	e00c      	b.n	80045ae <HAL_TIM_ConfigClockSource+0xd2>
  tmpsmcr = TIMx->SMCR;
 8004594:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004596:	481f      	ldr	r0, [pc, #124]	; (8004614 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004598:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459a:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800459c:	688a      	ldr	r2, [r1, #8]
 800459e:	68c9      	ldr	r1, [r1, #12]
 80045a0:	4332      	orrs	r2, r6
 80045a2:	0209      	lsls	r1, r1, #8
 80045a4:	430a      	orrs	r2, r1
 80045a6:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80045a8:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045aa:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80045ac:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ae:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	e7bd      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x54>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b4:	2610      	movs	r6, #16
 80045b6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ba:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045bc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c0:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c2:	4f15      	ldr	r7, [pc, #84]	; (8004618 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c6:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c8:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ca:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80045cc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80045ce:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d0:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d2:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d4:	0112      	lsls	r2, r2, #4
 80045d6:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80045d8:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80045da:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045dc:	438a      	bics	r2, r1
 80045de:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e0:	2267      	movs	r2, #103	; 0x67
 80045e2:	e7e4      	b.n	80045ae <HAL_TIM_ConfigClockSource+0xd2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e4:	6848      	ldr	r0, [r1, #4]
 80045e6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80045e8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ec:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ee:	43b7      	bics	r7, r6
 80045f0:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f2:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80045f4:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f6:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f8:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fa:	260a      	movs	r6, #10
 80045fc:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80045fe:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004602:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004604:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004606:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004608:	438a      	bics	r2, r1
 800460a:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460c:	2247      	movs	r2, #71	; 0x47
 800460e:	e7ce      	b.n	80045ae <HAL_TIM_ConfigClockSource+0xd2>
 8004610:	ffff0088 	.word	0xffff0088
 8004614:	ffff00ff 	.word	0xffff00ff
 8004618:	ffff0fff 	.word	0xffff0fff

0800461c <HAL_TIM_PeriodElapsedCallback>:
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_OC_DelayElapsedCallback>:
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_IC_CaptureCallback>:
 8004620:	4770      	bx	lr

08004622 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_TriggerCallback>:
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004626:	2202      	movs	r2, #2
 8004628:	6803      	ldr	r3, [r0, #0]
{
 800462a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800462c:	6919      	ldr	r1, [r3, #16]
{
 800462e:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004630:	4211      	tst	r1, r2
 8004632:	d00d      	beq.n	8004650 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	4211      	tst	r1, r2
 8004638:	d00a      	beq.n	8004650 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800463a:	3a05      	subs	r2, #5
 800463c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463e:	3204      	adds	r2, #4
 8004640:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	079b      	lsls	r3, r3, #30
 8004646:	d05e      	beq.n	8004706 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8004648:	f7ff ffea 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464c:	2300      	movs	r3, #0
 800464e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004650:	2204      	movs	r2, #4
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	6919      	ldr	r1, [r3, #16]
 8004656:	4211      	tst	r1, r2
 8004658:	d010      	beq.n	800467c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	4211      	tst	r1, r2
 800465e:	d00d      	beq.n	800467c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004660:	3a09      	subs	r2, #9
 8004662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004664:	3207      	adds	r2, #7
 8004666:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	23c0      	movs	r3, #192	; 0xc0
 800466c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004670:	421a      	tst	r2, r3
 8004672:	d04e      	beq.n	8004712 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8004674:	f7ff ffd4 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004678:	2300      	movs	r3, #0
 800467a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800467c:	2208      	movs	r2, #8
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6919      	ldr	r1, [r3, #16]
 8004682:	4211      	tst	r1, r2
 8004684:	d00e      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004686:	68d9      	ldr	r1, [r3, #12]
 8004688:	4211      	tst	r1, r2
 800468a:	d00b      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800468c:	3a11      	subs	r2, #17
 800468e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004690:	320d      	adds	r2, #13
 8004692:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004694:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004698:	079b      	lsls	r3, r3, #30
 800469a:	d040      	beq.n	800471e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800469c:	f7ff ffc0 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a0:	2300      	movs	r3, #0
 80046a2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046a4:	2210      	movs	r2, #16
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	6919      	ldr	r1, [r3, #16]
 80046aa:	4211      	tst	r1, r2
 80046ac:	d010      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ae:	68d9      	ldr	r1, [r3, #12]
 80046b0:	4211      	tst	r1, r2
 80046b2:	d00d      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046b4:	3a21      	subs	r2, #33	; 0x21
 80046b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b8:	3219      	adds	r2, #25
 80046ba:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046bc:	69da      	ldr	r2, [r3, #28]
 80046be:	23c0      	movs	r3, #192	; 0xc0
 80046c0:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046c4:	421a      	tst	r2, r3
 80046c6:	d030      	beq.n	800472a <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 80046c8:	f7ff ffaa 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046cc:	2300      	movs	r3, #0
 80046ce:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d0:	2201      	movs	r2, #1
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	6919      	ldr	r1, [r3, #16]
 80046d6:	4211      	tst	r1, r2
 80046d8:	d007      	beq.n	80046ea <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046da:	68d9      	ldr	r1, [r3, #12]
 80046dc:	4211      	tst	r1, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e0:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	f7ff ff99 	bl	800461c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	6919      	ldr	r1, [r3, #16]
 80046f0:	4211      	tst	r1, r2
 80046f2:	d007      	beq.n	8004704 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	4211      	tst	r1, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fa:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 80046fc:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004700:	f7ff ff90 	bl	8004624 <HAL_TIM_TriggerCallback>
}
 8004704:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	f7ff ff8a 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470a:	0020      	movs	r0, r4
 800470c:	f7ff ff89 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
 8004710:	e79c      	b.n	800464c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	f7ff ff84 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004716:	0020      	movs	r0, r4
 8004718:	f7ff ff83 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
 800471c:	e7ac      	b.n	8004678 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	f7ff ff7e 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004722:	0020      	movs	r0, r4
 8004724:	f7ff ff7d 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
 8004728:	e7ba      	b.n	80046a0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472a:	f7ff ff78 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472e:	0020      	movs	r0, r4
 8004730:	f7ff ff77 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
 8004734:	e7ca      	b.n	80046cc <HAL_TIM_IRQHandler+0xa6>

08004736 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004736:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004738:	0004      	movs	r4, r0
 800473a:	2202      	movs	r2, #2
 800473c:	3438      	adds	r4, #56	; 0x38
 800473e:	7825      	ldrb	r5, [r4, #0]
{
 8004740:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004742:	0010      	movs	r0, r2
 8004744:	2d01      	cmp	r5, #1
 8004746:	d013      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x3a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	0018      	movs	r0, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474a:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	3039      	adds	r0, #57	; 0x39
 800474e:	7002      	strb	r2, [r0, #0]
  tmpcr2 = htim->Instance->CR2;
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	686a      	ldr	r2, [r5, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004754:	68ab      	ldr	r3, [r5, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004756:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004758:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800475c:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 800475e:	2680      	movs	r6, #128	; 0x80
 8004760:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004762:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004764:	606a      	str	r2, [r5, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004766:	60ab      	str	r3, [r5, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	2301      	movs	r3, #1
 800476a:	7003      	strb	r3, [r0, #0]

  __HAL_UNLOCK(htim);
 800476c:	2000      	movs	r0, #0
 800476e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004770:	bd70      	pop	{r4, r5, r6, pc}
	...

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	0005      	movs	r5, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004778:	692c      	ldr	r4, [r5, #16]
 800477a:	68aa      	ldr	r2, [r5, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800477c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800477e:	4322      	orrs	r2, r4
 8004780:	696c      	ldr	r4, [r5, #20]
 8004782:	69c1      	ldr	r1, [r0, #28]
 8004784:	4322      	orrs	r2, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	4c89      	ldr	r4, [pc, #548]	; (80049b0 <UART_SetConfig+0x23c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800478c:	4020      	ands	r0, r4
 800478e:	4302      	orrs	r2, r0
 8004790:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	4887      	ldr	r0, [pc, #540]	; (80049b4 <UART_SetConfig+0x240>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004796:	4c88      	ldr	r4, [pc, #544]	; (80049b8 <UART_SetConfig+0x244>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	4002      	ands	r2, r0
 800479a:	68e8      	ldr	r0, [r5, #12]
 800479c:	4302      	orrs	r2, r0
 800479e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a0:	69a8      	ldr	r0, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	d001      	beq.n	80047aa <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047a6:	6a2a      	ldr	r2, [r5, #32]
 80047a8:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	4e83      	ldr	r6, [pc, #524]	; (80049bc <UART_SetConfig+0x248>)
 80047ae:	4032      	ands	r2, r6
 80047b0:	4302      	orrs	r2, r0
 80047b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b4:	4a82      	ldr	r2, [pc, #520]	; (80049c0 <UART_SetConfig+0x24c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d113      	bne.n	80047e2 <UART_SetConfig+0x6e>
 80047ba:	2203      	movs	r2, #3
 80047bc:	4b81      	ldr	r3, [pc, #516]	; (80049c4 <UART_SetConfig+0x250>)
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	4013      	ands	r3, r2
 80047c2:	3b01      	subs	r3, #1
 80047c4:	4a80      	ldr	r2, [pc, #512]	; (80049c8 <UART_SetConfig+0x254>)
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d913      	bls.n	80047f2 <UART_SetConfig+0x7e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d100      	bne.n	80047d4 <UART_SetConfig+0x60>
 80047d2:	e085      	b.n	80048e0 <UART_SetConfig+0x16c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047d4:	f7ff f8f2 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80047d8:	686b      	ldr	r3, [r5, #4]
 80047da:	085b      	lsrs	r3, r3, #1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047dc:	6869      	ldr	r1, [r5, #4]
 80047de:	18c0      	adds	r0, r0, r3
 80047e0:	e0c7      	b.n	8004972 <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e2:	4a7a      	ldr	r2, [pc, #488]	; (80049cc <UART_SetConfig+0x258>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d115      	bne.n	8004814 <UART_SetConfig+0xa0>
 80047e8:	220c      	movs	r2, #12
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <UART_SetConfig+0x250>)
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	4013      	ands	r3, r2
 80047f0:	4a77      	ldr	r2, [pc, #476]	; (80049d0 <UART_SetConfig+0x25c>)
 80047f2:	5cd4      	ldrb	r4, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d000      	beq.n	80047fe <UART_SetConfig+0x8a>
 80047fc:	e096      	b.n	800492c <UART_SetConfig+0x1b8>
    switch (clocksource)
 80047fe:	2c08      	cmp	r4, #8
 8004800:	d900      	bls.n	8004804 <UART_SetConfig+0x90>
 8004802:	e090      	b.n	8004926 <UART_SetConfig+0x1b2>
 8004804:	0020      	movs	r0, r4
 8004806:	f7fc fa65 	bl	8000cd4 <__gnu_thumb1_case_uqi>
 800480a:	6b52      	.short	0x6b52
 800480c:	8e868e73 	.word	0x8e868e73
 8004810:	8e8e      	.short	0x8e8e
 8004812:	89          	.byte	0x89
 8004813:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004814:	42a3      	cmp	r3, r4
 8004816:	d000      	beq.n	800481a <UART_SetConfig+0xa6>
 8004818:	e0c3      	b.n	80049a2 <UART_SetConfig+0x22e>
 800481a:	21c0      	movs	r1, #192	; 0xc0
 800481c:	2080      	movs	r0, #128	; 0x80
 800481e:	4a69      	ldr	r2, [pc, #420]	; (80049c4 <UART_SetConfig+0x250>)
 8004820:	0109      	lsls	r1, r1, #4
 8004822:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004824:	0100      	lsls	r0, r0, #4
 8004826:	400b      	ands	r3, r1
 8004828:	4283      	cmp	r3, r0
 800482a:	d017      	beq.n	800485c <UART_SetConfig+0xe8>
 800482c:	d807      	bhi.n	800483e <UART_SetConfig+0xca>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_SetConfig+0xd4>
 8004832:	2280      	movs	r2, #128	; 0x80
 8004834:	00d2      	lsls	r2, r2, #3
 8004836:	4293      	cmp	r3, r2
 8004838:	d036      	beq.n	80048a8 <UART_SetConfig+0x134>
        ret = HAL_ERROR;
 800483a:	2401      	movs	r4, #1
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0xde>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483e:	428b      	cmp	r3, r1
 8004840:	d1fb      	bne.n	800483a <UART_SetConfig+0xc6>
 8004842:	2080      	movs	r0, #128	; 0x80
 8004844:	0200      	lsls	r0, r0, #8
 8004846:	e013      	b.n	8004870 <UART_SetConfig+0xfc>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004848:	f7ff f8a8 	bl	800399c <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800484c:	2400      	movs	r4, #0
 800484e:	42a0      	cmp	r0, r4
 8004850:	d10e      	bne.n	8004870 <UART_SetConfig+0xfc>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004852:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8004854:	0020      	movs	r0, r4
  huart->RxISR = NULL;
 8004856:	662b      	str	r3, [r5, #96]	; 0x60
  huart->TxISR = NULL;
 8004858:	666b      	str	r3, [r5, #100]	; 0x64
}
 800485a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800485c:	2310      	movs	r3, #16
 800485e:	6810      	ldr	r0, [r2, #0]
 8004860:	4018      	ands	r0, r3
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004862:	4243      	negs	r3, r0
 8004864:	4158      	adcs	r0, r3
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <UART_SetConfig+0x260>)
 8004868:	4240      	negs	r0, r0
 800486a:	4018      	ands	r0, r3
 800486c:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <UART_SetConfig+0x264>)
 800486e:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004870:	2303      	movs	r3, #3
 8004872:	686a      	ldr	r2, [r5, #4]
 8004874:	4353      	muls	r3, r2
 8004876:	4283      	cmp	r3, r0
 8004878:	d8df      	bhi.n	800483a <UART_SetConfig+0xc6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800487a:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487c:	4283      	cmp	r3, r0
 800487e:	d3dc      	bcc.n	800483a <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004880:	2700      	movs	r7, #0
 8004882:	0856      	lsrs	r6, r2, #1
 8004884:	0e04      	lsrs	r4, r0, #24
 8004886:	0203      	lsls	r3, r0, #8
 8004888:	199b      	adds	r3, r3, r6
 800488a:	417c      	adcs	r4, r7
 800488c:	0018      	movs	r0, r3
 800488e:	0021      	movs	r1, r4
 8004890:	003b      	movs	r3, r7
 8004892:	f7fc fbb5 	bl	8001000 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <UART_SetConfig+0x268>)
 8004898:	18c2      	adds	r2, r0, r3
 800489a:	4b51      	ldr	r3, [pc, #324]	; (80049e0 <UART_SetConfig+0x26c>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d8cc      	bhi.n	800483a <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	003c      	movs	r4, r7
 80048a4:	60d8      	str	r0, [r3, #12]
 80048a6:	e7d4      	b.n	8004852 <UART_SetConfig+0xde>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80048a8:	f7fe fd00 	bl	80032ac <HAL_RCC_GetSysClockFreq>
        break;
 80048ac:	e7ce      	b.n	800484c <UART_SetConfig+0xd8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048ae:	f7ff f875 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 80048b2:	686b      	ldr	r3, [r5, #4]
 80048b4:	0040      	lsls	r0, r0, #1
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	6869      	ldr	r1, [r5, #4]
 80048ba:	18c0      	adds	r0, r0, r3
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80048bc:	f7fc fa1e 	bl	8000cfc <__udivsi3>
 80048c0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c2:	0003      	movs	r3, r0
 80048c4:	4a47      	ldr	r2, [pc, #284]	; (80049e4 <UART_SetConfig+0x270>)
 80048c6:	3b10      	subs	r3, #16
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d8b6      	bhi.n	800483a <UART_SetConfig+0xc6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048cc:	230f      	movs	r3, #15
 80048ce:	0002      	movs	r2, r0
 80048d0:	439a      	bics	r2, r3
 80048d2:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d4:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 80048d6:	682a      	ldr	r2, [r5, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d8:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 80048da:	4318      	orrs	r0, r3
 80048dc:	60d0      	str	r0, [r2, #12]
 80048de:	e7b8      	b.n	8004852 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80048e0:	f7ff f86c 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048e4:	686b      	ldr	r3, [r5, #4]
 80048e6:	0040      	lsls	r0, r0, #1
 80048e8:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80048ea:	6869      	ldr	r1, [r5, #4]
 80048ec:	18c0      	adds	r0, r0, r3
 80048ee:	e00a      	b.n	8004906 <UART_SetConfig+0x192>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <UART_SetConfig+0x250>)
 80048f2:	6869      	ldr	r1, [r5, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	2310      	movs	r3, #16
 80048f8:	0014      	movs	r4, r2
 80048fa:	0848      	lsrs	r0, r1, #1
 80048fc:	401c      	ands	r4, r3
 80048fe:	421a      	tst	r2, r3
 8004900:	d006      	beq.n	8004910 <UART_SetConfig+0x19c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <UART_SetConfig+0x274>)
 8004904:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004906:	f7fc f9f9 	bl	8000cfc <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800490a:	2400      	movs	r4, #0
 800490c:	b280      	uxth	r0, r0
        break;
 800490e:	e7d8      	b.n	80048c2 <UART_SetConfig+0x14e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <UART_SetConfig+0x278>)
 8004912:	18c0      	adds	r0, r0, r3
 8004914:	e7d2      	b.n	80048bc <UART_SetConfig+0x148>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004916:	f7fe fcc9 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800491a:	e7e3      	b.n	80048e4 <UART_SetConfig+0x170>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800491c:	686b      	ldr	r3, [r5, #4]
 800491e:	0858      	lsrs	r0, r3, #1
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	025b      	lsls	r3, r3, #9
 8004924:	e7e1      	b.n	80048ea <UART_SetConfig+0x176>
        ret = HAL_ERROR;
 8004926:	2401      	movs	r4, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004928:	2000      	movs	r0, #0
 800492a:	e7ca      	b.n	80048c2 <UART_SetConfig+0x14e>
    switch (clocksource)
 800492c:	2c08      	cmp	r4, #8
 800492e:	d83c      	bhi.n	80049aa <UART_SetConfig+0x236>
 8004930:	0020      	movs	r0, r4
 8004932:	f7fc f9d9 	bl	8000ce8 <__gnu_thumb1_case_shi>
 8004936:	0009      	.short	0x0009
 8004938:	0013ff4f 	.word	0x0013ff4f
 800493c:	002e003a 	.word	0x002e003a
 8004940:	003a003a 	.word	0x003a003a
 8004944:	0031003a 	.word	0x0031003a
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004948:	f7ff f828 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 800494c:	686b      	ldr	r3, [r5, #4]
 800494e:	6869      	ldr	r1, [r5, #4]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	1818      	adds	r0, r3, r0
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004954:	f7fc f9d2 	bl	8000cfc <__udivsi3>
 8004958:	b280      	uxth	r0, r0
 800495a:	e00e      	b.n	800497a <UART_SetConfig+0x206>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <UART_SetConfig+0x250>)
 800495e:	6869      	ldr	r1, [r5, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	2310      	movs	r3, #16
 8004964:	0014      	movs	r4, r2
 8004966:	0848      	lsrs	r0, r1, #1
 8004968:	401c      	ands	r4, r3
 800496a:	421a      	tst	r2, r3
 800496c:	d00e      	beq.n	800498c <UART_SetConfig+0x218>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <UART_SetConfig+0x264>)
 8004970:	18c0      	adds	r0, r0, r3
 8004972:	f7fc f9c3 	bl	8000cfc <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004976:	2400      	movs	r4, #0
 8004978:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	0003      	movs	r3, r0
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <UART_SetConfig+0x270>)
 800497e:	3b10      	subs	r3, #16
 8004980:	4293      	cmp	r3, r2
 8004982:	d900      	bls.n	8004986 <UART_SetConfig+0x212>
 8004984:	e759      	b.n	800483a <UART_SetConfig+0xc6>
      huart->Instance->BRR = usartdiv;
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	60d8      	str	r0, [r3, #12]
 800498a:	e762      	b.n	8004852 <UART_SetConfig+0xde>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <UART_SetConfig+0x27c>)
 800498e:	18c0      	adds	r0, r0, r3
 8004990:	e7e0      	b.n	8004954 <UART_SetConfig+0x1e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004992:	f7fe fc8b 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8004996:	e71f      	b.n	80047d8 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004998:	686b      	ldr	r3, [r5, #4]
 800499a:	0858      	lsrs	r0, r3, #1
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	e71c      	b.n	80047dc <UART_SetConfig+0x68>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	4299      	cmp	r1, r3
 80049a8:	d0bd      	beq.n	8004926 <UART_SetConfig+0x1b2>
 80049aa:	2401      	movs	r4, #1
 80049ac:	2000      	movs	r0, #0
 80049ae:	e7e4      	b.n	800497a <UART_SetConfig+0x206>
 80049b0:	efff69f3 	.word	0xefff69f3
 80049b4:	ffffcfff 	.word	0xffffcfff
 80049b8:	40004800 	.word	0x40004800
 80049bc:	fffff4ff 	.word	0xfffff4ff
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40021000 	.word	0x40021000
 80049c8:	0800682a 	.word	0x0800682a
 80049cc:	40004400 	.word	0x40004400
 80049d0:	0800682d 	.word	0x0800682d
 80049d4:	00b71b00 	.word	0x00b71b00
 80049d8:	003d0900 	.word	0x003d0900
 80049dc:	fffffd00 	.word	0xfffffd00
 80049e0:	000ffcff 	.word	0x000ffcff
 80049e4:	0000ffef 	.word	0x0000ffef
 80049e8:	007a1200 	.word	0x007a1200
 80049ec:	01e84800 	.word	0x01e84800
 80049f0:	00f42400 	.word	0x00f42400

080049f4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80049f6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f8:	07da      	lsls	r2, r3, #31
 80049fa:	d506      	bpl.n	8004a0a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049fc:	6801      	ldr	r1, [r0, #0]
 80049fe:	4c28      	ldr	r4, [pc, #160]	; (8004aa0 <UART_AdvFeatureConfig+0xac>)
 8004a00:	684a      	ldr	r2, [r1, #4]
 8004a02:	4022      	ands	r2, r4
 8004a04:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004a06:	4322      	orrs	r2, r4
 8004a08:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a0a:	079a      	lsls	r2, r3, #30
 8004a0c:	d506      	bpl.n	8004a1c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a0e:	6801      	ldr	r1, [r0, #0]
 8004a10:	4c24      	ldr	r4, [pc, #144]	; (8004aa4 <UART_AdvFeatureConfig+0xb0>)
 8004a12:	684a      	ldr	r2, [r1, #4]
 8004a14:	4022      	ands	r2, r4
 8004a16:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004a18:	4322      	orrs	r2, r4
 8004a1a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1c:	075a      	lsls	r2, r3, #29
 8004a1e:	d506      	bpl.n	8004a2e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a20:	6801      	ldr	r1, [r0, #0]
 8004a22:	4c21      	ldr	r4, [pc, #132]	; (8004aa8 <UART_AdvFeatureConfig+0xb4>)
 8004a24:	684a      	ldr	r2, [r1, #4]
 8004a26:	4022      	ands	r2, r4
 8004a28:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004a2a:	4322      	orrs	r2, r4
 8004a2c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2e:	071a      	lsls	r2, r3, #28
 8004a30:	d506      	bpl.n	8004a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a32:	6801      	ldr	r1, [r0, #0]
 8004a34:	4c1d      	ldr	r4, [pc, #116]	; (8004aac <UART_AdvFeatureConfig+0xb8>)
 8004a36:	684a      	ldr	r2, [r1, #4]
 8004a38:	4022      	ands	r2, r4
 8004a3a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004a3c:	4322      	orrs	r2, r4
 8004a3e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a40:	06da      	lsls	r2, r3, #27
 8004a42:	d506      	bpl.n	8004a52 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a44:	6801      	ldr	r1, [r0, #0]
 8004a46:	4c1a      	ldr	r4, [pc, #104]	; (8004ab0 <UART_AdvFeatureConfig+0xbc>)
 8004a48:	688a      	ldr	r2, [r1, #8]
 8004a4a:	4022      	ands	r2, r4
 8004a4c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004a4e:	4322      	orrs	r2, r4
 8004a50:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a52:	069a      	lsls	r2, r3, #26
 8004a54:	d506      	bpl.n	8004a64 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a56:	6801      	ldr	r1, [r0, #0]
 8004a58:	4c16      	ldr	r4, [pc, #88]	; (8004ab4 <UART_AdvFeatureConfig+0xc0>)
 8004a5a:	688a      	ldr	r2, [r1, #8]
 8004a5c:	4022      	ands	r2, r4
 8004a5e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004a60:	4322      	orrs	r2, r4
 8004a62:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a64:	065a      	lsls	r2, r3, #25
 8004a66:	d510      	bpl.n	8004a8a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a68:	6801      	ldr	r1, [r0, #0]
 8004a6a:	4d13      	ldr	r5, [pc, #76]	; (8004ab8 <UART_AdvFeatureConfig+0xc4>)
 8004a6c:	684a      	ldr	r2, [r1, #4]
 8004a6e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004a70:	402a      	ands	r2, r5
 8004a72:	4322      	orrs	r2, r4
 8004a74:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	0352      	lsls	r2, r2, #13
 8004a7a:	4294      	cmp	r4, r2
 8004a7c:	d105      	bne.n	8004a8a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a7e:	684a      	ldr	r2, [r1, #4]
 8004a80:	4c0e      	ldr	r4, [pc, #56]	; (8004abc <UART_AdvFeatureConfig+0xc8>)
 8004a82:	4022      	ands	r2, r4
 8004a84:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004a86:	4322      	orrs	r2, r4
 8004a88:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	d506      	bpl.n	8004a9c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a8e:	6802      	ldr	r2, [r0, #0]
 8004a90:	490b      	ldr	r1, [pc, #44]	; (8004ac0 <UART_AdvFeatureConfig+0xcc>)
 8004a92:	6853      	ldr	r3, [r2, #4]
 8004a94:	400b      	ands	r3, r1
 8004a96:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6053      	str	r3, [r2, #4]
  }
}
 8004a9c:	bd30      	pop	{r4, r5, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	fffdffff 	.word	0xfffdffff
 8004aa4:	fffeffff 	.word	0xfffeffff
 8004aa8:	fffbffff 	.word	0xfffbffff
 8004aac:	ffff7fff 	.word	0xffff7fff
 8004ab0:	ffffefff 	.word	0xffffefff
 8004ab4:	ffffdfff 	.word	0xffffdfff
 8004ab8:	ffefffff 	.word	0xffefffff
 8004abc:	ff9fffff 	.word	0xff9fffff
 8004ac0:	fff7ffff 	.word	0xfff7ffff

08004ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	0004      	movs	r4, r0
 8004ac8:	000d      	movs	r5, r1
 8004aca:	0017      	movs	r7, r2
 8004acc:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	69d3      	ldr	r3, [r2, #28]
 8004ad2:	402b      	ands	r3, r5
 8004ad4:	1b5b      	subs	r3, r3, r5
 8004ad6:	4259      	negs	r1, r3
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	42bb      	cmp	r3, r7
 8004adc:	d001      	beq.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e01b      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	9b06      	ldr	r3, [sp, #24]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	d0f3      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fd ff16 	bl	8002918 <HAL_GetTick>
 8004aec:	9b06      	ldr	r3, [sp, #24]
 8004aee:	1b80      	subs	r0, r0, r6
 8004af0:	4298      	cmp	r0, r3
 8004af2:	d801      	bhi.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x34>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ea      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	4908      	ldr	r1, [pc, #32]	; (8004b1c <UART_WaitOnFlagUntilTimeout+0x58>)
 8004afc:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8004afe:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b00:	400a      	ands	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	31a3      	adds	r1, #163	; 0xa3
 8004b08:	31ff      	adds	r1, #255	; 0xff
 8004b0a:	438a      	bics	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b12:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004b14:	2300      	movs	r3, #0
 8004b16:	3470      	adds	r4, #112	; 0x70
 8004b18:	7023      	strb	r3, [r4, #0]
}
 8004b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1c:	fffffe5f 	.word	0xfffffe5f

08004b20 <HAL_UART_Transmit>:
{
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b085      	sub	sp, #20
 8004b24:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8004b26:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8004b28:	0004      	movs	r4, r0
 8004b2a:	000d      	movs	r5, r1
 8004b2c:	0016      	movs	r6, r2
    return HAL_BUSY;
 8004b2e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d14d      	bne.n	8004bd0 <HAL_UART_Transmit+0xb0>
      return  HAL_ERROR;
 8004b34:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d04a      	beq.n	8004bd0 <HAL_UART_Transmit+0xb0>
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	d048      	beq.n	8004bd0 <HAL_UART_Transmit+0xb0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	68a2      	ldr	r2, [r4, #8]
 8004b42:	015b      	lsls	r3, r3, #5
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d104      	bne.n	8004b52 <HAL_UART_Transmit+0x32>
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8004b4e:	4201      	tst	r1, r0
 8004b50:	d13e      	bne.n	8004bd0 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8004b52:	0023      	movs	r3, r4
 8004b54:	3370      	adds	r3, #112	; 0x70
 8004b56:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8004b58:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	d038      	beq.n	8004bd0 <HAL_UART_Transmit+0xb0>
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b66:	3321      	adds	r3, #33	; 0x21
 8004b68:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8004b6a:	f7fd fed5 	bl	8002918 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004b6e:	0023      	movs	r3, r4
 8004b70:	3350      	adds	r3, #80	; 0x50
 8004b72:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004b74:	3302      	adds	r3, #2
 8004b76:	801e      	strh	r6, [r3, #0]
 8004b78:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004b7e:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8004b80:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b82:	015b      	lsls	r3, r3, #5
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d104      	bne.n	8004b92 <HAL_UART_Transmit+0x72>
 8004b88:	6923      	ldr	r3, [r4, #16]
 8004b8a:	42b3      	cmp	r3, r6
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Transmit+0x72>
 8004b8e:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8004b90:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8004b92:	0023      	movs	r3, r4
 8004b94:	3352      	adds	r3, #82	; 0x52
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <HAL_UART_Transmit+0x9a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	2140      	movs	r1, #64	; 0x40
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	0020      	movs	r0, r4
 8004ba6:	003b      	movs	r3, r7
 8004ba8:	f7ff ff8c 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d10e      	bne.n	8004bce <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8004bb0:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004bb2:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8004bb4:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8004bb6:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004bb8:	e00a      	b.n	8004bd0 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bba:	9b03      	ldr	r3, [sp, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	003b      	movs	r3, r7
 8004bc4:	0020      	movs	r0, r4
 8004bc6:	f7ff ff7d 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_Transmit+0xb4>
        return HAL_TIMEOUT;
 8004bce:	2003      	movs	r0, #3
}
 8004bd0:	b005      	add	sp, #20
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_UART_Transmit+0xd2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bda:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8004bdc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bde:	05db      	lsls	r3, r3, #23
 8004be0:	0ddb      	lsrs	r3, r3, #23
 8004be2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004be4:	9b02      	ldr	r3, [sp, #8]
 8004be6:	9a02      	ldr	r2, [sp, #8]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]
 8004bf0:	e7cf      	b.n	8004b92 <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004bf4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8004bf8:	e7f4      	b.n	8004be4 <HAL_UART_Transmit+0xc4>
	...

08004bfc <UART_CheckIdleState>:
{
 8004bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	2600      	movs	r6, #0
{
 8004c00:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c02:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004c04:	f7fd fe88 	bl	8002918 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c08:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004c0a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	071b      	lsls	r3, r3, #28
 8004c10:	d415      	bmi.n	8004c3e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	075b      	lsls	r3, r3, #29
 8004c18:	d50a      	bpl.n	8004c30 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <UART_CheckIdleState+0x5c>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	0020      	movs	r0, r4
 8004c24:	002b      	movs	r3, r5
 8004c26:	03c9      	lsls	r1, r1, #15
 8004c28:	f7ff ff4c 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d111      	bne.n	8004c54 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004c32:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004c38:	3470      	adds	r4, #112	; 0x70
 8004c3a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004c3c:	e00b      	b.n	8004c56 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <UART_CheckIdleState+0x5c>)
 8004c42:	0032      	movs	r2, r6
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	0389      	lsls	r1, r1, #14
 8004c48:	0003      	movs	r3, r0
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7ff ff3a 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d0de      	beq.n	8004c12 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004c54:	2003      	movs	r0, #3
}
 8004c56:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004c58:	01ffffff 	.word	0x01ffffff

08004c5c <HAL_UART_Init>:
{
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004c62:	2001      	movs	r0, #1
}
 8004c64:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004c6c:	0002      	movs	r2, r0
 8004c6e:	3270      	adds	r2, #112	; 0x70
 8004c70:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004c72:	f7fd fd3b 	bl	80026ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c76:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004c78:	2101      	movs	r1, #1
 8004c7a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004c7e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c80:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004c82:	438b      	bics	r3, r1
 8004c84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c86:	f7ff fd75 	bl	8004774 <UART_SetConfig>
 8004c8a:	2801      	cmp	r0, #1
 8004c8c:	d0e9      	beq.n	8004c62 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004c94:	0020      	movs	r0, r4
 8004c96:	f7ff fead 	bl	80049f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <HAL_UART_Init+0x60>)
 8004c9e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004ca0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	438a      	bics	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004cae:	2201      	movs	r2, #1
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004cb6:	f7ff ffa1 	bl	8004bfc <UART_CheckIdleState>
 8004cba:	e7d3      	b.n	8004c64 <HAL_UART_Init+0x8>
 8004cbc:	ffffb7ff 	.word	0xffffb7ff

08004cc0 <FlashRead>:

  return nRet;
}

FLS_RW_StatusTypeDef FlashRead(uint32_t nAddress, uint16_t cNbBytes, uint8_t* pcBuffer)
{
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	9004      	str	r0, [sp, #16]
 8004cc6:	0015      	movs	r5, r2
	
  //	if(cNbBytes > FLASH_PAGE_SIZE*MAX_NO_OF_PAGES)
  //		frRetStatus = FLS_RW_OUT_OF_RANGE;

  if(pcBuffer == NULL)
    frRetStatus = FLS_RW_ERROR;
 8004cc8:	2001      	movs	r0, #1
{
 8004cca:	9105      	str	r1, [sp, #20]
  if(pcBuffer == NULL)
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	d007      	beq.n	8004ce0 <FlashRead+0x20>
      pageIdx = (i/4)*4;		/* Every 4 bytes moves ahead */
	
	if(CheckFlashAddress(nAddress+pageIdx) == FLS_RW_OK)
	{
	  tmp = *((__IO uint32_t *)(nAddress+pageIdx));
		pcBuffer[i] = (tmp&(0xFF000000>>(count4*8)))>>(24-(count4*8));
 8004cd0:	27ff      	movs	r7, #255	; 0xff
 8004cd2:	2400      	movs	r4, #0
 8004cd4:	2603      	movs	r6, #3
 8004cd6:	063f      	lsls	r7, r7, #24
    for(i=0; i<cNbBytes; i++)
 8004cd8:	9b05      	ldr	r3, [sp, #20]
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	d302      	bcc.n	8004ce4 <FlashRead+0x24>
  FLS_RW_StatusTypeDef frRetStatus = FLS_RW_OK;
 8004cde:	2000      	movs	r0, #0
	}
    }
  }
	
  return frRetStatus;
}
 8004ce0:	b009      	add	sp, #36	; 0x24
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(CheckFlashAddress(nAddress+pageIdx) == FLS_RW_OK)
 8004ce4:	9a04      	ldr	r2, [sp, #16]
      pageIdx = (i/4)*4;		/* Every 4 bytes moves ahead */
 8004ce6:	08a3      	lsrs	r3, r4, #2
	if(CheckFlashAddress(nAddress+pageIdx) == FLS_RW_OK)
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	189b      	adds	r3, r3, r2
	  tmp = *((__IO uint32_t *)(nAddress+pageIdx));
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	9a00      	ldr	r2, [sp, #0]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	9206      	str	r2, [sp, #24]
 8004cfa:	9307      	str	r3, [sp, #28]
		pcBuffer[i] = (tmp&(0xFF000000>>(count4*8)))>>(24-(count4*8));
 8004cfc:	9806      	ldr	r0, [sp, #24]
 8004cfe:	9907      	ldr	r1, [sp, #28]
 8004d00:	0022      	movs	r2, r4
 8004d02:	9002      	str	r0, [sp, #8]
 8004d04:	9103      	str	r1, [sp, #12]
 8004d06:	0039      	movs	r1, r7
 8004d08:	4032      	ands	r2, r6
 8004d0a:	00d3      	lsls	r3, r2, #3
 8004d0c:	40d9      	lsrs	r1, r3
 8004d0e:	9802      	ldr	r0, [sp, #8]
 8004d10:	1ab2      	subs	r2, r6, r2
 8004d12:	4008      	ands	r0, r1
 8004d14:	00d2      	lsls	r2, r2, #3
 8004d16:	2100      	movs	r1, #0
 8004d18:	f7fc f966 	bl	8000fe8 <__aeabi_llsr>
 8004d1c:	5528      	strb	r0, [r5, r4]
    for(i=0; i<cNbBytes; i++)
 8004d1e:	3401      	adds	r4, #1
 8004d20:	b2e4      	uxtb	r4, r4
 8004d22:	e7d9      	b.n	8004cd8 <FlashRead+0x18>

08004d24 <DataEepromErase>:
  }

  return frRetStatus;
}

FLS_RW_StatusTypeDef DataEepromErase(uint32_t nAddress) {
 8004d24:	b510      	push	{r4, lr}
 8004d26:	0004      	movs	r4, r0
  uint32_t __attribute__ ((unused)) error_code;
  FLS_RW_StatusTypeDef frRetStatus = FLS_RW_ERROR;
	
  /* Unlock the Flash to enable the flash control register access */
  if(HAL_FLASHEx_DATAEEPROM_Unlock() == HAL_OK)
 8004d28:	f7fe f988 	bl	800303c <HAL_FLASHEx_DATAEEPROM_Unlock>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d003      	beq.n	8004d38 <DataEepromErase+0x14>
    }
  }

  if(frRetStatus == FLS_RW_ERROR)
  {
    error_code = HAL_FLASH_GetError();
 8004d30:	f7fe f942 	bl	8002fb8 <HAL_FLASH_GetError>
  }
	
  return FLS_RW_OK;
}
 8004d34:	2000      	movs	r0, #0
 8004d36:	bd10      	pop	{r4, pc}
    if(HAL_FLASHEx_DATAEEPROM_Erase(nAddress) == HAL_OK)
 8004d38:	0020      	movs	r0, r4
 8004d3a:	f7fe f9a1 	bl	8003080 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d1f6      	bne.n	8004d30 <DataEepromErase+0xc>
      if(HAL_FLASHEx_DATAEEPROM_Lock() == HAL_OK)
 8004d42:	f7fe f993 	bl	800306c <HAL_FLASHEx_DATAEEPROM_Lock>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d1f2      	bne.n	8004d30 <DataEepromErase+0xc>
 8004d4a:	e7f3      	b.n	8004d34 <DataEepromErase+0x10>

08004d4c <FlashErase>:

FLS_RW_StatusTypeDef FlashErase(uint32_t nAddress, uint32_t nPages)
{
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	0004      	movs	r4, r0
  uint32_t __attribute__ ((unused)) error_code;
  FLS_RW_StatusTypeDef frRetStatus = FLS_RW_ERROR;
	
  /* Unlock the Flash to enable the flash control register access */
  if(HAL_FLASHEx_DATAEEPROM_Unlock() == HAL_OK)
 8004d50:	f7fe f974 	bl	800303c <HAL_FLASHEx_DATAEEPROM_Unlock>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d003      	beq.n	8004d60 <FlashErase+0x14>
    }
  }

  if(frRetStatus == FLS_RW_ERROR)
  {
    error_code = HAL_FLASH_GetError();
 8004d58:	f7fe f92e 	bl	8002fb8 <HAL_FLASH_GetError>
  }

  return FLS_RW_OK;
}
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	bd10      	pop	{r4, pc}
    if(HAL_FLASHEx_DATAEEPROM_Erase(nAddress) == HAL_OK)
 8004d60:	0020      	movs	r0, r4
 8004d62:	f7fe f98d 	bl	8003080 <HAL_FLASHEx_DATAEEPROM_Erase>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d1f6      	bne.n	8004d58 <FlashErase+0xc>
      if(HAL_FLASHEx_DATAEEPROM_Lock() == HAL_OK)
 8004d6a:	f7fe f97f 	bl	800306c <HAL_FLASHEx_DATAEEPROM_Lock>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d1f2      	bne.n	8004d58 <FlashErase+0xc>
 8004d72:	e7f3      	b.n	8004d5c <FlashErase+0x10>

08004d74 <FlashWrite>:
{
 8004d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d76:	000e      	movs	r6, r1
 8004d78:	9201      	str	r2, [sp, #4]
  nRet = (!nTmp)?(nBytesCount/FLASH_PAGE_SIZE):(nBytesCount/FLASH_PAGE_SIZE)+1;
 8004d7a:	227f      	movs	r2, #127	; 0x7f
 8004d7c:	4032      	ands	r2, r6
{
 8004d7e:	0007      	movs	r7, r0
  nRet = (!nTmp)?(nBytesCount/FLASH_PAGE_SIZE):(nBytesCount/FLASH_PAGE_SIZE)+1;
 8004d80:	1e50      	subs	r0, r2, #1
 8004d82:	4182      	sbcs	r2, r0
    frRetStatus = FLS_RW_OUT_OF_RANGE;
 8004d84:	2420      	movs	r4, #32
 8004d86:	09c9      	lsrs	r1, r1, #7
  nRet = (!nTmp)?(nBytesCount/FLASH_PAGE_SIZE):(nBytesCount/FLASH_PAGE_SIZE)+1;
 8004d88:	1889      	adds	r1, r1, r2
    frRetStatus = FLS_RW_OUT_OF_RANGE;
 8004d8a:	428c      	cmp	r4, r1
 8004d8c:	41a4      	sbcs	r4, r4
  if(pcBuffer == NULL)
 8004d8e:	9a01      	ldr	r2, [sp, #4]
    frRetStatus = FLS_RW_OUT_OF_RANGE;
 8004d90:	4264      	negs	r4, r4
 8004d92:	0064      	lsls	r4, r4, #1
  if(pcBuffer == NULL)
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d02d      	beq.n	8004df4 <FlashWrite+0x80>
  if (eraseBeforeWrite) {
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <FlashWrite+0x30>
		frRetStatus = FlashErase(nAddress, GetNumberOfPagesByBytes(cNbBytes));
 8004d9c:	0038      	movs	r0, r7
 8004d9e:	f7ff ffd5 	bl	8004d4c <FlashErase>
 8004da2:	0004      	movs	r4, r0
  if(frRetStatus == FLS_RW_OK)
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	d120      	bne.n	8004dea <FlashWrite+0x76>
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8004da8:	f7fe f948 	bl	800303c <HAL_FLASHEx_DATAEEPROM_Unlock>
		for(i=0; i<cNbBytes; i++)
 8004dac:	0025      	movs	r5, r4
    temp_word = 0;
 8004dae:	0022      	movs	r2, r4
		for(i=0; i<cNbBytes; i++)
 8004db0:	42b5      	cmp	r5, r6
 8004db2:	d218      	bcs.n	8004de6 <FlashWrite+0x72>
      temp_word |= ((uint32_t)pcBuffer[i])<<(24-(8*count4));
 8004db4:	2103      	movs	r1, #3
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	43a9      	bics	r1, r5
 8004dba:	5d5b      	ldrb	r3, [r3, r5]
 8004dbc:	00c9      	lsls	r1, r1, #3
 8004dbe:	408b      	lsls	r3, r1
 8004dc0:	2003      	movs	r0, #3
 8004dc2:	431a      	orrs	r2, r3
      if((i == cNbBytes-1) || count4 == 3 )/* Write every 4 bytes or if bytes in args are less than 4 */
 8004dc4:	1e73      	subs	r3, r6, #1
 8004dc6:	4028      	ands	r0, r5
 8004dc8:	429d      	cmp	r5, r3
 8004dca:	d001      	beq.n	8004dd0 <FlashWrite+0x5c>
 8004dcc:	2803      	cmp	r0, #3
 8004dce:	d10e      	bne.n	8004dee <FlashWrite+0x7a>
      pageIdx = (i/4)*4; 	/* Every 4 bytes writes page */
 8004dd0:	08a9      	lsrs	r1, r5, #2
	  if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAM_WORD, nAddress+pageIdx, temp_word) == HAL_OK)
 8004dd2:	0089      	lsls	r1, r1, #2
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	19c9      	adds	r1, r1, r7
 8004dd8:	f7fe f964 	bl	80030a4 <HAL_FLASHEx_DATAEEPROM_Program>
 8004ddc:	1e02      	subs	r2, r0, #0
 8004dde:	d006      	beq.n	8004dee <FlashWrite+0x7a>
	    error_code = HAL_FLASH_GetError();
 8004de0:	f7fe f8ea 	bl	8002fb8 <HAL_FLASH_GetError>
	    frRetStatus = FLS_RW_ERROR;
 8004de4:	2401      	movs	r4, #1
    HAL_FLASHEx_DATAEEPROM_Lock();
 8004de6:	f7fe f941 	bl	800306c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8004dea:	0020      	movs	r0, r4
 8004dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for(i=0; i<cNbBytes; i++)
 8004dee:	3501      	adds	r5, #1
 8004df0:	b2ed      	uxtb	r5, r5
 8004df2:	e7dd      	b.n	8004db0 <FlashWrite+0x3c>
  if (eraseBeforeWrite) {
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1d1      	bne.n	8004d9c <FlashWrite+0x28>
    frRetStatus = FLS_RW_ERROR;
 8004df8:	2401      	movs	r4, #1
  return frRetStatus;
 8004dfa:	e7f6      	b.n	8004dea <FlashWrite+0x76>

08004dfc <GetNVMBoardDataAddress>:
  return _nvmType;
}

uint32_t GetNVMBoardDataAddress()
{
  return _boardDataAddress;
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <GetNVMBoardDataAddress+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
}
 8004e00:	4770      	bx	lr
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	2000037c 	.word	0x2000037c

08004e08 <NVM_Read>:
{
  return _sfxDataAddress;
}

NVM_RW_RESULTS NVM_Read(uint32_t nAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004e08:	b510      	push	{r4, lr}
  NVM_RW_RESULTS tRet = NVM_RW_OK;
  FLS_RW_StatusTypeDef flRet = FLS_RW_OK;

  flRet = (FLS_RW_StatusTypeDef)_nvmReadOperation(nAddress, cNbBytes, pcBuffer);
 8004e0a:	f7ff ff59 	bl	8004cc0 <FlashRead>

  if(flRet != FLS_RW_OK)
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d000      	beq.n	8004e14 <NVM_Read+0xc>
    tRet = NVM_READ_ERROR;
 8004e12:	2002      	movs	r0, #2

  return tRet;
}
 8004e14:	bd10      	pop	{r4, pc}

08004e16 <NVM_Write>:

NVM_RW_RESULTS NVM_Write(uint32_t nAddress, uint8_t cNbBytes, uint8_t* pcBuffer, NVM_WRITE_MODE writeMode)
{
 8004e16:	b510      	push	{r4, lr}
  NVM_RW_RESULTS tRet = NVM_RW_OK;
  FLS_RW_StatusTypeDef flRet = FLS_RW_OK;

  flRet = (FLS_RW_StatusTypeDef)_nvmWriteOperation(nAddress, cNbBytes, pcBuffer, writeMode);
 8004e18:	f7ff ffac 	bl	8004d74 <FlashWrite>

  if(flRet != FLS_RW_OK)
 8004e1c:	1e43      	subs	r3, r0, #1
 8004e1e:	4198      	sbcs	r0, r3
    tRet = NVM_WRITE_ERROR;

  return tRet;
 8004e20:	b2c0      	uxtb	r0, r0
}
 8004e22:	bd10      	pop	{r4, pc}

08004e24 <_writeRecordInternal>:
{
 8004e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    wrState = NVM_BLOCK_INVALID_2;
 8004e26:	2300      	movs	r3, #0
{
 8004e28:	0015      	movs	r5, r2
    wrState = NVM_BLOCK_INVALID_2;
 8004e2a:	22fe      	movs	r2, #254	; 0xfe
{
 8004e2c:	000e      	movs	r6, r1
    wrState = NVM_BLOCK_INVALID_2;
 8004e2e:	9200      	str	r2, [sp, #0]
 8004e30:	9301      	str	r3, [sp, #4]
    tRet = NVM_Write(addr, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_ERASE);
 8004e32:	2104      	movs	r1, #4
 8004e34:	2301      	movs	r3, #1
 8004e36:	466a      	mov	r2, sp
{
 8004e38:	0004      	movs	r4, r0
    tRet = NVM_Write(addr, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_ERASE);
 8004e3a:	f7ff ffec 	bl	8004e16 <NVM_Write>
 8004e3e:	1e03      	subs	r3, r0, #0
  if(tRet == NVM_RW_OK)
 8004e40:	d111      	bne.n	8004e66 <_writeRecordInternal+0x42>
    tRet = NVM_Write(addr+BLOCK_HEADER_SIZE, recordSize, (uint8_t *)nvmRecord, NVM_WRITE_MODE_WRITEOVER);
 8004e42:	0020      	movs	r0, r4
 8004e44:	0032      	movs	r2, r6
 8004e46:	b2e9      	uxtb	r1, r5
 8004e48:	3008      	adds	r0, #8
 8004e4a:	f7ff ffe4 	bl	8004e16 <NVM_Write>
 8004e4e:	1e03      	subs	r3, r0, #0
  if(tRet == NVM_RW_OK)
 8004e50:	d109      	bne.n	8004e66 <_writeRecordInternal+0x42>
    wrState = NVM_BLOCK_VALID_2;
 8004e52:	20fc      	movs	r0, #252	; 0xfc
 8004e54:	2100      	movs	r1, #0
    tRet = NVM_Write(addr+BLOCK_HEADER_SIZE/2, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_WRITEOVER);
 8004e56:	466a      	mov	r2, sp
    wrState = NVM_BLOCK_VALID_2;
 8004e58:	9000      	str	r0, [sp, #0]
 8004e5a:	9101      	str	r1, [sp, #4]
    tRet = NVM_Write(addr+BLOCK_HEADER_SIZE/2, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_WRITEOVER);
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	1d20      	adds	r0, r4, #4
 8004e60:	f7ff ffd9 	bl	8004e16 <NVM_Write>
 8004e64:	0003      	movs	r3, r0
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08004e6c <NVM_ReadRecord>:
NVM_RW_RESULTS NVM_ReadRecord(uint8_t* nvmRecord, uint32_t recordSize)
{
  NVM_RW_RESULTS tRet = NVM_RW_OK;

  uint64_t currentBlockState;
  currentBlockState = NVM_BLOCK_INVALID;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	22fe      	movs	r2, #254	; 0xfe
{
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b085      	sub	sp, #20
  currentBlockState = NVM_BLOCK_INVALID;
 8004e74:	9202      	str	r2, [sp, #8]
 8004e76:	9303      	str	r3, [sp, #12]

  _blockPointer = _sfxDataAddress;
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <NVM_ReadRecord+0xa0>)
 8004e7a:	4c25      	ldr	r4, [pc, #148]	; (8004f10 <NVM_ReadRecord+0xa4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
{
 8004e7e:	0006      	movs	r6, r0
  _blockPointer = _sfxDataAddress;
 8004e80:	6023      	str	r3, [r4, #0]

  if (_nvmType == NVM_TYPE_FLASH)
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <NVM_ReadRecord+0xa8>)
{
 8004e84:	000d      	movs	r5, r1
  if (_nvmType == NVM_TYPE_FLASH)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d13b      	bne.n	8004f04 <NVM_ReadRecord+0x98>
  {
    while(currentBlockState != NVM_BLOCK_EMPTY)
    {
	if(NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t*)&currentBlockState) == NVM_RW_OK)
 8004e8c:	2108      	movs	r1, #8
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	aa02      	add	r2, sp, #8
 8004e92:	f7ff ffb9 	bl	8004e08 <NVM_Read>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d11a      	bne.n	8004ed0 <NVM_ReadRecord+0x64>
	{
	  if(_blockPointer + (BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE) == (uint32_t)FLASH_USER_END_ADDR)
 8004e9a:	9b02      	ldr	r3, [sp, #8]
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	469c      	mov	ip, r3
 8004ea4:	4f1c      	ldr	r7, [pc, #112]	; (8004f18 <NVM_ReadRecord+0xac>)
 8004ea6:	3210      	adds	r2, #16
 8004ea8:	44bc      	add	ip, r7
 8004eaa:	9903      	ldr	r1, [sp, #12]
 8004eac:	4562      	cmp	r2, ip
 8004eae:	d005      	beq.n	8004ebc <NVM_ReadRecord+0x50>
	    break;
	  else
	    _blockPointer += BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE;
 8004eb0:	6822      	ldr	r2, [r4, #0]
    while(currentBlockState != NVM_BLOCK_EMPTY)
 8004eb2:	9b01      	ldr	r3, [sp, #4]
	    _blockPointer += BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE;
 8004eb4:	3210      	adds	r2, #16
 8004eb6:	6022      	str	r2, [r4, #0]
    while(currentBlockState != NVM_BLOCK_EMPTY)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	d1e7      	bne.n	8004e8c <NVM_ReadRecord+0x20>
	}
    }

    if(tRet == NVM_RW_OK)
    {
	while(currentBlockState != NVM_BLOCK_VALID && tRet == NVM_RW_OK)
 8004ebc:	9b02      	ldr	r3, [sp, #8]
 8004ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8004ec0:	d102      	bne.n	8004ec8 <NVM_ReadRecord+0x5c>
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	2bfc      	cmp	r3, #252	; 0xfc
 8004ec6:	d014      	beq.n	8004ef2 <NVM_ReadRecord+0x86>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d003      	beq.n	8004ed4 <NVM_ReadRecord+0x68>
	  tRet = NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t*)&currentBlockState);
	}

	if(tRet == NVM_RW_OK)
	  tRet = NVM_Read(_blockPointer+BLOCK_HEADER_SIZE, recordSize, (uint8_t *)nvmRecord);
	else if (tRet != NVM_NO_RECORDS)
 8004ecc:	2806      	cmp	r0, #6
 8004ece:	d007      	beq.n	8004ee0 <NVM_ReadRecord+0x74>
	  tRet = NVM_READ_RECORD_ERROR;
 8004ed0:	2004      	movs	r0, #4
 8004ed2:	e006      	b.n	8004ee2 <NVM_ReadRecord+0x76>
	  _blockPointer -= (BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE);
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	3b10      	subs	r3, #16
 8004ed8:	6023      	str	r3, [r4, #0]
	  if(_blockPointer < (uint32_t)FLASH_USER_START_ADDR)
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	429f      	cmp	r7, r3
 8004ede:	d902      	bls.n	8004ee6 <NVM_ReadRecord+0x7a>
	  tRet = NVM_READ_RECORD_ERROR;
 8004ee0:	2006      	movs	r0, #6
  }
  else
    tRet = NVM_Read(_blockPointer, recordSize, (uint8_t *)nvmRecord);

  return tRet;
}
 8004ee2:	b005      	add	sp, #20
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  tRet = NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t*)&currentBlockState);
 8004ee6:	2108      	movs	r1, #8
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	aa02      	add	r2, sp, #8
 8004eec:	f7ff ff8c 	bl	8004e08 <NVM_Read>
 8004ef0:	e7e4      	b.n	8004ebc <NVM_ReadRecord+0x50>
	if(tRet == NVM_RW_OK)
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d1ea      	bne.n	8004ecc <NVM_ReadRecord+0x60>
	  tRet = NVM_Read(_blockPointer+BLOCK_HEADER_SIZE, recordSize, (uint8_t *)nvmRecord);
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	b2e9      	uxtb	r1, r5
 8004efa:	3008      	adds	r0, #8
    tRet = NVM_Read(_blockPointer, recordSize, (uint8_t *)nvmRecord);
 8004efc:	0032      	movs	r2, r6
 8004efe:	f7ff ff83 	bl	8004e08 <NVM_Read>
 8004f02:	e7ee      	b.n	8004ee2 <NVM_ReadRecord+0x76>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	b2c9      	uxtb	r1, r1
 8004f08:	e7f8      	b.n	8004efc <NVM_ReadRecord+0x90>
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	20000384 	.word	0x20000384
 8004f10:	20000378 	.word	0x20000378
 8004f14:	20000381 	.word	0x20000381
 8004f18:	08080080 	.word	0x08080080

08004f1c <eraseAllSector>:

void eraseAllSector(void) { 
	uint32_t aux = _blockPointer;
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <eraseAllSector+0x18>)
void eraseAllSector(void) { 
 8004f1e:	b570      	push	{r4, r5, r6, lr}
	uint32_t aux = _blockPointer;
 8004f20:	681c      	ldr	r4, [r3, #0]
	
	for(uint8_t i = 0; i < MAX_NO_OF_PAGES; i++) {
 8004f22:	0025      	movs	r5, r4
 8004f24:	3580      	adds	r5, #128	; 0x80
		DataEepromErase(aux);
 8004f26:	0020      	movs	r0, r4
		aux += 4;
 8004f28:	3404      	adds	r4, #4
		DataEepromErase(aux);
 8004f2a:	f7ff fefb 	bl	8004d24 <DataEepromErase>
	for(uint8_t i = 0; i < MAX_NO_OF_PAGES; i++) {
 8004f2e:	42a5      	cmp	r5, r4
 8004f30:	d1f9      	bne.n	8004f26 <eraseAllSector+0xa>
	}
}
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	20000378 	.word	0x20000378

08004f38 <NVM_WriteRecord>:

NVM_RW_RESULTS NVM_WriteRecord(uint8_t* nvmRecord, uint32_t recordSize)
{
 8004f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  NVM_RW_RESULTS tRet = NVM_RW_OK;
  uint64_t currentBlockState;
  currentBlockState = NVM_BLOCK_INVALID;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	22fe      	movs	r2, #254	; 0xfe
 8004f3e:	9200      	str	r2, [sp, #0]
 8004f40:	9301      	str	r3, [sp, #4]

  _blockPointer = _sfxDataAddress;
 8004f42:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <NVM_WriteRecord+0x6c>)
 8004f44:	4c18      	ldr	r4, [pc, #96]	; (8004fa8 <NVM_WriteRecord+0x70>)
 8004f46:	681b      	ldr	r3, [r3, #0]
{
 8004f48:	0006      	movs	r6, r0
  _blockPointer = _sfxDataAddress;
 8004f4a:	6023      	str	r3, [r4, #0]
	
  if (_nvmType == NVM_TYPE_FLASH)
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <NVM_WriteRecord+0x74>)
{
 8004f4e:	000d      	movs	r5, r1
  if (_nvmType == NVM_TYPE_FLASH)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d11d      	bne.n	8004f92 <NVM_WriteRecord+0x5a>
  {
    while(currentBlockState != NVM_BLOCK_EMPTY)
    {

			if(_blockPointer != (uint32_t)FLASH_USER_END_ADDR) {
 8004f56:	4f16      	ldr	r7, [pc, #88]	; (8004fb0 <NVM_WriteRecord+0x78>)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <NVM_WriteRecord+0x7c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d014      	beq.n	8004f8a <NVM_WriteRecord+0x52>
				if(NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t *)&currentBlockState) == NVM_RW_OK) {
 8004f60:	466a      	mov	r2, sp
 8004f62:	2108      	movs	r1, #8
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	f7ff ff4f 	bl	8004e08 <NVM_Read>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d118      	bne.n	8004fa0 <NVM_WriteRecord+0x68>
					if(currentBlockState == NVM_BLOCK_EMPTY) {
 8004f6e:	9b00      	ldr	r3, [sp, #0]
 8004f70:	9a01      	ldr	r2, [sp, #4]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	d105      	bne.n	8004f82 <NVM_WriteRecord+0x4a>
					break;
				}
			} else {
			_blockPointer = (uint32_t)FLASH_USER_START_ADDR;
			eraseAllSector();	
			tRet = _writeRecordInternal(_blockPointer, nvmRecord, recordSize);
 8004f76:	002a      	movs	r2, r5
 8004f78:	0031      	movs	r1, r6
 8004f7a:	6820      	ldr	r0, [r4, #0]
 8004f7c:	f7ff ff52 	bl	8004e24 <_writeRecordInternal>
  }
  else
    tRet = NVM_Write(_blockPointer, recordSize, nvmRecord, NVM_WRITE_MODE_WRITEOVER);

  return tRet;
}
 8004f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					_blockPointer += (BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE);
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	3310      	adds	r3, #16
 8004f86:	6023      	str	r3, [r4, #0]
    while(currentBlockState != NVM_BLOCK_EMPTY)
 8004f88:	e7e6      	b.n	8004f58 <NVM_WriteRecord+0x20>
			_blockPointer = (uint32_t)FLASH_USER_START_ADDR;
 8004f8a:	6027      	str	r7, [r4, #0]
			eraseAllSector();	
 8004f8c:	f7ff ffc6 	bl	8004f1c <eraseAllSector>
 8004f90:	e7f1      	b.n	8004f76 <NVM_WriteRecord+0x3e>
    tRet = NVM_Write(_blockPointer, recordSize, nvmRecord, NVM_WRITE_MODE_WRITEOVER);
 8004f92:	2300      	movs	r3, #0
 8004f94:	0032      	movs	r2, r6
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	b2c9      	uxtb	r1, r1
 8004f9a:	f7ff ff3c 	bl	8004e16 <NVM_Write>
 8004f9e:	e7ef      	b.n	8004f80 <NVM_WriteRecord+0x48>
					tRet = NVM_READ_RECORD_ERROR;
 8004fa0:	2004      	movs	r0, #4
 8004fa2:	e7ed      	b.n	8004f80 <NVM_WriteRecord+0x48>
 8004fa4:	20000384 	.word	0x20000384
 8004fa8:	20000378 	.word	0x20000378
 8004fac:	20000381 	.word	0x20000381
 8004fb0:	08080080 	.word	0x08080080
 8004fb4:	08080100 	.word	0x08080100

08004fb8 <SetNVMInitial>:
{
 8004fb8:	b507      	push	{r0, r1, r2, lr}
  _nvmType = config->nvmType;
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <SetNVMInitial+0x44>)
 8004fbc:	7802      	ldrb	r2, [r0, #0]
  _sfxDataAddress = config->sfxDataAddress ;
 8004fbe:	6881      	ldr	r1, [r0, #8]
  _nvmType = config->nvmType;
 8004fc0:	701a      	strb	r2, [r3, #0]
  _sfxDataAddress = config->sfxDataAddress ;
 8004fc2:	4a0f      	ldr	r2, [pc, #60]	; (8005000 <SetNVMInitial+0x48>)
 8004fc4:	6011      	str	r1, [r2, #0]
  _boardDataAddress = config->boardDataAddress;
 8004fc6:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <SetNVMInitial+0x4c>)
 8004fc8:	6841      	ldr	r1, [r0, #4]
 8004fca:	6011      	str	r1, [r2, #0]
  _msgSq = config->messageSequenceNumber;
 8004fcc:	7b01      	ldrb	r1, [r0, #12]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <SetNVMInitial+0x50>)
 8004fd0:	7011      	strb	r1, [r2, #0]
  if(_nvmType == NVM_TYPE_FLASH)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d110      	bne.n	8004ffa <SetNVMInitial+0x42>
    if (NVM_ReadRecord(cleanBuf, BLOCK_BODY_SIZE) == NVM_NO_RECORDS)
 8004fd8:	2108      	movs	r1, #8
 8004fda:	4668      	mov	r0, sp
 8004fdc:	f7ff ff46 	bl	8004e6c <NVM_ReadRecord>
 8004fe0:	2806      	cmp	r0, #6
 8004fe2:	d10a      	bne.n	8004ffa <SetNVMInitial+0x42>
	memset(cleanBuf, FLASH_ERASE_VALUE, BLOCK_BODY_SIZE);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	4668      	mov	r0, sp
 8004fea:	f000 f998 	bl	800531e <memset>
	eraseAllSector();
 8004fee:	f7ff ff95 	bl	8004f1c <eraseAllSector>
	NVM_WriteRecord(&cleanBuf[0], BLOCK_BODY_SIZE);
 8004ff2:	2108      	movs	r1, #8
 8004ff4:	4668      	mov	r0, sp
 8004ff6:	f7ff ff9f 	bl	8004f38 <NVM_WriteRecord>
}
 8004ffa:	bd07      	pop	{r0, r1, r2, pc}
 8004ffc:	20000381 	.word	0x20000381
 8005000:	20000384 	.word	0x20000384
 8005004:	2000037c 	.word	0x2000037c
 8005008:	20000380 	.word	0x20000380

0800500c <priv_ST_MANUF_CmdStrobe>:
	}
}

/* command strobe - used to strobe commands to the S2-LP */
static void priv_ST_MANUF_CmdStrobe(uint8_t cmd)
{
 800500c:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_spi_buffer[2];

	tx_spi_buffer[0]=0x80;
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	466a      	mov	r2, sp
 8005012:	7113      	strb	r3, [r2, #4]
	tx_spi_buffer[1]=cmd;

	priv_ST_MANUF_SpiRaw(2,tx_spi_buffer,NULL);
 8005014:	2300      	movs	r3, #0
	tx_spi_buffer[1]=cmd;
 8005016:	7150      	strb	r0, [r2, #5]
	priv_ST_MANUF_SpiRaw(2,tx_spi_buffer,NULL);
 8005018:	a901      	add	r1, sp, #4
 800501a:	001a      	movs	r2, r3
 800501c:	2002      	movs	r0, #2
 800501e:	f7fd f897 	bl	8002150 <ST_MCU_API_SpiRaw>
}
 8005022:	bd07      	pop	{r0, r1, r2, pc}

08005024 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>:
static void priv_ST_MANUF_SpiRaw_Ramp(uint8_t n_bytes,uint8_t* buff_in, uint8_t* buff_out, uint8_t blocking)
 8005024:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(st_manuf_context->power_reduction!=0 && buff_in!=zeroes)
 8005026:	4c17      	ldr	r4, [pc, #92]	; (8005084 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x60>)
static void priv_ST_MANUF_SpiRaw_Ramp(uint8_t n_bytes,uint8_t* buff_in, uint8_t* buff_out, uint8_t blocking)
 8005028:	b09b      	sub	sp, #108	; 0x6c
 800502a:	9202      	str	r2, [sp, #8]
	if(st_manuf_context->power_reduction!=0 && buff_in!=zeroes)
 800502c:	232e      	movs	r3, #46	; 0x2e
 800502e:	5ee2      	ldrsh	r2, [r4, r3]
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	2a00      	cmp	r2, #0
 8005034:	d023      	beq.n	800507e <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x5a>
 8005036:	4d14      	ldr	r5, [pc, #80]	; (8005088 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x64>)
 8005038:	42a9      	cmp	r1, r5
 800503a:	d020      	beq.n	800507e <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x5a>
			if(((i%2)!=0) && (buff_in[i]+st_manuf_context->power_reduction<st_manuf_context->bpsk_ramps->min_power))
 800503c:	349c      	adds	r4, #156	; 0x9c
 800503e:	6824      	ldr	r4, [r4, #0]
		fifo_buff[0]=buff_in[0];
 8005040:	780d      	ldrb	r5, [r1, #0]
			if(((i%2)!=0) && (buff_in[i]+st_manuf_context->power_reduction<st_manuf_context->bpsk_ramps->min_power))
 8005042:	9403      	str	r4, [sp, #12]
		for(i=2;i<n_bytes;i++)
 8005044:	2402      	movs	r4, #2
		fifo_buff[0]=buff_in[0];
 8005046:	ae05      	add	r6, sp, #20
 8005048:	7035      	strb	r5, [r6, #0]
		fifo_buff[1]=buff_in[1];
 800504a:	784d      	ldrb	r5, [r1, #1]
 800504c:	7075      	strb	r5, [r6, #1]
			if(((i%2)!=0) && (buff_in[i]+st_manuf_context->power_reduction<st_manuf_context->bpsk_ramps->min_power))
 800504e:	2701      	movs	r7, #1
 8005050:	5d0d      	ldrb	r5, [r1, r4]
 8005052:	423c      	tst	r4, r7
 8005054:	d008      	beq.n	8005068 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x44>
 8005056:	22e0      	movs	r2, #224	; 0xe0
 8005058:	9b01      	ldr	r3, [sp, #4]
 800505a:	32ff      	adds	r2, #255	; 0xff
 800505c:	18ef      	adds	r7, r5, r3
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	429f      	cmp	r7, r3
 8005064:	da00      	bge.n	8005068 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x44>
				fifo_buff[i]=buff_in[i]+st_manuf_context->power_reduction;
 8005066:	b2fd      	uxtb	r5, r7
 8005068:	5535      	strb	r5, [r6, r4]
		for(i=2;i<n_bytes;i++)
 800506a:	3401      	adds	r4, #1
 800506c:	4284      	cmp	r4, r0
 800506e:	d3ee      	bcc.n	800504e <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x2a>
		priv_ST_MANUF_SpiRaw_(n_bytes,fifo_buff,buff_out,blocking);
 8005070:	2200      	movs	r2, #0
 8005072:	0031      	movs	r1, r6
 8005074:	9b02      	ldr	r3, [sp, #8]
		priv_ST_MANUF_SpiRaw_(n_bytes,buff_in,buff_out,blocking);
 8005076:	f7fd f86b 	bl	8002150 <ST_MCU_API_SpiRaw>
}
 800507a:	b01b      	add	sp, #108	; 0x6c
 800507c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		priv_ST_MANUF_SpiRaw_(n_bytes,buff_in,buff_out,blocking);
 800507e:	2200      	movs	r2, #0
 8005080:	9b02      	ldr	r3, [sp, #8]
 8005082:	e7f8      	b.n	8005076 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x52>
 8005084:	20000088 	.word	0x20000088
 8005088:	08006bfc 	.word	0x08006bfc

0800508c <priv_ST_MANUF_tx_rf_dbpsk_single_bit>:
}

/* Function to transmit a single bit */
static void priv_ST_MANUF_tx_rf_dbpsk_single_bit(uint8_t bit)
{
	if(bit==0)
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x3c>)
{
 800508e:	b510      	push	{r4, lr}
 8005090:	001a      	movs	r2, r3
 8005092:	329c      	adds	r2, #156	; 0x9c
 8005094:	6811      	ldr	r1, [r2, #0]
	if(bit==0)
 8005096:	2800      	cmp	r0, #0
 8005098:	d112      	bne.n	80050c0 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x34>
	{
		/* Give FDEV a peak in the FDEV_PEAK position.
    This value should be the opposite of the last one. */
#ifndef RAMPS_IN_RAM
		/* If ramps are in flash, we change the auxiliary buffer in RAM */
		st_manuf_context->aux_fifo_ramp_fast[82-32]=(st_manuf_context->aux_fifo_ramp_fast[82-32]==st_manuf_context->bpsk_ramps->fdev_neg)?(st_manuf_context->bpsk_ramps->fdev_pos):(st_manuf_context->bpsk_ramps->fdev_neg);
 800509a:	22ee      	movs	r2, #238	; 0xee
 800509c:	0018      	movs	r0, r3
 800509e:	0052      	lsls	r2, r2, #1
 80050a0:	307a      	adds	r0, #122	; 0x7a
 80050a2:	5c8a      	ldrb	r2, [r1, r2]
 80050a4:	7800      	ldrb	r0, [r0, #0]
 80050a6:	4290      	cmp	r0, r2
 80050a8:	d102      	bne.n	80050b0 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x24>
 80050aa:	22de      	movs	r2, #222	; 0xde
 80050ac:	32ff      	adds	r2, #255	; 0xff
 80050ae:	5c8a      	ldrb	r2, [r1, r2]
 80050b0:	337a      	adds	r3, #122	; 0x7a
 80050b2:	701a      	strb	r2, [r3, #0]
		priv_ST_MANUF_SpiRaw_Ramp(82, st_manuf_context->aux_fifo_ramp_fast, NULL, 1);
 80050b4:	2201      	movs	r2, #1
 80050b6:	4905      	ldr	r1, [pc, #20]	; (80050cc <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x40>)
	else
	{
		/* If the bit to be transmitted is '1' --> proceed with a constant
    pattern that does not change the instantaneous frequency and keeps power constant to max.
    fifo_const_fast stores this one. */
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_const_fast, NULL, 1);
 80050b8:	2052      	movs	r0, #82	; 0x52
 80050ba:	f7ff ffb3 	bl	8005024 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
	}
}
 80050be:	bd10      	pop	{r4, pc}
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_const_fast, NULL, 1);
 80050c0:	2201      	movs	r2, #1
 80050c2:	3152      	adds	r1, #82	; 0x52
 80050c4:	e7f8      	b.n	80050b8 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x2c>
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	20000088 	.word	0x20000088
 80050cc:	200000d0 	.word	0x200000d0

080050d0 <pn9_next>:
	retval =  (((*last & 0x20) >> 5) ^ *last) << 8;
 80050d0:	8802      	ldrh	r2, [r0, #0]
 80050d2:	0693      	lsls	r3, r2, #26
 80050d4:	0fdb      	lsrs	r3, r3, #31
 80050d6:	4053      	eors	r3, r2
	retval |= (*last >> 1) & 0xff;
 80050d8:	0852      	lsrs	r2, r2, #1
 80050da:	b2d2      	uxtb	r2, r2
	retval =  (((*last & 0x20) >> 5) ^ *last) << 8;
 80050dc:	021b      	lsls	r3, r3, #8
	retval |= (*last >> 1) & 0xff;
 80050de:	4313      	orrs	r3, r2
	*last = retval & 0x1ff;
 80050e0:	05db      	lsls	r3, r3, #23
 80050e2:	0ddb      	lsrs	r3, r3, #23
 80050e4:	8003      	strh	r3, [r0, #0]
}
 80050e6:	4770      	bx	lr

080050e8 <pn9_next_byte>:
{
 80050e8:	b513      	push	{r0, r1, r4, lr}
 80050ea:	466b      	mov	r3, sp
 80050ec:	2408      	movs	r4, #8
 80050ee:	80d8      	strh	r0, [r3, #6]
		pn9_next(&state);
 80050f0:	466b      	mov	r3, sp
 80050f2:	3c01      	subs	r4, #1
 80050f4:	1d98      	adds	r0, r3, #6
 80050f6:	f7ff ffeb 	bl	80050d0 <pn9_next>
	for (i=0; i<8; i++) {
 80050fa:	2c00      	cmp	r4, #0
 80050fc:	d1f8      	bne.n	80050f0 <pn9_next_byte+0x8>
	return state;
 80050fe:	466b      	mov	r3, sp
 8005100:	88d8      	ldrh	r0, [r3, #6]
}
 8005102:	bd16      	pop	{r1, r2, r4, pc}

08005104 <ST_RF_API_Timer_CB>:

/* This is the callback that notifies that the MCU timer called
 *  by the MANUF_API_timer_start started/has expired. */
void ST_RF_API_Timer_CB(sfx_u8 state)
{
	st_manuf_context->api_timer_raised=state;
 8005104:	4b01      	ldr	r3, [pc, #4]	; (800510c <ST_RF_API_Timer_CB+0x8>)
 8005106:	3329      	adds	r3, #41	; 0x29
 8005108:	7018      	strb	r0, [r3, #0]
}
 800510a:	4770      	bx	lr
 800510c:	20000088 	.word	0x20000088

08005110 <ST_RF_API_Timer_Channel_Clear_CB>:

/* This is the callback that notifies that the MCU timer started
 *  by the MANUF_API_timer_start has expired. */
void ST_RF_API_Timer_Channel_Clear_CB(void)
{
	st_manuf_context->api_timer_channel_clear_raised=1;
 8005110:	2201      	movs	r2, #1
 8005112:	4b02      	ldr	r3, [pc, #8]	; (800511c <ST_RF_API_Timer_Channel_Clear_CB+0xc>)
 8005114:	332a      	adds	r3, #42	; 0x2a
 8005116:	701a      	strb	r2, [r3, #0]
}
 8005118:	4770      	bx	lr
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	20000088 	.word	0x20000088

08005120 <ST_RF_API_set_rssi_offset>:
}

/* RSSI offset as param */
sfx_u8 ST_RF_API_set_rssi_offset(int8_t rssi_off)
{
	st_manuf_context->rssi_offset=rssi_off;
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <ST_RF_API_set_rssi_offset+0xc>)
 8005122:	3330      	adds	r3, #48	; 0x30
 8005124:	7018      	strb	r0, [r3, #0]

	return SFX_ERR_NONE;
}
 8005126:	2000      	movs	r0, #0
 8005128:	4770      	bx	lr
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	20000088 	.word	0x20000088

08005130 <ST_RF_API_set_xtal_freq>:
}

/* XTAL FREQ as param */
sfx_u8 ST_RF_API_set_xtal_freq(sfx_u32 xtal)
{
	st_manuf_context->xtal_lib=xtal;
 8005130:	4b01      	ldr	r3, [pc, #4]	; (8005138 <ST_RF_API_set_xtal_freq+0x8>)
 8005132:	6198      	str	r0, [r3, #24]

	return SFX_ERR_NONE;
}
 8005134:	2000      	movs	r0, #0
 8005136:	4770      	bx	lr
 8005138:	20000088 	.word	0x20000088

0800513c <ST_RF_API_set_freq_offset>:
}

/* FREQ offset as param */
sfx_u8 ST_RF_API_set_freq_offset(sfx_s32 offset)
{
	st_manuf_context->rf_offset=offset;
 800513c:	4b01      	ldr	r3, [pc, #4]	; (8005144 <ST_RF_API_set_freq_offset+0x8>)
 800513e:	6218      	str	r0, [r3, #32]

	return SFX_ERR_NONE;
}
 8005140:	2000      	movs	r0, #0
 8005142:	4770      	bx	lr
 8005144:	20000088 	.word	0x20000088

08005148 <ST_RF_API_set_lbt_thr_offset>:
}

/* LBT offset as param */
sfx_u8 ST_RF_API_set_lbt_thr_offset(sfx_s8 lbt_thr_off)
{
	st_manuf_context->lbt_thr_offset=lbt_thr_off;
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <ST_RF_API_set_lbt_thr_offset+0xc>)
 800514a:	3331      	adds	r3, #49	; 0x31
 800514c:	7018      	strb	r0, [r3, #0]

	return SFX_ERR_NONE;
}
 800514e:	2000      	movs	r0, #0
 8005150:	4770      	bx	lr
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	20000088 	.word	0x20000088

08005158 <ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag>:
	return SFX_ERR_NONE;
}

sfx_u8 ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag(void)
{
	return (sfx_u8) st_manuf_context->tx_packet_struct.continuous_tx_flag;
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag+0x8>)
 800515a:	7c98      	ldrb	r0, [r3, #18]
}
 800515c:	4770      	bx	lr
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	20000088 	.word	0x20000088

08005164 <ST_RF_API_StopRxTx>:
	CMD_STROBE_RX();
	return SFX_ERR_NONE;
}

sfx_u8 ST_RF_API_StopRxTx(void)
{
 8005164:	b510      	push	{r4, lr}
	/*Put S2LP in READY*/
	CMD_STROBE_SABORT();
 8005166:	2067      	movs	r0, #103	; 0x67
 8005168:	f7ff ff50 	bl	800500c <priv_ST_MANUF_CmdStrobe>

	/*Configure External FE module in RX*/
	FEM_Operation(FEM_SHUTDOWN);
 800516c:	2000      	movs	r0, #0
 800516e:	f7fd fb6d 	bl	800284c <FEM_Operation>

	return SFX_ERR_NONE;
}
 8005172:	2000      	movs	r0, #0
 8005174:	bd10      	pop	{r4, pc}
	...

08005178 <ST_RF_API_S2LP_IRQ_CB>:
{
 8005178:	b510      	push	{r4, lr}
	if((st_manuf_context->manuf_state!=ST_MANUF_STATE_TX) && (st_manuf_context->manuf_state!=ST_MANUF_STATE_MONARCH_SCAN))
 800517a:	4c45      	ldr	r4, [pc, #276]	; (8005290 <ST_RF_API_S2LP_IRQ_CB+0x118>)
 800517c:	0023      	movs	r3, r4
 800517e:	332c      	adds	r3, #44	; 0x2c
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	2a01      	cmp	r2, #1
 8005184:	d006      	beq.n	8005194 <ST_RF_API_S2LP_IRQ_CB+0x1c>
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d003      	beq.n	8005194 <ST_RF_API_S2LP_IRQ_CB+0x1c>
		st_manuf_context->s2lp_irq_raised=1;
 800518c:	2301      	movs	r3, #1
 800518e:	3428      	adds	r4, #40	; 0x28
		st_manuf_context->s2lp_irq_raised=1;
 8005190:	7023      	strb	r3, [r4, #0]
}
 8005192:	e033      	b.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
		if (S2LPGetSpiInUse()==0)
 8005194:	f7fc ffe2 	bl	800215c <S2LPGetSpiInUse>
 8005198:	2800      	cmp	r0, #0
 800519a:	d12f      	bne.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
	switch(st_manuf_context->tx_packet_struct.tx_state)
 800519c:	7920      	ldrb	r0, [r4, #4]
 800519e:	3802      	subs	r0, #2
 80051a0:	2806      	cmp	r0, #6
 80051a2:	d82b      	bhi.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
 80051a4:	f7fb fd96 	bl	8000cd4 <__gnu_thumb1_case_uqi>
 80051a8:	491a2e04 	.word	0x491a2e04
 80051ac:	5d53      	.short	0x5d53
 80051ae:	64          	.byte	0x64
 80051af:	00          	.byte	0x00
		priv_ST_MANUF_SpiRaw_Ramp(66, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_up_2, NULL, 1);
 80051b0:	0023      	movs	r3, r4
 80051b2:	339c      	adds	r3, #156	; 0x9c
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	319b      	adds	r1, #155	; 0x9b
 80051ba:	2042      	movs	r0, #66	; 0x42
 80051bc:	31ff      	adds	r1, #255	; 0xff
 80051be:	f7ff ff31 	bl	8005024 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		if (st_manuf_context->tx_packet_struct.continuous_tx_flag==1)
 80051c2:	7ca3      	ldrb	r3, [r4, #18]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d104      	bne.n	80051d2 <ST_RF_API_S2LP_IRQ_CB+0x5a>
			st_manuf_context->tx_packet_struct.bit_index=8;
 80051c8:	3307      	adds	r3, #7
 80051ca:	8163      	strh	r3, [r4, #10]
			st_manuf_context->tx_packet_struct.tx_state=ST_TX_CONTINUOS_BPSK;
 80051cc:	3b04      	subs	r3, #4
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_STOP;
 80051ce:	7123      	strb	r3, [r4, #4]
		break;
 80051d0:	e014      	b.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
			st_manuf_context->tx_packet_struct.byte_index=0;
 80051d2:	23e0      	movs	r3, #224	; 0xe0
 80051d4:	02db      	lsls	r3, r3, #11
 80051d6:	60a3      	str	r3, [r4, #8]
			st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_DATA;
 80051d8:	2303      	movs	r3, #3
 80051da:	e7f8      	b.n	80051ce <ST_RF_API_S2LP_IRQ_CB+0x56>
		uint8_t bit=(st_manuf_context->tx_packet_struct.current_pn9>>st_manuf_context->tx_packet_struct.bit_index) & 0x01;
 80051dc:	8963      	ldrh	r3, [r4, #10]
 80051de:	8a20      	ldrh	r0, [r4, #16]
 80051e0:	4118      	asrs	r0, r3
		priv_ST_MANUF_tx_rf_dbpsk_single_bit(bit);
 80051e2:	2301      	movs	r3, #1
 80051e4:	4018      	ands	r0, r3
 80051e6:	f7ff ff51 	bl	800508c <priv_ST_MANUF_tx_rf_dbpsk_single_bit>
		if(st_manuf_context->tx_packet_struct.bit_index==0)
 80051ea:	8963      	ldrh	r3, [r4, #10]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <ST_RF_API_S2LP_IRQ_CB+0x86>
			st_manuf_context->tx_packet_struct.bit_index=8;
 80051f0:	3308      	adds	r3, #8
			st_manuf_context->tx_packet_struct.current_pn9 = pn9_next_byte(st_manuf_context->tx_packet_struct.current_pn9);
 80051f2:	8a20      	ldrh	r0, [r4, #16]
			st_manuf_context->tx_packet_struct.bit_index=8;
 80051f4:	8163      	strh	r3, [r4, #10]
			st_manuf_context->tx_packet_struct.current_pn9 = pn9_next_byte(st_manuf_context->tx_packet_struct.current_pn9);
 80051f6:	f7ff ff77 	bl	80050e8 <pn9_next_byte>
 80051fa:	8220      	strh	r0, [r4, #16]
}
 80051fc:	bd10      	pop	{r4, pc}
		else st_manuf_context->tx_packet_struct.bit_index--;
 80051fe:	3b01      	subs	r3, #1
 8005200:	8163      	strh	r3, [r4, #10]
 8005202:	e7fb      	b.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
		uint8_t bit=(st_manuf_context->tx_packet_struct.data_to_send[st_manuf_context->tx_packet_struct.byte_index]>>st_manuf_context->tx_packet_struct.bit_index)&0x01;
 8005204:	8923      	ldrh	r3, [r4, #8]
 8005206:	68e2      	ldr	r2, [r4, #12]
 8005208:	5cd0      	ldrb	r0, [r2, r3]
 800520a:	8963      	ldrh	r3, [r4, #10]
 800520c:	4118      	asrs	r0, r3
		priv_ST_MANUF_tx_rf_dbpsk_single_bit(bit);
 800520e:	2301      	movs	r3, #1
 8005210:	4018      	ands	r0, r3
 8005212:	f7ff ff3b 	bl	800508c <priv_ST_MANUF_tx_rf_dbpsk_single_bit>
		if(st_manuf_context->tx_packet_struct.bit_index==0)
 8005216:	8962      	ldrh	r2, [r4, #10]
 8005218:	2a00      	cmp	r2, #0
 800521a:	d10b      	bne.n	8005234 <ST_RF_API_S2LP_IRQ_CB+0xbc>
			st_manuf_context->tx_packet_struct.bit_index=7;
 800521c:	2307      	movs	r3, #7
 800521e:	8163      	strh	r3, [r4, #10]
			st_manuf_context->tx_packet_struct.byte_index++;
 8005220:	8923      	ldrh	r3, [r4, #8]
			if(st_manuf_context->tx_packet_struct.byte_index==st_manuf_context->tx_packet_struct.data_to_send_size)
 8005222:	88e1      	ldrh	r1, [r4, #6]
			st_manuf_context->tx_packet_struct.byte_index++;
 8005224:	3301      	adds	r3, #1
 8005226:	b29b      	uxth	r3, r3
 8005228:	8123      	strh	r3, [r4, #8]
			if(st_manuf_context->tx_packet_struct.byte_index==st_manuf_context->tx_packet_struct.data_to_send_size)
 800522a:	4299      	cmp	r1, r3
 800522c:	d1e6      	bne.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
				st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_1;
 800522e:	2305      	movs	r3, #5
				st_manuf_context->tx_packet_struct.byte_index=0;
 8005230:	8122      	strh	r2, [r4, #8]
				st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_1;
 8005232:	e7cc      	b.n	80051ce <ST_RF_API_S2LP_IRQ_CB+0x56>
			st_manuf_context->tx_packet_struct.bit_index--;
 8005234:	3a01      	subs	r2, #1
 8005236:	8162      	strh	r2, [r4, #10]
 8005238:	e7e0      	b.n	80051fc <ST_RF_API_S2LP_IRQ_CB+0x84>
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_down_1, NULL, 1);
 800523a:	0023      	movs	r3, r4
 800523c:	339c      	adds	r3, #156	; 0x9c
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	2052      	movs	r0, #82	; 0x52
 8005244:	31a4      	adds	r1, #164	; 0xa4
 8005246:	f7ff feed 	bl	8005024 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_2;
 800524a:	2306      	movs	r3, #6
 800524c:	e7bf      	b.n	80051ce <ST_RF_API_S2LP_IRQ_CB+0x56>
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_down_2, NULL, 1);
 800524e:	0023      	movs	r3, r4
 8005250:	339c      	adds	r3, #156	; 0x9c
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	2052      	movs	r0, #82	; 0x52
 8005258:	31f6      	adds	r1, #246	; 0xf6
 800525a:	f7ff fee3 	bl	8005024 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_3;
 800525e:	2307      	movs	r3, #7
 8005260:	e7b5      	b.n	80051ce <ST_RF_API_S2LP_IRQ_CB+0x56>
		priv_ST_MANUF_SpiRaw_Ramp(66, (uint8_t*)zeroes, NULL, 1);
 8005262:	2201      	movs	r2, #1
 8005264:	2042      	movs	r0, #66	; 0x42
 8005266:	490b      	ldr	r1, [pc, #44]	; (8005294 <ST_RF_API_S2LP_IRQ_CB+0x11c>)
 8005268:	f7ff fedc 	bl	8005024 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_STOP;
 800526c:	2308      	movs	r3, #8
 800526e:	e7ae      	b.n	80051ce <ST_RF_API_S2LP_IRQ_CB+0x56>
		ST_RF_API_StopRxTx();
 8005270:	f7ff ff78 	bl	8005164 <ST_RF_API_StopRxTx>
		CMD_STROBE_FTX();
 8005274:	2072      	movs	r0, #114	; 0x72
 8005276:	f7ff fec9 	bl	800500c <priv_ST_MANUF_CmdStrobe>
		ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_TRUE);
 800527a:	78e0      	ldrb	r0, [r4, #3]
 800527c:	2201      	movs	r2, #1
 800527e:	2100      	movs	r1, #0
 8005280:	f7fc faec 	bl	800185c <ST_MCU_API_GpioIRQ>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_NONE;
 8005284:	2300      	movs	r3, #0
 8005286:	7123      	strb	r3, [r4, #4]
		st_manuf_context->s2lp_irq_raised=1;
 8005288:	3428      	adds	r4, #40	; 0x28
 800528a:	3301      	adds	r3, #1
 800528c:	e780      	b.n	8005190 <ST_RF_API_S2LP_IRQ_CB+0x18>
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	20000088 	.word	0x20000088
 8005294:	08006bfc 	.word	0x08006bfc

08005298 <__aeabi_memclr>:
 8005298:	b510      	push	{r4, lr}
 800529a:	2200      	movs	r2, #0
 800529c:	f000 f805 	bl	80052aa <__aeabi_memset>
 80052a0:	bd10      	pop	{r4, pc}

080052a2 <__aeabi_memcpy>:
 80052a2:	b510      	push	{r4, lr}
 80052a4:	f000 f832 	bl	800530c <memcpy>
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__aeabi_memset>:
 80052aa:	000b      	movs	r3, r1
 80052ac:	b510      	push	{r4, lr}
 80052ae:	0011      	movs	r1, r2
 80052b0:	001a      	movs	r2, r3
 80052b2:	f000 f834 	bl	800531e <memset>
 80052b6:	bd10      	pop	{r4, pc}

080052b8 <__errno>:
 80052b8:	4b01      	ldr	r3, [pc, #4]	; (80052c0 <__errno+0x8>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	4770      	bx	lr
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	20000128 	.word	0x20000128

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	2600      	movs	r6, #0
 80052c8:	4d0c      	ldr	r5, [pc, #48]	; (80052fc <__libc_init_array+0x38>)
 80052ca:	4c0d      	ldr	r4, [pc, #52]	; (8005300 <__libc_init_array+0x3c>)
 80052cc:	1b64      	subs	r4, r4, r5
 80052ce:	10a4      	asrs	r4, r4, #2
 80052d0:	42a6      	cmp	r6, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	2600      	movs	r6, #0
 80052d6:	f001 f8a3 	bl	8006420 <_init>
 80052da:	4d0a      	ldr	r5, [pc, #40]	; (8005304 <__libc_init_array+0x40>)
 80052dc:	4c0a      	ldr	r4, [pc, #40]	; (8005308 <__libc_init_array+0x44>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	42a6      	cmp	r6, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	00b3      	lsls	r3, r6, #2
 80052ea:	58eb      	ldr	r3, [r5, r3]
 80052ec:	4798      	blx	r3
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	00b3      	lsls	r3, r6, #2
 80052f4:	58eb      	ldr	r3, [r5, r3]
 80052f6:	4798      	blx	r3
 80052f8:	3601      	adds	r6, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	08006ce4 	.word	0x08006ce4
 8005300:	08006ce4 	.word	0x08006ce4
 8005304:	08006ce4 	.word	0x08006ce4
 8005308:	08006ce8 	.word	0x08006ce8

0800530c <memcpy>:
 800530c:	2300      	movs	r3, #0
 800530e:	b510      	push	{r4, lr}
 8005310:	429a      	cmp	r2, r3
 8005312:	d100      	bne.n	8005316 <memcpy+0xa>
 8005314:	bd10      	pop	{r4, pc}
 8005316:	5ccc      	ldrb	r4, [r1, r3]
 8005318:	54c4      	strb	r4, [r0, r3]
 800531a:	3301      	adds	r3, #1
 800531c:	e7f8      	b.n	8005310 <memcpy+0x4>

0800531e <memset>:
 800531e:	0003      	movs	r3, r0
 8005320:	1882      	adds	r2, r0, r2
 8005322:	4293      	cmp	r3, r2
 8005324:	d100      	bne.n	8005328 <memset+0xa>
 8005326:	4770      	bx	lr
 8005328:	7019      	strb	r1, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	e7f9      	b.n	8005322 <memset+0x4>
	...

08005330 <iprintf>:
 8005330:	b40f      	push	{r0, r1, r2, r3}
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <iprintf+0x30>)
 8005334:	b513      	push	{r0, r1, r4, lr}
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	2c00      	cmp	r4, #0
 800533a:	d005      	beq.n	8005348 <iprintf+0x18>
 800533c:	69a3      	ldr	r3, [r4, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <iprintf+0x18>
 8005342:	0020      	movs	r0, r4
 8005344:	f000 fa9a 	bl	800587c <__sinit>
 8005348:	ab05      	add	r3, sp, #20
 800534a:	0020      	movs	r0, r4
 800534c:	9a04      	ldr	r2, [sp, #16]
 800534e:	68a1      	ldr	r1, [r4, #8]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f000 fc73 	bl	8005c3c <_vfiprintf_r>
 8005356:	bc16      	pop	{r1, r2, r4}
 8005358:	bc08      	pop	{r3}
 800535a:	b004      	add	sp, #16
 800535c:	4718      	bx	r3
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	20000128 	.word	0x20000128

08005364 <putchar>:
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <putchar+0x24>)
 8005366:	b570      	push	{r4, r5, r6, lr}
 8005368:	681c      	ldr	r4, [r3, #0]
 800536a:	0005      	movs	r5, r0
 800536c:	2c00      	cmp	r4, #0
 800536e:	d005      	beq.n	800537c <putchar+0x18>
 8005370:	69a3      	ldr	r3, [r4, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <putchar+0x18>
 8005376:	0020      	movs	r0, r4
 8005378:	f000 fa80 	bl	800587c <__sinit>
 800537c:	0029      	movs	r1, r5
 800537e:	0020      	movs	r0, r4
 8005380:	68a2      	ldr	r2, [r4, #8]
 8005382:	f000 ff17 	bl	80061b4 <_putc_r>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	20000128 	.word	0x20000128

0800538c <_puts_r>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	0005      	movs	r5, r0
 8005390:	000e      	movs	r6, r1
 8005392:	2800      	cmp	r0, #0
 8005394:	d004      	beq.n	80053a0 <_puts_r+0x14>
 8005396:	6983      	ldr	r3, [r0, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <_puts_r+0x14>
 800539c:	f000 fa6e 	bl	800587c <__sinit>
 80053a0:	69ab      	ldr	r3, [r5, #24]
 80053a2:	68ac      	ldr	r4, [r5, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <_puts_r+0x22>
 80053a8:	0028      	movs	r0, r5
 80053aa:	f000 fa67 	bl	800587c <__sinit>
 80053ae:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <_puts_r+0xd8>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d122      	bne.n	80053fa <_puts_r+0x6e>
 80053b4:	686c      	ldr	r4, [r5, #4]
 80053b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b8:	07db      	lsls	r3, r3, #31
 80053ba:	d405      	bmi.n	80053c8 <_puts_r+0x3c>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	059b      	lsls	r3, r3, #22
 80053c0:	d402      	bmi.n	80053c8 <_puts_r+0x3c>
 80053c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c4:	f000 fafb 	bl	80059be <__retarget_lock_acquire_recursive>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	071b      	lsls	r3, r3, #28
 80053cc:	d502      	bpl.n	80053d4 <_puts_r+0x48>
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d129      	bne.n	8005428 <_puts_r+0x9c>
 80053d4:	0021      	movs	r1, r4
 80053d6:	0028      	movs	r0, r5
 80053d8:	f000 f8aa 	bl	8005530 <__swsetup_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d023      	beq.n	8005428 <_puts_r+0x9c>
 80053e0:	2501      	movs	r5, #1
 80053e2:	426d      	negs	r5, r5
 80053e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e6:	07db      	lsls	r3, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_puts_r+0x6a>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	059b      	lsls	r3, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_puts_r+0x6a>
 80053f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f2:	f000 fae5 	bl	80059c0 <__retarget_lock_release_recursive>
 80053f6:	0028      	movs	r0, r5
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <_puts_r+0xdc>)
 80053fc:	429c      	cmp	r4, r3
 80053fe:	d101      	bne.n	8005404 <_puts_r+0x78>
 8005400:	68ac      	ldr	r4, [r5, #8]
 8005402:	e7d8      	b.n	80053b6 <_puts_r+0x2a>
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <_puts_r+0xe0>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d1d5      	bne.n	80053b6 <_puts_r+0x2a>
 800540a:	68ec      	ldr	r4, [r5, #12]
 800540c:	e7d3      	b.n	80053b6 <_puts_r+0x2a>
 800540e:	3601      	adds	r6, #1
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	da04      	bge.n	8005420 <_puts_r+0x94>
 8005416:	69a2      	ldr	r2, [r4, #24]
 8005418:	429a      	cmp	r2, r3
 800541a:	dc16      	bgt.n	800544a <_puts_r+0xbe>
 800541c:	290a      	cmp	r1, #10
 800541e:	d014      	beq.n	800544a <_puts_r+0xbe>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	6022      	str	r2, [r4, #0]
 8005426:	7019      	strb	r1, [r3, #0]
 8005428:	68a3      	ldr	r3, [r4, #8]
 800542a:	7831      	ldrb	r1, [r6, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	2900      	cmp	r1, #0
 8005430:	d1ed      	bne.n	800540e <_puts_r+0x82>
 8005432:	60a3      	str	r3, [r4, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	da0f      	bge.n	8005458 <_puts_r+0xcc>
 8005438:	0028      	movs	r0, r5
 800543a:	0022      	movs	r2, r4
 800543c:	310a      	adds	r1, #10
 800543e:	f000 f821 	bl	8005484 <__swbuf_r>
 8005442:	250a      	movs	r5, #10
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d1cd      	bne.n	80053e4 <_puts_r+0x58>
 8005448:	e7ca      	b.n	80053e0 <_puts_r+0x54>
 800544a:	0022      	movs	r2, r4
 800544c:	0028      	movs	r0, r5
 800544e:	f000 f819 	bl	8005484 <__swbuf_r>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	d1e8      	bne.n	8005428 <_puts_r+0x9c>
 8005456:	e7c3      	b.n	80053e0 <_puts_r+0x54>
 8005458:	250a      	movs	r5, #10
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	701d      	strb	r5, [r3, #0]
 8005462:	e7bf      	b.n	80053e4 <_puts_r+0x58>
 8005464:	08006c68 	.word	0x08006c68
 8005468:	08006c88 	.word	0x08006c88
 800546c:	08006c48 	.word	0x08006c48

08005470 <puts>:
 8005470:	b510      	push	{r4, lr}
 8005472:	4b03      	ldr	r3, [pc, #12]	; (8005480 <puts+0x10>)
 8005474:	0001      	movs	r1, r0
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	f7ff ff88 	bl	800538c <_puts_r>
 800547c:	bd10      	pop	{r4, pc}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	20000128 	.word	0x20000128

08005484 <__swbuf_r>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	0005      	movs	r5, r0
 8005488:	000e      	movs	r6, r1
 800548a:	0014      	movs	r4, r2
 800548c:	2800      	cmp	r0, #0
 800548e:	d004      	beq.n	800549a <__swbuf_r+0x16>
 8005490:	6983      	ldr	r3, [r0, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <__swbuf_r+0x16>
 8005496:	f000 f9f1 	bl	800587c <__sinit>
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <__swbuf_r+0xa0>)
 800549c:	429c      	cmp	r4, r3
 800549e:	d12e      	bne.n	80054fe <__swbuf_r+0x7a>
 80054a0:	686c      	ldr	r4, [r5, #4]
 80054a2:	69a3      	ldr	r3, [r4, #24]
 80054a4:	60a3      	str	r3, [r4, #8]
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	d532      	bpl.n	8005512 <__swbuf_r+0x8e>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d02f      	beq.n	8005512 <__swbuf_r+0x8e>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	6922      	ldr	r2, [r4, #16]
 80054b6:	b2f7      	uxtb	r7, r6
 80054b8:	1a98      	subs	r0, r3, r2
 80054ba:	6963      	ldr	r3, [r4, #20]
 80054bc:	b2f6      	uxtb	r6, r6
 80054be:	4283      	cmp	r3, r0
 80054c0:	dc05      	bgt.n	80054ce <__swbuf_r+0x4a>
 80054c2:	0021      	movs	r1, r4
 80054c4:	0028      	movs	r0, r5
 80054c6:	f000 f937 	bl	8005738 <_fflush_r>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d127      	bne.n	800551e <__swbuf_r+0x9a>
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	3001      	adds	r0, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	6022      	str	r2, [r4, #0]
 80054dc:	701f      	strb	r7, [r3, #0]
 80054de:	6963      	ldr	r3, [r4, #20]
 80054e0:	4283      	cmp	r3, r0
 80054e2:	d004      	beq.n	80054ee <__swbuf_r+0x6a>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	07db      	lsls	r3, r3, #31
 80054e8:	d507      	bpl.n	80054fa <__swbuf_r+0x76>
 80054ea:	2e0a      	cmp	r6, #10
 80054ec:	d105      	bne.n	80054fa <__swbuf_r+0x76>
 80054ee:	0021      	movs	r1, r4
 80054f0:	0028      	movs	r0, r5
 80054f2:	f000 f921 	bl	8005738 <_fflush_r>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d111      	bne.n	800551e <__swbuf_r+0x9a>
 80054fa:	0030      	movs	r0, r6
 80054fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <__swbuf_r+0xa4>)
 8005500:	429c      	cmp	r4, r3
 8005502:	d101      	bne.n	8005508 <__swbuf_r+0x84>
 8005504:	68ac      	ldr	r4, [r5, #8]
 8005506:	e7cc      	b.n	80054a2 <__swbuf_r+0x1e>
 8005508:	4b08      	ldr	r3, [pc, #32]	; (800552c <__swbuf_r+0xa8>)
 800550a:	429c      	cmp	r4, r3
 800550c:	d1c9      	bne.n	80054a2 <__swbuf_r+0x1e>
 800550e:	68ec      	ldr	r4, [r5, #12]
 8005510:	e7c7      	b.n	80054a2 <__swbuf_r+0x1e>
 8005512:	0021      	movs	r1, r4
 8005514:	0028      	movs	r0, r5
 8005516:	f000 f80b 	bl	8005530 <__swsetup_r>
 800551a:	2800      	cmp	r0, #0
 800551c:	d0c9      	beq.n	80054b2 <__swbuf_r+0x2e>
 800551e:	2601      	movs	r6, #1
 8005520:	4276      	negs	r6, r6
 8005522:	e7ea      	b.n	80054fa <__swbuf_r+0x76>
 8005524:	08006c68 	.word	0x08006c68
 8005528:	08006c88 	.word	0x08006c88
 800552c:	08006c48 	.word	0x08006c48

08005530 <__swsetup_r>:
 8005530:	4b37      	ldr	r3, [pc, #220]	; (8005610 <__swsetup_r+0xe0>)
 8005532:	b570      	push	{r4, r5, r6, lr}
 8005534:	681d      	ldr	r5, [r3, #0]
 8005536:	0006      	movs	r6, r0
 8005538:	000c      	movs	r4, r1
 800553a:	2d00      	cmp	r5, #0
 800553c:	d005      	beq.n	800554a <__swsetup_r+0x1a>
 800553e:	69ab      	ldr	r3, [r5, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <__swsetup_r+0x1a>
 8005544:	0028      	movs	r0, r5
 8005546:	f000 f999 	bl	800587c <__sinit>
 800554a:	4b32      	ldr	r3, [pc, #200]	; (8005614 <__swsetup_r+0xe4>)
 800554c:	429c      	cmp	r4, r3
 800554e:	d10f      	bne.n	8005570 <__swsetup_r+0x40>
 8005550:	686c      	ldr	r4, [r5, #4]
 8005552:	230c      	movs	r3, #12
 8005554:	5ee2      	ldrsh	r2, [r4, r3]
 8005556:	b293      	uxth	r3, r2
 8005558:	0711      	lsls	r1, r2, #28
 800555a:	d42d      	bmi.n	80055b8 <__swsetup_r+0x88>
 800555c:	06d9      	lsls	r1, r3, #27
 800555e:	d411      	bmi.n	8005584 <__swsetup_r+0x54>
 8005560:	2309      	movs	r3, #9
 8005562:	2001      	movs	r0, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	3337      	adds	r3, #55	; 0x37
 8005568:	4313      	orrs	r3, r2
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	4240      	negs	r0, r0
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	4b29      	ldr	r3, [pc, #164]	; (8005618 <__swsetup_r+0xe8>)
 8005572:	429c      	cmp	r4, r3
 8005574:	d101      	bne.n	800557a <__swsetup_r+0x4a>
 8005576:	68ac      	ldr	r4, [r5, #8]
 8005578:	e7eb      	b.n	8005552 <__swsetup_r+0x22>
 800557a:	4b28      	ldr	r3, [pc, #160]	; (800561c <__swsetup_r+0xec>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d1e8      	bne.n	8005552 <__swsetup_r+0x22>
 8005580:	68ec      	ldr	r4, [r5, #12]
 8005582:	e7e6      	b.n	8005552 <__swsetup_r+0x22>
 8005584:	075b      	lsls	r3, r3, #29
 8005586:	d513      	bpl.n	80055b0 <__swsetup_r+0x80>
 8005588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800558a:	2900      	cmp	r1, #0
 800558c:	d008      	beq.n	80055a0 <__swsetup_r+0x70>
 800558e:	0023      	movs	r3, r4
 8005590:	3344      	adds	r3, #68	; 0x44
 8005592:	4299      	cmp	r1, r3
 8005594:	d002      	beq.n	800559c <__swsetup_r+0x6c>
 8005596:	0030      	movs	r0, r6
 8005598:	f000 fa80 	bl	8005a9c <_free_r>
 800559c:	2300      	movs	r3, #0
 800559e:	6363      	str	r3, [r4, #52]	; 0x34
 80055a0:	2224      	movs	r2, #36	; 0x24
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	4393      	bics	r3, r2
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	2300      	movs	r3, #0
 80055aa:	6063      	str	r3, [r4, #4]
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	2308      	movs	r3, #8
 80055b2:	89a2      	ldrh	r2, [r4, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <__swsetup_r+0xa6>
 80055be:	21a0      	movs	r1, #160	; 0xa0
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	0089      	lsls	r1, r1, #2
 80055c6:	0092      	lsls	r2, r2, #2
 80055c8:	400b      	ands	r3, r1
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <__swsetup_r+0xa6>
 80055ce:	0021      	movs	r1, r4
 80055d0:	0030      	movs	r0, r6
 80055d2:	f000 fa1f 	bl	8005a14 <__smakebuf_r>
 80055d6:	220c      	movs	r2, #12
 80055d8:	5ea3      	ldrsh	r3, [r4, r2]
 80055da:	2001      	movs	r0, #1
 80055dc:	001a      	movs	r2, r3
 80055de:	b299      	uxth	r1, r3
 80055e0:	4002      	ands	r2, r0
 80055e2:	4203      	tst	r3, r0
 80055e4:	d00f      	beq.n	8005606 <__swsetup_r+0xd6>
 80055e6:	2200      	movs	r2, #0
 80055e8:	60a2      	str	r2, [r4, #8]
 80055ea:	6962      	ldr	r2, [r4, #20]
 80055ec:	4252      	negs	r2, r2
 80055ee:	61a2      	str	r2, [r4, #24]
 80055f0:	2000      	movs	r0, #0
 80055f2:	6922      	ldr	r2, [r4, #16]
 80055f4:	4282      	cmp	r2, r0
 80055f6:	d1ba      	bne.n	800556e <__swsetup_r+0x3e>
 80055f8:	060a      	lsls	r2, r1, #24
 80055fa:	d5b8      	bpl.n	800556e <__swsetup_r+0x3e>
 80055fc:	2240      	movs	r2, #64	; 0x40
 80055fe:	4313      	orrs	r3, r2
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	3801      	subs	r0, #1
 8005604:	e7b3      	b.n	800556e <__swsetup_r+0x3e>
 8005606:	0788      	lsls	r0, r1, #30
 8005608:	d400      	bmi.n	800560c <__swsetup_r+0xdc>
 800560a:	6962      	ldr	r2, [r4, #20]
 800560c:	60a2      	str	r2, [r4, #8]
 800560e:	e7ef      	b.n	80055f0 <__swsetup_r+0xc0>
 8005610:	20000128 	.word	0x20000128
 8005614:	08006c68 	.word	0x08006c68
 8005618:	08006c88 	.word	0x08006c88
 800561c:	08006c48 	.word	0x08006c48

08005620 <__sflush_r>:
 8005620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005622:	898b      	ldrh	r3, [r1, #12]
 8005624:	0005      	movs	r5, r0
 8005626:	000c      	movs	r4, r1
 8005628:	071a      	lsls	r2, r3, #28
 800562a:	d45f      	bmi.n	80056ec <__sflush_r+0xcc>
 800562c:	684a      	ldr	r2, [r1, #4]
 800562e:	2a00      	cmp	r2, #0
 8005630:	dc04      	bgt.n	800563c <__sflush_r+0x1c>
 8005632:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005634:	2a00      	cmp	r2, #0
 8005636:	dc01      	bgt.n	800563c <__sflush_r+0x1c>
 8005638:	2000      	movs	r0, #0
 800563a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800563c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800563e:	2f00      	cmp	r7, #0
 8005640:	d0fa      	beq.n	8005638 <__sflush_r+0x18>
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	682e      	ldr	r6, [r5, #0]
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	001a      	movs	r2, r3
 800564c:	0149      	lsls	r1, r1, #5
 800564e:	400a      	ands	r2, r1
 8005650:	420b      	tst	r3, r1
 8005652:	d034      	beq.n	80056be <__sflush_r+0x9e>
 8005654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	075b      	lsls	r3, r3, #29
 800565a:	d506      	bpl.n	800566a <__sflush_r+0x4a>
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	1ac0      	subs	r0, r0, r3
 8005660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <__sflush_r+0x4a>
 8005666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005668:	1ac0      	subs	r0, r0, r3
 800566a:	0002      	movs	r2, r0
 800566c:	6a21      	ldr	r1, [r4, #32]
 800566e:	2300      	movs	r3, #0
 8005670:	0028      	movs	r0, r5
 8005672:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005674:	47b8      	blx	r7
 8005676:	89a1      	ldrh	r1, [r4, #12]
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d106      	bne.n	800568a <__sflush_r+0x6a>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	2b1d      	cmp	r3, #29
 8005680:	d831      	bhi.n	80056e6 <__sflush_r+0xc6>
 8005682:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <__sflush_r+0x114>)
 8005684:	40da      	lsrs	r2, r3
 8005686:	07d3      	lsls	r3, r2, #31
 8005688:	d52d      	bpl.n	80056e6 <__sflush_r+0xc6>
 800568a:	2300      	movs	r3, #0
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	04cb      	lsls	r3, r1, #19
 8005694:	d505      	bpl.n	80056a2 <__sflush_r+0x82>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	d102      	bne.n	80056a0 <__sflush_r+0x80>
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d100      	bne.n	80056a2 <__sflush_r+0x82>
 80056a0:	6560      	str	r0, [r4, #84]	; 0x54
 80056a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a4:	602e      	str	r6, [r5, #0]
 80056a6:	2900      	cmp	r1, #0
 80056a8:	d0c6      	beq.n	8005638 <__sflush_r+0x18>
 80056aa:	0023      	movs	r3, r4
 80056ac:	3344      	adds	r3, #68	; 0x44
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d002      	beq.n	80056b8 <__sflush_r+0x98>
 80056b2:	0028      	movs	r0, r5
 80056b4:	f000 f9f2 	bl	8005a9c <_free_r>
 80056b8:	2000      	movs	r0, #0
 80056ba:	6360      	str	r0, [r4, #52]	; 0x34
 80056bc:	e7bd      	b.n	800563a <__sflush_r+0x1a>
 80056be:	2301      	movs	r3, #1
 80056c0:	0028      	movs	r0, r5
 80056c2:	6a21      	ldr	r1, [r4, #32]
 80056c4:	47b8      	blx	r7
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	d1c5      	bne.n	8005656 <__sflush_r+0x36>
 80056ca:	682b      	ldr	r3, [r5, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0c2      	beq.n	8005656 <__sflush_r+0x36>
 80056d0:	2b1d      	cmp	r3, #29
 80056d2:	d001      	beq.n	80056d8 <__sflush_r+0xb8>
 80056d4:	2b16      	cmp	r3, #22
 80056d6:	d101      	bne.n	80056dc <__sflush_r+0xbc>
 80056d8:	602e      	str	r6, [r5, #0]
 80056da:	e7ad      	b.n	8005638 <__sflush_r+0x18>
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	89a2      	ldrh	r2, [r4, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	e7a9      	b.n	800563a <__sflush_r+0x1a>
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	430b      	orrs	r3, r1
 80056ea:	e7fa      	b.n	80056e2 <__sflush_r+0xc2>
 80056ec:	690f      	ldr	r7, [r1, #16]
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	d0a2      	beq.n	8005638 <__sflush_r+0x18>
 80056f2:	680a      	ldr	r2, [r1, #0]
 80056f4:	600f      	str	r7, [r1, #0]
 80056f6:	1bd2      	subs	r2, r2, r7
 80056f8:	9201      	str	r2, [sp, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	079b      	lsls	r3, r3, #30
 80056fe:	d100      	bne.n	8005702 <__sflush_r+0xe2>
 8005700:	694a      	ldr	r2, [r1, #20]
 8005702:	60a2      	str	r2, [r4, #8]
 8005704:	9b01      	ldr	r3, [sp, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	dc00      	bgt.n	800570c <__sflush_r+0xec>
 800570a:	e795      	b.n	8005638 <__sflush_r+0x18>
 800570c:	003a      	movs	r2, r7
 800570e:	0028      	movs	r0, r5
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	6a21      	ldr	r1, [r4, #32]
 8005714:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005716:	47b0      	blx	r6
 8005718:	2800      	cmp	r0, #0
 800571a:	dc06      	bgt.n	800572a <__sflush_r+0x10a>
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	2001      	movs	r0, #1
 8005720:	89a2      	ldrh	r2, [r4, #12]
 8005722:	4240      	negs	r0, r0
 8005724:	4313      	orrs	r3, r2
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	e787      	b.n	800563a <__sflush_r+0x1a>
 800572a:	9b01      	ldr	r3, [sp, #4]
 800572c:	183f      	adds	r7, r7, r0
 800572e:	1a1b      	subs	r3, r3, r0
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	e7e7      	b.n	8005704 <__sflush_r+0xe4>
 8005734:	20400001 	.word	0x20400001

08005738 <_fflush_r>:
 8005738:	690b      	ldr	r3, [r1, #16]
 800573a:	b570      	push	{r4, r5, r6, lr}
 800573c:	0005      	movs	r5, r0
 800573e:	000c      	movs	r4, r1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <_fflush_r+0x12>
 8005744:	2500      	movs	r5, #0
 8005746:	0028      	movs	r0, r5
 8005748:	bd70      	pop	{r4, r5, r6, pc}
 800574a:	2800      	cmp	r0, #0
 800574c:	d004      	beq.n	8005758 <_fflush_r+0x20>
 800574e:	6983      	ldr	r3, [r0, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <_fflush_r+0x20>
 8005754:	f000 f892 	bl	800587c <__sinit>
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <_fflush_r+0x74>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d11b      	bne.n	8005796 <_fflush_r+0x5e>
 800575e:	686c      	ldr	r4, [r5, #4]
 8005760:	220c      	movs	r2, #12
 8005762:	5ea3      	ldrsh	r3, [r4, r2]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ed      	beq.n	8005744 <_fflush_r+0xc>
 8005768:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800576a:	07d2      	lsls	r2, r2, #31
 800576c:	d404      	bmi.n	8005778 <_fflush_r+0x40>
 800576e:	059b      	lsls	r3, r3, #22
 8005770:	d402      	bmi.n	8005778 <_fflush_r+0x40>
 8005772:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005774:	f000 f923 	bl	80059be <__retarget_lock_acquire_recursive>
 8005778:	0028      	movs	r0, r5
 800577a:	0021      	movs	r1, r4
 800577c:	f7ff ff50 	bl	8005620 <__sflush_r>
 8005780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005782:	0005      	movs	r5, r0
 8005784:	07db      	lsls	r3, r3, #31
 8005786:	d4de      	bmi.n	8005746 <_fflush_r+0xe>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	059b      	lsls	r3, r3, #22
 800578c:	d4db      	bmi.n	8005746 <_fflush_r+0xe>
 800578e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005790:	f000 f916 	bl	80059c0 <__retarget_lock_release_recursive>
 8005794:	e7d7      	b.n	8005746 <_fflush_r+0xe>
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <_fflush_r+0x78>)
 8005798:	429c      	cmp	r4, r3
 800579a:	d101      	bne.n	80057a0 <_fflush_r+0x68>
 800579c:	68ac      	ldr	r4, [r5, #8]
 800579e:	e7df      	b.n	8005760 <_fflush_r+0x28>
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <_fflush_r+0x7c>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d1dc      	bne.n	8005760 <_fflush_r+0x28>
 80057a6:	68ec      	ldr	r4, [r5, #12]
 80057a8:	e7da      	b.n	8005760 <_fflush_r+0x28>
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	08006c68 	.word	0x08006c68
 80057b0:	08006c88 	.word	0x08006c88
 80057b4:	08006c48 	.word	0x08006c48

080057b8 <std>:
 80057b8:	2300      	movs	r3, #0
 80057ba:	b510      	push	{r4, lr}
 80057bc:	0004      	movs	r4, r0
 80057be:	6003      	str	r3, [r0, #0]
 80057c0:	6043      	str	r3, [r0, #4]
 80057c2:	6083      	str	r3, [r0, #8]
 80057c4:	8181      	strh	r1, [r0, #12]
 80057c6:	6643      	str	r3, [r0, #100]	; 0x64
 80057c8:	0019      	movs	r1, r3
 80057ca:	81c2      	strh	r2, [r0, #14]
 80057cc:	6103      	str	r3, [r0, #16]
 80057ce:	6143      	str	r3, [r0, #20]
 80057d0:	6183      	str	r3, [r0, #24]
 80057d2:	2208      	movs	r2, #8
 80057d4:	305c      	adds	r0, #92	; 0x5c
 80057d6:	f7ff fda2 	bl	800531e <memset>
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x38>)
 80057dc:	6263      	str	r3, [r4, #36]	; 0x24
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <std+0x3c>)
 80057e0:	6224      	str	r4, [r4, #32]
 80057e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <std+0x40>)
 80057e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <std+0x44>)
 80057ea:	6323      	str	r3, [r4, #48]	; 0x30
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	0800626d 	.word	0x0800626d
 80057f4:	08006295 	.word	0x08006295
 80057f8:	080062cd 	.word	0x080062cd
 80057fc:	080062f9 	.word	0x080062f9

08005800 <_cleanup_r>:
 8005800:	b510      	push	{r4, lr}
 8005802:	4902      	ldr	r1, [pc, #8]	; (800580c <_cleanup_r+0xc>)
 8005804:	f000 f8ba 	bl	800597c <_fwalk_reent>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	08005739 	.word	0x08005739

08005810 <__sfmoreglue>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	2568      	movs	r5, #104	; 0x68
 8005814:	1e4a      	subs	r2, r1, #1
 8005816:	4355      	muls	r5, r2
 8005818:	000e      	movs	r6, r1
 800581a:	0029      	movs	r1, r5
 800581c:	3174      	adds	r1, #116	; 0x74
 800581e:	f000 f987 	bl	8005b30 <_malloc_r>
 8005822:	1e04      	subs	r4, r0, #0
 8005824:	d008      	beq.n	8005838 <__sfmoreglue+0x28>
 8005826:	2100      	movs	r1, #0
 8005828:	002a      	movs	r2, r5
 800582a:	6001      	str	r1, [r0, #0]
 800582c:	6046      	str	r6, [r0, #4]
 800582e:	300c      	adds	r0, #12
 8005830:	60a0      	str	r0, [r4, #8]
 8005832:	3268      	adds	r2, #104	; 0x68
 8005834:	f7ff fd73 	bl	800531e <memset>
 8005838:	0020      	movs	r0, r4
 800583a:	bd70      	pop	{r4, r5, r6, pc}

0800583c <__sfp_lock_acquire>:
 800583c:	b510      	push	{r4, lr}
 800583e:	4802      	ldr	r0, [pc, #8]	; (8005848 <__sfp_lock_acquire+0xc>)
 8005840:	f000 f8bd 	bl	80059be <__retarget_lock_acquire_recursive>
 8005844:	bd10      	pop	{r4, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	200006f4 	.word	0x200006f4

0800584c <__sfp_lock_release>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4802      	ldr	r0, [pc, #8]	; (8005858 <__sfp_lock_release+0xc>)
 8005850:	f000 f8b6 	bl	80059c0 <__retarget_lock_release_recursive>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	200006f4 	.word	0x200006f4

0800585c <__sinit_lock_acquire>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4802      	ldr	r0, [pc, #8]	; (8005868 <__sinit_lock_acquire+0xc>)
 8005860:	f000 f8ad 	bl	80059be <__retarget_lock_acquire_recursive>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	200006ef 	.word	0x200006ef

0800586c <__sinit_lock_release>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4802      	ldr	r0, [pc, #8]	; (8005878 <__sinit_lock_release+0xc>)
 8005870:	f000 f8a6 	bl	80059c0 <__retarget_lock_release_recursive>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	200006ef 	.word	0x200006ef

0800587c <__sinit>:
 800587c:	b513      	push	{r0, r1, r4, lr}
 800587e:	0004      	movs	r4, r0
 8005880:	f7ff ffec 	bl	800585c <__sinit_lock_acquire>
 8005884:	69a3      	ldr	r3, [r4, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <__sinit+0x14>
 800588a:	f7ff ffef 	bl	800586c <__sinit_lock_release>
 800588e:	bd13      	pop	{r0, r1, r4, pc}
 8005890:	64a3      	str	r3, [r4, #72]	; 0x48
 8005892:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005894:	6523      	str	r3, [r4, #80]	; 0x50
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <__sinit+0x68>)
 8005898:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <__sinit+0x6c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	62a2      	str	r2, [r4, #40]	; 0x28
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	d101      	bne.n	80058a8 <__sinit+0x2c>
 80058a4:	2301      	movs	r3, #1
 80058a6:	61a3      	str	r3, [r4, #24]
 80058a8:	0020      	movs	r0, r4
 80058aa:	f000 f81f 	bl	80058ec <__sfp>
 80058ae:	6060      	str	r0, [r4, #4]
 80058b0:	0020      	movs	r0, r4
 80058b2:	f000 f81b 	bl	80058ec <__sfp>
 80058b6:	60a0      	str	r0, [r4, #8]
 80058b8:	0020      	movs	r0, r4
 80058ba:	f000 f817 	bl	80058ec <__sfp>
 80058be:	2200      	movs	r2, #0
 80058c0:	2104      	movs	r1, #4
 80058c2:	60e0      	str	r0, [r4, #12]
 80058c4:	6860      	ldr	r0, [r4, #4]
 80058c6:	f7ff ff77 	bl	80057b8 <std>
 80058ca:	2201      	movs	r2, #1
 80058cc:	2109      	movs	r1, #9
 80058ce:	68a0      	ldr	r0, [r4, #8]
 80058d0:	f7ff ff72 	bl	80057b8 <std>
 80058d4:	2202      	movs	r2, #2
 80058d6:	2112      	movs	r1, #18
 80058d8:	68e0      	ldr	r0, [r4, #12]
 80058da:	f7ff ff6d 	bl	80057b8 <std>
 80058de:	2301      	movs	r3, #1
 80058e0:	61a3      	str	r3, [r4, #24]
 80058e2:	e7d2      	b.n	800588a <__sinit+0xe>
 80058e4:	08006c44 	.word	0x08006c44
 80058e8:	08005801 	.word	0x08005801

080058ec <__sfp>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	0007      	movs	r7, r0
 80058f0:	f7ff ffa4 	bl	800583c <__sfp_lock_acquire>
 80058f4:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <__sfp+0x88>)
 80058f6:	681e      	ldr	r6, [r3, #0]
 80058f8:	69b3      	ldr	r3, [r6, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <__sfp+0x18>
 80058fe:	0030      	movs	r0, r6
 8005900:	f7ff ffbc 	bl	800587c <__sinit>
 8005904:	3648      	adds	r6, #72	; 0x48
 8005906:	68b4      	ldr	r4, [r6, #8]
 8005908:	6873      	ldr	r3, [r6, #4]
 800590a:	3b01      	subs	r3, #1
 800590c:	d504      	bpl.n	8005918 <__sfp+0x2c>
 800590e:	6833      	ldr	r3, [r6, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <__sfp+0x6e>
 8005914:	6836      	ldr	r6, [r6, #0]
 8005916:	e7f6      	b.n	8005906 <__sfp+0x1a>
 8005918:	220c      	movs	r2, #12
 800591a:	5ea5      	ldrsh	r5, [r4, r2]
 800591c:	2d00      	cmp	r5, #0
 800591e:	d11a      	bne.n	8005956 <__sfp+0x6a>
 8005920:	0020      	movs	r0, r4
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <__sfp+0x8c>)
 8005924:	3058      	adds	r0, #88	; 0x58
 8005926:	60e3      	str	r3, [r4, #12]
 8005928:	6665      	str	r5, [r4, #100]	; 0x64
 800592a:	f000 f847 	bl	80059bc <__retarget_lock_init_recursive>
 800592e:	f7ff ff8d 	bl	800584c <__sfp_lock_release>
 8005932:	0020      	movs	r0, r4
 8005934:	2208      	movs	r2, #8
 8005936:	0029      	movs	r1, r5
 8005938:	6025      	str	r5, [r4, #0]
 800593a:	60a5      	str	r5, [r4, #8]
 800593c:	6065      	str	r5, [r4, #4]
 800593e:	6125      	str	r5, [r4, #16]
 8005940:	6165      	str	r5, [r4, #20]
 8005942:	61a5      	str	r5, [r4, #24]
 8005944:	305c      	adds	r0, #92	; 0x5c
 8005946:	f7ff fcea 	bl	800531e <memset>
 800594a:	6365      	str	r5, [r4, #52]	; 0x34
 800594c:	63a5      	str	r5, [r4, #56]	; 0x38
 800594e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005950:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005952:	0020      	movs	r0, r4
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005956:	3468      	adds	r4, #104	; 0x68
 8005958:	e7d7      	b.n	800590a <__sfp+0x1e>
 800595a:	2104      	movs	r1, #4
 800595c:	0038      	movs	r0, r7
 800595e:	f7ff ff57 	bl	8005810 <__sfmoreglue>
 8005962:	1e04      	subs	r4, r0, #0
 8005964:	6030      	str	r0, [r6, #0]
 8005966:	d1d5      	bne.n	8005914 <__sfp+0x28>
 8005968:	f7ff ff70 	bl	800584c <__sfp_lock_release>
 800596c:	230c      	movs	r3, #12
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	e7ef      	b.n	8005952 <__sfp+0x66>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	08006c44 	.word	0x08006c44
 8005978:	ffff0001 	.word	0xffff0001

0800597c <_fwalk_reent>:
 800597c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800597e:	0004      	movs	r4, r0
 8005980:	0006      	movs	r6, r0
 8005982:	2700      	movs	r7, #0
 8005984:	9101      	str	r1, [sp, #4]
 8005986:	3448      	adds	r4, #72	; 0x48
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	68a5      	ldr	r5, [r4, #8]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	9b00      	ldr	r3, [sp, #0]
 8005990:	3b01      	subs	r3, #1
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	d504      	bpl.n	80059a0 <_fwalk_reent+0x24>
 8005996:	6824      	ldr	r4, [r4, #0]
 8005998:	2c00      	cmp	r4, #0
 800599a:	d1f5      	bne.n	8005988 <_fwalk_reent+0xc>
 800599c:	0038      	movs	r0, r7
 800599e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059a0:	89ab      	ldrh	r3, [r5, #12]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d908      	bls.n	80059b8 <_fwalk_reent+0x3c>
 80059a6:	220e      	movs	r2, #14
 80059a8:	5eab      	ldrsh	r3, [r5, r2]
 80059aa:	3301      	adds	r3, #1
 80059ac:	d004      	beq.n	80059b8 <_fwalk_reent+0x3c>
 80059ae:	0029      	movs	r1, r5
 80059b0:	0030      	movs	r0, r6
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	4798      	blx	r3
 80059b6:	4307      	orrs	r7, r0
 80059b8:	3568      	adds	r5, #104	; 0x68
 80059ba:	e7e8      	b.n	800598e <_fwalk_reent+0x12>

080059bc <__retarget_lock_init_recursive>:
 80059bc:	4770      	bx	lr

080059be <__retarget_lock_acquire_recursive>:
 80059be:	4770      	bx	lr

080059c0 <__retarget_lock_release_recursive>:
 80059c0:	4770      	bx	lr
	...

080059c4 <__swhatbuf_r>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	000e      	movs	r6, r1
 80059c8:	001d      	movs	r5, r3
 80059ca:	230e      	movs	r3, #14
 80059cc:	5ec9      	ldrsh	r1, [r1, r3]
 80059ce:	0014      	movs	r4, r2
 80059d0:	b096      	sub	sp, #88	; 0x58
 80059d2:	2900      	cmp	r1, #0
 80059d4:	da07      	bge.n	80059e6 <__swhatbuf_r+0x22>
 80059d6:	2300      	movs	r3, #0
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	89b3      	ldrh	r3, [r6, #12]
 80059dc:	061b      	lsls	r3, r3, #24
 80059de:	d411      	bmi.n	8005a04 <__swhatbuf_r+0x40>
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	e00f      	b.n	8005a06 <__swhatbuf_r+0x42>
 80059e6:	466a      	mov	r2, sp
 80059e8:	f000 fcb2 	bl	8006350 <_fstat_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	dbf2      	blt.n	80059d6 <__swhatbuf_r+0x12>
 80059f0:	23f0      	movs	r3, #240	; 0xf0
 80059f2:	9901      	ldr	r1, [sp, #4]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	4019      	ands	r1, r3
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <__swhatbuf_r+0x4c>)
 80059fa:	18c9      	adds	r1, r1, r3
 80059fc:	424b      	negs	r3, r1
 80059fe:	4159      	adcs	r1, r3
 8005a00:	6029      	str	r1, [r5, #0]
 8005a02:	e7ed      	b.n	80059e0 <__swhatbuf_r+0x1c>
 8005a04:	2340      	movs	r3, #64	; 0x40
 8005a06:	2000      	movs	r0, #0
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	b016      	add	sp, #88	; 0x58
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	ffffe000 	.word	0xffffe000

08005a14 <__smakebuf_r>:
 8005a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a16:	2602      	movs	r6, #2
 8005a18:	898b      	ldrh	r3, [r1, #12]
 8005a1a:	0005      	movs	r5, r0
 8005a1c:	000c      	movs	r4, r1
 8005a1e:	4233      	tst	r3, r6
 8005a20:	d006      	beq.n	8005a30 <__smakebuf_r+0x1c>
 8005a22:	0023      	movs	r3, r4
 8005a24:	3347      	adds	r3, #71	; 0x47
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	6163      	str	r3, [r4, #20]
 8005a2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005a30:	466a      	mov	r2, sp
 8005a32:	ab01      	add	r3, sp, #4
 8005a34:	f7ff ffc6 	bl	80059c4 <__swhatbuf_r>
 8005a38:	9900      	ldr	r1, [sp, #0]
 8005a3a:	0007      	movs	r7, r0
 8005a3c:	0028      	movs	r0, r5
 8005a3e:	f000 f877 	bl	8005b30 <_malloc_r>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d108      	bne.n	8005a58 <__smakebuf_r+0x44>
 8005a46:	220c      	movs	r2, #12
 8005a48:	5ea3      	ldrsh	r3, [r4, r2]
 8005a4a:	059a      	lsls	r2, r3, #22
 8005a4c:	d4ef      	bmi.n	8005a2e <__smakebuf_r+0x1a>
 8005a4e:	2203      	movs	r2, #3
 8005a50:	4393      	bics	r3, r2
 8005a52:	431e      	orrs	r6, r3
 8005a54:	81a6      	strh	r6, [r4, #12]
 8005a56:	e7e4      	b.n	8005a22 <__smakebuf_r+0xe>
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <__smakebuf_r+0x84>)
 8005a5a:	62ab      	str	r3, [r5, #40]	; 0x28
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	89a2      	ldrh	r2, [r4, #12]
 8005a60:	6020      	str	r0, [r4, #0]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	9b00      	ldr	r3, [sp, #0]
 8005a68:	6120      	str	r0, [r4, #16]
 8005a6a:	6163      	str	r3, [r4, #20]
 8005a6c:	9b01      	ldr	r3, [sp, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <__smakebuf_r+0x7a>
 8005a72:	0028      	movs	r0, r5
 8005a74:	230e      	movs	r3, #14
 8005a76:	5ee1      	ldrsh	r1, [r4, r3]
 8005a78:	f000 fc7c 	bl	8006374 <_isatty_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d006      	beq.n	8005a8e <__smakebuf_r+0x7a>
 8005a80:	2203      	movs	r2, #3
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	4393      	bics	r3, r2
 8005a86:	001a      	movs	r2, r3
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	89a0      	ldrh	r0, [r4, #12]
 8005a90:	4307      	orrs	r7, r0
 8005a92:	81a7      	strh	r7, [r4, #12]
 8005a94:	e7cb      	b.n	8005a2e <__smakebuf_r+0x1a>
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	08005801 	.word	0x08005801

08005a9c <_free_r>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	0005      	movs	r5, r0
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	d010      	beq.n	8005ac6 <_free_r+0x2a>
 8005aa4:	1f0c      	subs	r4, r1, #4
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da00      	bge.n	8005aae <_free_r+0x12>
 8005aac:	18e4      	adds	r4, r4, r3
 8005aae:	0028      	movs	r0, r5
 8005ab0:	f000 fc92 	bl	80063d8 <__malloc_lock>
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <_free_r+0x90>)
 8005ab6:	6813      	ldr	r3, [r2, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <_free_r+0x2c>
 8005abc:	6063      	str	r3, [r4, #4]
 8005abe:	6014      	str	r4, [r2, #0]
 8005ac0:	0028      	movs	r0, r5
 8005ac2:	f000 fc91 	bl	80063e8 <__malloc_unlock>
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d908      	bls.n	8005ade <_free_r+0x42>
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	1860      	adds	r0, r4, r1
 8005ad0:	4283      	cmp	r3, r0
 8005ad2:	d1f3      	bne.n	8005abc <_free_r+0x20>
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	1841      	adds	r1, r0, r1
 8005ada:	6021      	str	r1, [r4, #0]
 8005adc:	e7ee      	b.n	8005abc <_free_r+0x20>
 8005ade:	001a      	movs	r2, r3
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <_free_r+0x4e>
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	d9f9      	bls.n	8005ade <_free_r+0x42>
 8005aea:	6811      	ldr	r1, [r2, #0]
 8005aec:	1850      	adds	r0, r2, r1
 8005aee:	42a0      	cmp	r0, r4
 8005af0:	d10b      	bne.n	8005b0a <_free_r+0x6e>
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	1809      	adds	r1, r1, r0
 8005af6:	1850      	adds	r0, r2, r1
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	4283      	cmp	r3, r0
 8005afc:	d1e0      	bne.n	8005ac0 <_free_r+0x24>
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	1841      	adds	r1, r0, r1
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	6053      	str	r3, [r2, #4]
 8005b08:	e7da      	b.n	8005ac0 <_free_r+0x24>
 8005b0a:	42a0      	cmp	r0, r4
 8005b0c:	d902      	bls.n	8005b14 <_free_r+0x78>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	e7d5      	b.n	8005ac0 <_free_r+0x24>
 8005b14:	6821      	ldr	r1, [r4, #0]
 8005b16:	1860      	adds	r0, r4, r1
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	d103      	bne.n	8005b24 <_free_r+0x88>
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	1841      	adds	r1, r0, r1
 8005b22:	6021      	str	r1, [r4, #0]
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	6054      	str	r4, [r2, #4]
 8005b28:	e7ca      	b.n	8005ac0 <_free_r+0x24>
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	20000388 	.word	0x20000388

08005b30 <_malloc_r>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	2303      	movs	r3, #3
 8005b34:	1ccd      	adds	r5, r1, #3
 8005b36:	439d      	bics	r5, r3
 8005b38:	3508      	adds	r5, #8
 8005b3a:	0006      	movs	r6, r0
 8005b3c:	2d0c      	cmp	r5, #12
 8005b3e:	d21f      	bcs.n	8005b80 <_malloc_r+0x50>
 8005b40:	250c      	movs	r5, #12
 8005b42:	42a9      	cmp	r1, r5
 8005b44:	d81e      	bhi.n	8005b84 <_malloc_r+0x54>
 8005b46:	0030      	movs	r0, r6
 8005b48:	f000 fc46 	bl	80063d8 <__malloc_lock>
 8005b4c:	4925      	ldr	r1, [pc, #148]	; (8005be4 <_malloc_r+0xb4>)
 8005b4e:	680a      	ldr	r2, [r1, #0]
 8005b50:	0014      	movs	r4, r2
 8005b52:	2c00      	cmp	r4, #0
 8005b54:	d11a      	bne.n	8005b8c <_malloc_r+0x5c>
 8005b56:	4f24      	ldr	r7, [pc, #144]	; (8005be8 <_malloc_r+0xb8>)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <_malloc_r+0x38>
 8005b5e:	0021      	movs	r1, r4
 8005b60:	0030      	movs	r0, r6
 8005b62:	f000 fb71 	bl	8006248 <_sbrk_r>
 8005b66:	6038      	str	r0, [r7, #0]
 8005b68:	0029      	movs	r1, r5
 8005b6a:	0030      	movs	r0, r6
 8005b6c:	f000 fb6c 	bl	8006248 <_sbrk_r>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d12b      	bne.n	8005bcc <_malloc_r+0x9c>
 8005b74:	230c      	movs	r3, #12
 8005b76:	0030      	movs	r0, r6
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	f000 fc35 	bl	80063e8 <__malloc_unlock>
 8005b7e:	e003      	b.n	8005b88 <_malloc_r+0x58>
 8005b80:	2d00      	cmp	r5, #0
 8005b82:	dade      	bge.n	8005b42 <_malloc_r+0x12>
 8005b84:	230c      	movs	r3, #12
 8005b86:	6033      	str	r3, [r6, #0]
 8005b88:	2000      	movs	r0, #0
 8005b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	1b5b      	subs	r3, r3, r5
 8005b90:	d419      	bmi.n	8005bc6 <_malloc_r+0x96>
 8005b92:	2b0b      	cmp	r3, #11
 8005b94:	d903      	bls.n	8005b9e <_malloc_r+0x6e>
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	18e4      	adds	r4, r4, r3
 8005b9a:	6025      	str	r5, [r4, #0]
 8005b9c:	e003      	b.n	8005ba6 <_malloc_r+0x76>
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	42a2      	cmp	r2, r4
 8005ba2:	d10e      	bne.n	8005bc2 <_malloc_r+0x92>
 8005ba4:	600b      	str	r3, [r1, #0]
 8005ba6:	0030      	movs	r0, r6
 8005ba8:	f000 fc1e 	bl	80063e8 <__malloc_unlock>
 8005bac:	0020      	movs	r0, r4
 8005bae:	2207      	movs	r2, #7
 8005bb0:	300b      	adds	r0, #11
 8005bb2:	1d23      	adds	r3, r4, #4
 8005bb4:	4390      	bics	r0, r2
 8005bb6:	1ac2      	subs	r2, r0, r3
 8005bb8:	4298      	cmp	r0, r3
 8005bba:	d0e6      	beq.n	8005b8a <_malloc_r+0x5a>
 8005bbc:	1a1b      	subs	r3, r3, r0
 8005bbe:	50a3      	str	r3, [r4, r2]
 8005bc0:	e7e3      	b.n	8005b8a <_malloc_r+0x5a>
 8005bc2:	6053      	str	r3, [r2, #4]
 8005bc4:	e7ef      	b.n	8005ba6 <_malloc_r+0x76>
 8005bc6:	0022      	movs	r2, r4
 8005bc8:	6864      	ldr	r4, [r4, #4]
 8005bca:	e7c2      	b.n	8005b52 <_malloc_r+0x22>
 8005bcc:	2303      	movs	r3, #3
 8005bce:	1cc4      	adds	r4, r0, #3
 8005bd0:	439c      	bics	r4, r3
 8005bd2:	42a0      	cmp	r0, r4
 8005bd4:	d0e1      	beq.n	8005b9a <_malloc_r+0x6a>
 8005bd6:	1a21      	subs	r1, r4, r0
 8005bd8:	0030      	movs	r0, r6
 8005bda:	f000 fb35 	bl	8006248 <_sbrk_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d1db      	bne.n	8005b9a <_malloc_r+0x6a>
 8005be2:	e7c7      	b.n	8005b74 <_malloc_r+0x44>
 8005be4:	20000388 	.word	0x20000388
 8005be8:	2000038c 	.word	0x2000038c

08005bec <__sfputc_r>:
 8005bec:	6893      	ldr	r3, [r2, #8]
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	6093      	str	r3, [r2, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da04      	bge.n	8005c02 <__sfputc_r+0x16>
 8005bf8:	6994      	ldr	r4, [r2, #24]
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	db07      	blt.n	8005c0e <__sfputc_r+0x22>
 8005bfe:	290a      	cmp	r1, #10
 8005c00:	d005      	beq.n	8005c0e <__sfputc_r+0x22>
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	1c58      	adds	r0, r3, #1
 8005c06:	6010      	str	r0, [r2, #0]
 8005c08:	7019      	strb	r1, [r3, #0]
 8005c0a:	0008      	movs	r0, r1
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	f7ff fc39 	bl	8005484 <__swbuf_r>
 8005c12:	0001      	movs	r1, r0
 8005c14:	e7f9      	b.n	8005c0a <__sfputc_r+0x1e>

08005c16 <__sfputs_r>:
 8005c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c18:	0006      	movs	r6, r0
 8005c1a:	000f      	movs	r7, r1
 8005c1c:	0014      	movs	r4, r2
 8005c1e:	18d5      	adds	r5, r2, r3
 8005c20:	42ac      	cmp	r4, r5
 8005c22:	d101      	bne.n	8005c28 <__sfputs_r+0x12>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e007      	b.n	8005c38 <__sfputs_r+0x22>
 8005c28:	7821      	ldrb	r1, [r4, #0]
 8005c2a:	003a      	movs	r2, r7
 8005c2c:	0030      	movs	r0, r6
 8005c2e:	f7ff ffdd 	bl	8005bec <__sfputc_r>
 8005c32:	3401      	adds	r4, #1
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d1f3      	bne.n	8005c20 <__sfputs_r+0xa>
 8005c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c3c <_vfiprintf_r>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b0a1      	sub	sp, #132	; 0x84
 8005c40:	0006      	movs	r6, r0
 8005c42:	000c      	movs	r4, r1
 8005c44:	001f      	movs	r7, r3
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d004      	beq.n	8005c56 <_vfiprintf_r+0x1a>
 8005c4c:	6983      	ldr	r3, [r0, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <_vfiprintf_r+0x1a>
 8005c52:	f7ff fe13 	bl	800587c <__sinit>
 8005c56:	4b8e      	ldr	r3, [pc, #568]	; (8005e90 <_vfiprintf_r+0x254>)
 8005c58:	429c      	cmp	r4, r3
 8005c5a:	d11c      	bne.n	8005c96 <_vfiprintf_r+0x5a>
 8005c5c:	6874      	ldr	r4, [r6, #4]
 8005c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c60:	07db      	lsls	r3, r3, #31
 8005c62:	d405      	bmi.n	8005c70 <_vfiprintf_r+0x34>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	059b      	lsls	r3, r3, #22
 8005c68:	d402      	bmi.n	8005c70 <_vfiprintf_r+0x34>
 8005c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6c:	f7ff fea7 	bl	80059be <__retarget_lock_acquire_recursive>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	071b      	lsls	r3, r3, #28
 8005c74:	d502      	bpl.n	8005c7c <_vfiprintf_r+0x40>
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11d      	bne.n	8005cb8 <_vfiprintf_r+0x7c>
 8005c7c:	0021      	movs	r1, r4
 8005c7e:	0030      	movs	r0, r6
 8005c80:	f7ff fc56 	bl	8005530 <__swsetup_r>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d017      	beq.n	8005cb8 <_vfiprintf_r+0x7c>
 8005c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c8a:	07db      	lsls	r3, r3, #31
 8005c8c:	d50d      	bpl.n	8005caa <_vfiprintf_r+0x6e>
 8005c8e:	2001      	movs	r0, #1
 8005c90:	4240      	negs	r0, r0
 8005c92:	b021      	add	sp, #132	; 0x84
 8005c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c96:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <_vfiprintf_r+0x258>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d101      	bne.n	8005ca0 <_vfiprintf_r+0x64>
 8005c9c:	68b4      	ldr	r4, [r6, #8]
 8005c9e:	e7de      	b.n	8005c5e <_vfiprintf_r+0x22>
 8005ca0:	4b7d      	ldr	r3, [pc, #500]	; (8005e98 <_vfiprintf_r+0x25c>)
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	d1db      	bne.n	8005c5e <_vfiprintf_r+0x22>
 8005ca6:	68f4      	ldr	r4, [r6, #12]
 8005ca8:	e7d9      	b.n	8005c5e <_vfiprintf_r+0x22>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	059b      	lsls	r3, r3, #22
 8005cae:	d4ee      	bmi.n	8005c8e <_vfiprintf_r+0x52>
 8005cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb2:	f7ff fe85 	bl	80059c0 <__retarget_lock_release_recursive>
 8005cb6:	e7ea      	b.n	8005c8e <_vfiprintf_r+0x52>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	ad08      	add	r5, sp, #32
 8005cbc:	616b      	str	r3, [r5, #20]
 8005cbe:	3320      	adds	r3, #32
 8005cc0:	766b      	strb	r3, [r5, #25]
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	76ab      	strb	r3, [r5, #26]
 8005cc6:	9707      	str	r7, [sp, #28]
 8005cc8:	9f03      	ldr	r7, [sp, #12]
 8005cca:	783b      	ldrb	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <_vfiprintf_r+0x98>
 8005cd0:	2b25      	cmp	r3, #37	; 0x25
 8005cd2:	d14e      	bne.n	8005d72 <_vfiprintf_r+0x136>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	1afb      	subs	r3, r7, r3
 8005cd8:	9305      	str	r3, [sp, #20]
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	429f      	cmp	r7, r3
 8005cde:	d00d      	beq.n	8005cfc <_vfiprintf_r+0xc0>
 8005ce0:	9b05      	ldr	r3, [sp, #20]
 8005ce2:	0021      	movs	r1, r4
 8005ce4:	0030      	movs	r0, r6
 8005ce6:	9a03      	ldr	r2, [sp, #12]
 8005ce8:	f7ff ff95 	bl	8005c16 <__sfputs_r>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d100      	bne.n	8005cf2 <_vfiprintf_r+0xb6>
 8005cf0:	e0b5      	b.n	8005e5e <_vfiprintf_r+0x222>
 8005cf2:	696a      	ldr	r2, [r5, #20]
 8005cf4:	9b05      	ldr	r3, [sp, #20]
 8005cf6:	4694      	mov	ip, r2
 8005cf8:	4463      	add	r3, ip
 8005cfa:	616b      	str	r3, [r5, #20]
 8005cfc:	783b      	ldrb	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d100      	bne.n	8005d04 <_vfiprintf_r+0xc8>
 8005d02:	e0ac      	b.n	8005e5e <_vfiprintf_r+0x222>
 8005d04:	2201      	movs	r2, #1
 8005d06:	1c7b      	adds	r3, r7, #1
 8005d08:	9303      	str	r3, [sp, #12]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4252      	negs	r2, r2
 8005d0e:	606a      	str	r2, [r5, #4]
 8005d10:	a904      	add	r1, sp, #16
 8005d12:	3254      	adds	r2, #84	; 0x54
 8005d14:	1852      	adds	r2, r2, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	60eb      	str	r3, [r5, #12]
 8005d1a:	60ab      	str	r3, [r5, #8]
 8005d1c:	7013      	strb	r3, [r2, #0]
 8005d1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	2205      	movs	r2, #5
 8005d24:	7819      	ldrb	r1, [r3, #0]
 8005d26:	485d      	ldr	r0, [pc, #372]	; (8005e9c <_vfiprintf_r+0x260>)
 8005d28:	f000 fb4a 	bl	80063c0 <memchr>
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	1c5f      	adds	r7, r3, #1
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d120      	bne.n	8005d76 <_vfiprintf_r+0x13a>
 8005d34:	682a      	ldr	r2, [r5, #0]
 8005d36:	06d3      	lsls	r3, r2, #27
 8005d38:	d504      	bpl.n	8005d44 <_vfiprintf_r+0x108>
 8005d3a:	2353      	movs	r3, #83	; 0x53
 8005d3c:	a904      	add	r1, sp, #16
 8005d3e:	185b      	adds	r3, r3, r1
 8005d40:	2120      	movs	r1, #32
 8005d42:	7019      	strb	r1, [r3, #0]
 8005d44:	0713      	lsls	r3, r2, #28
 8005d46:	d504      	bpl.n	8005d52 <_vfiprintf_r+0x116>
 8005d48:	2353      	movs	r3, #83	; 0x53
 8005d4a:	a904      	add	r1, sp, #16
 8005d4c:	185b      	adds	r3, r3, r1
 8005d4e:	212b      	movs	r1, #43	; 0x2b
 8005d50:	7019      	strb	r1, [r3, #0]
 8005d52:	9b03      	ldr	r3, [sp, #12]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b2a      	cmp	r3, #42	; 0x2a
 8005d58:	d016      	beq.n	8005d88 <_vfiprintf_r+0x14c>
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	68eb      	ldr	r3, [r5, #12]
 8005d5e:	9f03      	ldr	r7, [sp, #12]
 8005d60:	783a      	ldrb	r2, [r7, #0]
 8005d62:	1c78      	adds	r0, r7, #1
 8005d64:	3a30      	subs	r2, #48	; 0x30
 8005d66:	4684      	mov	ip, r0
 8005d68:	2a09      	cmp	r2, #9
 8005d6a:	d94f      	bls.n	8005e0c <_vfiprintf_r+0x1d0>
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	d111      	bne.n	8005d94 <_vfiprintf_r+0x158>
 8005d70:	e017      	b.n	8005da2 <_vfiprintf_r+0x166>
 8005d72:	3701      	adds	r7, #1
 8005d74:	e7a9      	b.n	8005cca <_vfiprintf_r+0x8e>
 8005d76:	4b49      	ldr	r3, [pc, #292]	; (8005e9c <_vfiprintf_r+0x260>)
 8005d78:	682a      	ldr	r2, [r5, #0]
 8005d7a:	1ac0      	subs	r0, r0, r3
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4083      	lsls	r3, r0
 8005d80:	4313      	orrs	r3, r2
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	9703      	str	r7, [sp, #12]
 8005d86:	e7cb      	b.n	8005d20 <_vfiprintf_r+0xe4>
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	1d19      	adds	r1, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	9107      	str	r1, [sp, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db01      	blt.n	8005d98 <_vfiprintf_r+0x15c>
 8005d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d96:	e004      	b.n	8005da2 <_vfiprintf_r+0x166>
 8005d98:	425b      	negs	r3, r3
 8005d9a:	60eb      	str	r3, [r5, #12]
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	783b      	ldrb	r3, [r7, #0]
 8005da4:	2b2e      	cmp	r3, #46	; 0x2e
 8005da6:	d10a      	bne.n	8005dbe <_vfiprintf_r+0x182>
 8005da8:	787b      	ldrb	r3, [r7, #1]
 8005daa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dac:	d137      	bne.n	8005e1e <_vfiprintf_r+0x1e2>
 8005dae:	9b07      	ldr	r3, [sp, #28]
 8005db0:	3702      	adds	r7, #2
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	9207      	str	r2, [sp, #28]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	db2d      	blt.n	8005e18 <_vfiprintf_r+0x1dc>
 8005dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	7839      	ldrb	r1, [r7, #0]
 8005dc2:	4837      	ldr	r0, [pc, #220]	; (8005ea0 <_vfiprintf_r+0x264>)
 8005dc4:	f000 fafc 	bl	80063c0 <memchr>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d007      	beq.n	8005ddc <_vfiprintf_r+0x1a0>
 8005dcc:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <_vfiprintf_r+0x264>)
 8005dce:	682a      	ldr	r2, [r5, #0]
 8005dd0:	1ac0      	subs	r0, r0, r3
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	4083      	lsls	r3, r0
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	3701      	adds	r7, #1
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	7839      	ldrb	r1, [r7, #0]
 8005dde:	1c7b      	adds	r3, r7, #1
 8005de0:	2206      	movs	r2, #6
 8005de2:	4830      	ldr	r0, [pc, #192]	; (8005ea4 <_vfiprintf_r+0x268>)
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	7629      	strb	r1, [r5, #24]
 8005de8:	f000 faea 	bl	80063c0 <memchr>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d045      	beq.n	8005e7c <_vfiprintf_r+0x240>
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <_vfiprintf_r+0x26c>)
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d127      	bne.n	8005e46 <_vfiprintf_r+0x20a>
 8005df6:	2207      	movs	r2, #7
 8005df8:	9b07      	ldr	r3, [sp, #28]
 8005dfa:	3307      	adds	r3, #7
 8005dfc:	4393      	bics	r3, r2
 8005dfe:	3308      	adds	r3, #8
 8005e00:	9307      	str	r3, [sp, #28]
 8005e02:	696b      	ldr	r3, [r5, #20]
 8005e04:	9a04      	ldr	r2, [sp, #16]
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	616b      	str	r3, [r5, #20]
 8005e0a:	e75d      	b.n	8005cc8 <_vfiprintf_r+0x8c>
 8005e0c:	210a      	movs	r1, #10
 8005e0e:	434b      	muls	r3, r1
 8005e10:	4667      	mov	r7, ip
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	3909      	subs	r1, #9
 8005e16:	e7a3      	b.n	8005d60 <_vfiprintf_r+0x124>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	e7ce      	b.n	8005dbc <_vfiprintf_r+0x180>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	001a      	movs	r2, r3
 8005e22:	3701      	adds	r7, #1
 8005e24:	606b      	str	r3, [r5, #4]
 8005e26:	7839      	ldrb	r1, [r7, #0]
 8005e28:	1c78      	adds	r0, r7, #1
 8005e2a:	3930      	subs	r1, #48	; 0x30
 8005e2c:	4684      	mov	ip, r0
 8005e2e:	2909      	cmp	r1, #9
 8005e30:	d903      	bls.n	8005e3a <_vfiprintf_r+0x1fe>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0c3      	beq.n	8005dbe <_vfiprintf_r+0x182>
 8005e36:	9209      	str	r2, [sp, #36]	; 0x24
 8005e38:	e7c1      	b.n	8005dbe <_vfiprintf_r+0x182>
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	435a      	muls	r2, r3
 8005e3e:	4667      	mov	r7, ip
 8005e40:	1852      	adds	r2, r2, r1
 8005e42:	3b09      	subs	r3, #9
 8005e44:	e7ef      	b.n	8005e26 <_vfiprintf_r+0x1ea>
 8005e46:	ab07      	add	r3, sp, #28
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	0022      	movs	r2, r4
 8005e4c:	0029      	movs	r1, r5
 8005e4e:	0030      	movs	r0, r6
 8005e50:	4b16      	ldr	r3, [pc, #88]	; (8005eac <_vfiprintf_r+0x270>)
 8005e52:	e000      	b.n	8005e56 <_vfiprintf_r+0x21a>
 8005e54:	bf00      	nop
 8005e56:	9004      	str	r0, [sp, #16]
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	d1d1      	bne.n	8005e02 <_vfiprintf_r+0x1c6>
 8005e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e60:	07db      	lsls	r3, r3, #31
 8005e62:	d405      	bmi.n	8005e70 <_vfiprintf_r+0x234>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	059b      	lsls	r3, r3, #22
 8005e68:	d402      	bmi.n	8005e70 <_vfiprintf_r+0x234>
 8005e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6c:	f7ff fda8 	bl	80059c0 <__retarget_lock_release_recursive>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	065b      	lsls	r3, r3, #25
 8005e74:	d500      	bpl.n	8005e78 <_vfiprintf_r+0x23c>
 8005e76:	e70a      	b.n	8005c8e <_vfiprintf_r+0x52>
 8005e78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e7a:	e70a      	b.n	8005c92 <_vfiprintf_r+0x56>
 8005e7c:	ab07      	add	r3, sp, #28
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	0022      	movs	r2, r4
 8005e82:	0029      	movs	r1, r5
 8005e84:	0030      	movs	r0, r6
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <_vfiprintf_r+0x270>)
 8005e88:	f000 f882 	bl	8005f90 <_printf_i>
 8005e8c:	e7e3      	b.n	8005e56 <_vfiprintf_r+0x21a>
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	08006c68 	.word	0x08006c68
 8005e94:	08006c88 	.word	0x08006c88
 8005e98:	08006c48 	.word	0x08006c48
 8005e9c:	08006ca8 	.word	0x08006ca8
 8005ea0:	08006cae 	.word	0x08006cae
 8005ea4:	08006cb2 	.word	0x08006cb2
 8005ea8:	00000000 	.word	0x00000000
 8005eac:	08005c17 	.word	0x08005c17

08005eb0 <_printf_common>:
 8005eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb2:	0015      	movs	r5, r2
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	688a      	ldr	r2, [r1, #8]
 8005eb8:	690b      	ldr	r3, [r1, #16]
 8005eba:	000c      	movs	r4, r1
 8005ebc:	9000      	str	r0, [sp, #0]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	da00      	bge.n	8005ec4 <_printf_common+0x14>
 8005ec2:	0013      	movs	r3, r2
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	3243      	adds	r2, #67	; 0x43
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	d001      	beq.n	8005ed4 <_printf_common+0x24>
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	069b      	lsls	r3, r3, #26
 8005ed8:	d502      	bpl.n	8005ee0 <_printf_common+0x30>
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	3302      	adds	r3, #2
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	6822      	ldr	r2, [r4, #0]
 8005ee2:	2306      	movs	r3, #6
 8005ee4:	0017      	movs	r7, r2
 8005ee6:	401f      	ands	r7, r3
 8005ee8:	421a      	tst	r2, r3
 8005eea:	d027      	beq.n	8005f3c <_printf_common+0x8c>
 8005eec:	0023      	movs	r3, r4
 8005eee:	3343      	adds	r3, #67	; 0x43
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	1e5a      	subs	r2, r3, #1
 8005ef4:	4193      	sbcs	r3, r2
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	0692      	lsls	r2, r2, #26
 8005efa:	d430      	bmi.n	8005f5e <_printf_common+0xae>
 8005efc:	0022      	movs	r2, r4
 8005efe:	9901      	ldr	r1, [sp, #4]
 8005f00:	9800      	ldr	r0, [sp, #0]
 8005f02:	9e08      	ldr	r6, [sp, #32]
 8005f04:	3243      	adds	r2, #67	; 0x43
 8005f06:	47b0      	blx	r6
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d025      	beq.n	8005f58 <_printf_common+0xa8>
 8005f0c:	2306      	movs	r3, #6
 8005f0e:	6820      	ldr	r0, [r4, #0]
 8005f10:	682a      	ldr	r2, [r5, #0]
 8005f12:	68e1      	ldr	r1, [r4, #12]
 8005f14:	2500      	movs	r5, #0
 8005f16:	4003      	ands	r3, r0
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0x74>
 8005f1c:	1a8d      	subs	r5, r1, r2
 8005f1e:	43eb      	mvns	r3, r5
 8005f20:	17db      	asrs	r3, r3, #31
 8005f22:	401d      	ands	r5, r3
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	6922      	ldr	r2, [r4, #16]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	dd01      	ble.n	8005f30 <_printf_common+0x80>
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	18ed      	adds	r5, r5, r3
 8005f30:	2700      	movs	r7, #0
 8005f32:	42bd      	cmp	r5, r7
 8005f34:	d120      	bne.n	8005f78 <_printf_common+0xc8>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e010      	b.n	8005f5c <_printf_common+0xac>
 8005f3a:	3701      	adds	r7, #1
 8005f3c:	68e3      	ldr	r3, [r4, #12]
 8005f3e:	682a      	ldr	r2, [r5, #0]
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	42bb      	cmp	r3, r7
 8005f44:	ddd2      	ble.n	8005eec <_printf_common+0x3c>
 8005f46:	0022      	movs	r2, r4
 8005f48:	2301      	movs	r3, #1
 8005f4a:	9901      	ldr	r1, [sp, #4]
 8005f4c:	9800      	ldr	r0, [sp, #0]
 8005f4e:	9e08      	ldr	r6, [sp, #32]
 8005f50:	3219      	adds	r2, #25
 8005f52:	47b0      	blx	r6
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d1f0      	bne.n	8005f3a <_printf_common+0x8a>
 8005f58:	2001      	movs	r0, #1
 8005f5a:	4240      	negs	r0, r0
 8005f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f5e:	2030      	movs	r0, #48	; 0x30
 8005f60:	18e1      	adds	r1, r4, r3
 8005f62:	3143      	adds	r1, #67	; 0x43
 8005f64:	7008      	strb	r0, [r1, #0]
 8005f66:	0021      	movs	r1, r4
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	3145      	adds	r1, #69	; 0x45
 8005f6c:	7809      	ldrb	r1, [r1, #0]
 8005f6e:	18a2      	adds	r2, r4, r2
 8005f70:	3243      	adds	r2, #67	; 0x43
 8005f72:	3302      	adds	r3, #2
 8005f74:	7011      	strb	r1, [r2, #0]
 8005f76:	e7c1      	b.n	8005efc <_printf_common+0x4c>
 8005f78:	0022      	movs	r2, r4
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	9901      	ldr	r1, [sp, #4]
 8005f7e:	9800      	ldr	r0, [sp, #0]
 8005f80:	9e08      	ldr	r6, [sp, #32]
 8005f82:	321a      	adds	r2, #26
 8005f84:	47b0      	blx	r6
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d0e6      	beq.n	8005f58 <_printf_common+0xa8>
 8005f8a:	3701      	adds	r7, #1
 8005f8c:	e7d1      	b.n	8005f32 <_printf_common+0x82>
	...

08005f90 <_printf_i>:
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	b08b      	sub	sp, #44	; 0x2c
 8005f94:	9206      	str	r2, [sp, #24]
 8005f96:	000a      	movs	r2, r1
 8005f98:	3243      	adds	r2, #67	; 0x43
 8005f9a:	9307      	str	r3, [sp, #28]
 8005f9c:	9005      	str	r0, [sp, #20]
 8005f9e:	9204      	str	r2, [sp, #16]
 8005fa0:	7e0a      	ldrb	r2, [r1, #24]
 8005fa2:	000c      	movs	r4, r1
 8005fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fa6:	2a78      	cmp	r2, #120	; 0x78
 8005fa8:	d806      	bhi.n	8005fb8 <_printf_i+0x28>
 8005faa:	2a62      	cmp	r2, #98	; 0x62
 8005fac:	d808      	bhi.n	8005fc0 <_printf_i+0x30>
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	d100      	bne.n	8005fb4 <_printf_i+0x24>
 8005fb2:	e0c0      	b.n	8006136 <_printf_i+0x1a6>
 8005fb4:	2a58      	cmp	r2, #88	; 0x58
 8005fb6:	d052      	beq.n	800605e <_printf_i+0xce>
 8005fb8:	0026      	movs	r6, r4
 8005fba:	3642      	adds	r6, #66	; 0x42
 8005fbc:	7032      	strb	r2, [r6, #0]
 8005fbe:	e022      	b.n	8006006 <_printf_i+0x76>
 8005fc0:	0010      	movs	r0, r2
 8005fc2:	3863      	subs	r0, #99	; 0x63
 8005fc4:	2815      	cmp	r0, #21
 8005fc6:	d8f7      	bhi.n	8005fb8 <_printf_i+0x28>
 8005fc8:	f7fa fe8e 	bl	8000ce8 <__gnu_thumb1_case_shi>
 8005fcc:	001f0016 	.word	0x001f0016
 8005fd0:	fff6fff6 	.word	0xfff6fff6
 8005fd4:	fff6fff6 	.word	0xfff6fff6
 8005fd8:	fff6001f 	.word	0xfff6001f
 8005fdc:	fff6fff6 	.word	0xfff6fff6
 8005fe0:	00a8fff6 	.word	0x00a8fff6
 8005fe4:	009a0036 	.word	0x009a0036
 8005fe8:	fff6fff6 	.word	0xfff6fff6
 8005fec:	fff600b9 	.word	0xfff600b9
 8005ff0:	fff60036 	.word	0xfff60036
 8005ff4:	009efff6 	.word	0x009efff6
 8005ff8:	0026      	movs	r6, r4
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	3642      	adds	r6, #66	; 0x42
 8005ffe:	1d11      	adds	r1, r2, #4
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	6813      	ldr	r3, [r2, #0]
 8006004:	7033      	strb	r3, [r6, #0]
 8006006:	2301      	movs	r3, #1
 8006008:	e0a7      	b.n	800615a <_printf_i+0x1ca>
 800600a:	6808      	ldr	r0, [r1, #0]
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	1d0a      	adds	r2, r1, #4
 8006010:	0605      	lsls	r5, r0, #24
 8006012:	d50b      	bpl.n	800602c <_printf_i+0x9c>
 8006014:	680d      	ldr	r5, [r1, #0]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	2d00      	cmp	r5, #0
 800601a:	da03      	bge.n	8006024 <_printf_i+0x94>
 800601c:	232d      	movs	r3, #45	; 0x2d
 800601e:	9a04      	ldr	r2, [sp, #16]
 8006020:	426d      	negs	r5, r5
 8006022:	7013      	strb	r3, [r2, #0]
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <_printf_i+0x21c>)
 8006026:	270a      	movs	r7, #10
 8006028:	9303      	str	r3, [sp, #12]
 800602a:	e032      	b.n	8006092 <_printf_i+0x102>
 800602c:	680d      	ldr	r5, [r1, #0]
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	0641      	lsls	r1, r0, #25
 8006032:	d5f1      	bpl.n	8006018 <_printf_i+0x88>
 8006034:	b22d      	sxth	r5, r5
 8006036:	e7ef      	b.n	8006018 <_printf_i+0x88>
 8006038:	680d      	ldr	r5, [r1, #0]
 800603a:	6819      	ldr	r1, [r3, #0]
 800603c:	1d08      	adds	r0, r1, #4
 800603e:	6018      	str	r0, [r3, #0]
 8006040:	062e      	lsls	r6, r5, #24
 8006042:	d501      	bpl.n	8006048 <_printf_i+0xb8>
 8006044:	680d      	ldr	r5, [r1, #0]
 8006046:	e003      	b.n	8006050 <_printf_i+0xc0>
 8006048:	066d      	lsls	r5, r5, #25
 800604a:	d5fb      	bpl.n	8006044 <_printf_i+0xb4>
 800604c:	680d      	ldr	r5, [r1, #0]
 800604e:	b2ad      	uxth	r5, r5
 8006050:	4b56      	ldr	r3, [pc, #344]	; (80061ac <_printf_i+0x21c>)
 8006052:	270a      	movs	r7, #10
 8006054:	9303      	str	r3, [sp, #12]
 8006056:	2a6f      	cmp	r2, #111	; 0x6f
 8006058:	d117      	bne.n	800608a <_printf_i+0xfa>
 800605a:	2708      	movs	r7, #8
 800605c:	e015      	b.n	800608a <_printf_i+0xfa>
 800605e:	3145      	adds	r1, #69	; 0x45
 8006060:	700a      	strb	r2, [r1, #0]
 8006062:	4a52      	ldr	r2, [pc, #328]	; (80061ac <_printf_i+0x21c>)
 8006064:	9203      	str	r2, [sp, #12]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	6821      	ldr	r1, [r4, #0]
 800606a:	ca20      	ldmia	r2!, {r5}
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	0608      	lsls	r0, r1, #24
 8006070:	d550      	bpl.n	8006114 <_printf_i+0x184>
 8006072:	07cb      	lsls	r3, r1, #31
 8006074:	d502      	bpl.n	800607c <_printf_i+0xec>
 8006076:	2320      	movs	r3, #32
 8006078:	4319      	orrs	r1, r3
 800607a:	6021      	str	r1, [r4, #0]
 800607c:	2710      	movs	r7, #16
 800607e:	2d00      	cmp	r5, #0
 8006080:	d103      	bne.n	800608a <_printf_i+0xfa>
 8006082:	2320      	movs	r3, #32
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	439a      	bics	r2, r3
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	0023      	movs	r3, r4
 800608c:	2200      	movs	r2, #0
 800608e:	3343      	adds	r3, #67	; 0x43
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	6863      	ldr	r3, [r4, #4]
 8006094:	60a3      	str	r3, [r4, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	db03      	blt.n	80060a2 <_printf_i+0x112>
 800609a:	2204      	movs	r2, #4
 800609c:	6821      	ldr	r1, [r4, #0]
 800609e:	4391      	bics	r1, r2
 80060a0:	6021      	str	r1, [r4, #0]
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	d102      	bne.n	80060ac <_printf_i+0x11c>
 80060a6:	9e04      	ldr	r6, [sp, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <_printf_i+0x136>
 80060ac:	9e04      	ldr	r6, [sp, #16]
 80060ae:	0028      	movs	r0, r5
 80060b0:	0039      	movs	r1, r7
 80060b2:	f7fa fea9 	bl	8000e08 <__aeabi_uidivmod>
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	3e01      	subs	r6, #1
 80060ba:	5c5b      	ldrb	r3, [r3, r1]
 80060bc:	7033      	strb	r3, [r6, #0]
 80060be:	002b      	movs	r3, r5
 80060c0:	0005      	movs	r5, r0
 80060c2:	429f      	cmp	r7, r3
 80060c4:	d9f3      	bls.n	80060ae <_printf_i+0x11e>
 80060c6:	2f08      	cmp	r7, #8
 80060c8:	d109      	bne.n	80060de <_printf_i+0x14e>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	07db      	lsls	r3, r3, #31
 80060ce:	d506      	bpl.n	80060de <_printf_i+0x14e>
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	6922      	ldr	r2, [r4, #16]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	dc02      	bgt.n	80060de <_printf_i+0x14e>
 80060d8:	2330      	movs	r3, #48	; 0x30
 80060da:	3e01      	subs	r6, #1
 80060dc:	7033      	strb	r3, [r6, #0]
 80060de:	9b04      	ldr	r3, [sp, #16]
 80060e0:	1b9b      	subs	r3, r3, r6
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	9b07      	ldr	r3, [sp, #28]
 80060e6:	0021      	movs	r1, r4
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	9805      	ldr	r0, [sp, #20]
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	aa09      	add	r2, sp, #36	; 0x24
 80060f0:	f7ff fede 	bl	8005eb0 <_printf_common>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d135      	bne.n	8006164 <_printf_i+0x1d4>
 80060f8:	2001      	movs	r0, #1
 80060fa:	4240      	negs	r0, r0
 80060fc:	b00b      	add	sp, #44	; 0x2c
 80060fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006100:	2220      	movs	r2, #32
 8006102:	6809      	ldr	r1, [r1, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	6022      	str	r2, [r4, #0]
 8006108:	0022      	movs	r2, r4
 800610a:	2178      	movs	r1, #120	; 0x78
 800610c:	3245      	adds	r2, #69	; 0x45
 800610e:	7011      	strb	r1, [r2, #0]
 8006110:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <_printf_i+0x220>)
 8006112:	e7a7      	b.n	8006064 <_printf_i+0xd4>
 8006114:	0648      	lsls	r0, r1, #25
 8006116:	d5ac      	bpl.n	8006072 <_printf_i+0xe2>
 8006118:	b2ad      	uxth	r5, r5
 800611a:	e7aa      	b.n	8006072 <_printf_i+0xe2>
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	680d      	ldr	r5, [r1, #0]
 8006120:	1d10      	adds	r0, r2, #4
 8006122:	6949      	ldr	r1, [r1, #20]
 8006124:	6018      	str	r0, [r3, #0]
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	062e      	lsls	r6, r5, #24
 800612a:	d501      	bpl.n	8006130 <_printf_i+0x1a0>
 800612c:	6019      	str	r1, [r3, #0]
 800612e:	e002      	b.n	8006136 <_printf_i+0x1a6>
 8006130:	066d      	lsls	r5, r5, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0x19c>
 8006134:	8019      	strh	r1, [r3, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	9e04      	ldr	r6, [sp, #16]
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	e7d2      	b.n	80060e4 <_printf_i+0x154>
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	1d11      	adds	r1, r2, #4
 8006142:	6019      	str	r1, [r3, #0]
 8006144:	6816      	ldr	r6, [r2, #0]
 8006146:	2100      	movs	r1, #0
 8006148:	0030      	movs	r0, r6
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	f000 f938 	bl	80063c0 <memchr>
 8006150:	2800      	cmp	r0, #0
 8006152:	d001      	beq.n	8006158 <_printf_i+0x1c8>
 8006154:	1b80      	subs	r0, r0, r6
 8006156:	6060      	str	r0, [r4, #4]
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	2300      	movs	r3, #0
 800615e:	9a04      	ldr	r2, [sp, #16]
 8006160:	7013      	strb	r3, [r2, #0]
 8006162:	e7bf      	b.n	80060e4 <_printf_i+0x154>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	0032      	movs	r2, r6
 8006168:	9906      	ldr	r1, [sp, #24]
 800616a:	9805      	ldr	r0, [sp, #20]
 800616c:	9d07      	ldr	r5, [sp, #28]
 800616e:	47a8      	blx	r5
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d0c1      	beq.n	80060f8 <_printf_i+0x168>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	079b      	lsls	r3, r3, #30
 8006178:	d415      	bmi.n	80061a6 <_printf_i+0x216>
 800617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617c:	68e0      	ldr	r0, [r4, #12]
 800617e:	4298      	cmp	r0, r3
 8006180:	dabc      	bge.n	80060fc <_printf_i+0x16c>
 8006182:	0018      	movs	r0, r3
 8006184:	e7ba      	b.n	80060fc <_printf_i+0x16c>
 8006186:	0022      	movs	r2, r4
 8006188:	2301      	movs	r3, #1
 800618a:	9906      	ldr	r1, [sp, #24]
 800618c:	9805      	ldr	r0, [sp, #20]
 800618e:	9e07      	ldr	r6, [sp, #28]
 8006190:	3219      	adds	r2, #25
 8006192:	47b0      	blx	r6
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d0af      	beq.n	80060f8 <_printf_i+0x168>
 8006198:	3501      	adds	r5, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dcf0      	bgt.n	8006186 <_printf_i+0x1f6>
 80061a4:	e7e9      	b.n	800617a <_printf_i+0x1ea>
 80061a6:	2500      	movs	r5, #0
 80061a8:	e7f7      	b.n	800619a <_printf_i+0x20a>
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	08006cb9 	.word	0x08006cb9
 80061b0:	08006cca 	.word	0x08006cca

080061b4 <_putc_r>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	0006      	movs	r6, r0
 80061b8:	000d      	movs	r5, r1
 80061ba:	0014      	movs	r4, r2
 80061bc:	2800      	cmp	r0, #0
 80061be:	d004      	beq.n	80061ca <_putc_r+0x16>
 80061c0:	6983      	ldr	r3, [r0, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <_putc_r+0x16>
 80061c6:	f7ff fb59 	bl	800587c <__sinit>
 80061ca:	4b1c      	ldr	r3, [pc, #112]	; (800623c <_putc_r+0x88>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d124      	bne.n	800621a <_putc_r+0x66>
 80061d0:	6874      	ldr	r4, [r6, #4]
 80061d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	d405      	bmi.n	80061e4 <_putc_r+0x30>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	059b      	lsls	r3, r3, #22
 80061dc:	d402      	bmi.n	80061e4 <_putc_r+0x30>
 80061de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e0:	f7ff fbed 	bl	80059be <__retarget_lock_acquire_recursive>
 80061e4:	68a3      	ldr	r3, [r4, #8]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	60a3      	str	r3, [r4, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da05      	bge.n	80061fa <_putc_r+0x46>
 80061ee:	69a2      	ldr	r2, [r4, #24]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	db1c      	blt.n	800622e <_putc_r+0x7a>
 80061f4:	b2eb      	uxtb	r3, r5
 80061f6:	2b0a      	cmp	r3, #10
 80061f8:	d019      	beq.n	800622e <_putc_r+0x7a>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	6022      	str	r2, [r4, #0]
 8006200:	701d      	strb	r5, [r3, #0]
 8006202:	b2ed      	uxtb	r5, r5
 8006204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006206:	07db      	lsls	r3, r3, #31
 8006208:	d405      	bmi.n	8006216 <_putc_r+0x62>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	059b      	lsls	r3, r3, #22
 800620e:	d402      	bmi.n	8006216 <_putc_r+0x62>
 8006210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006212:	f7ff fbd5 	bl	80059c0 <__retarget_lock_release_recursive>
 8006216:	0028      	movs	r0, r5
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <_putc_r+0x8c>)
 800621c:	429c      	cmp	r4, r3
 800621e:	d101      	bne.n	8006224 <_putc_r+0x70>
 8006220:	68b4      	ldr	r4, [r6, #8]
 8006222:	e7d6      	b.n	80061d2 <_putc_r+0x1e>
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <_putc_r+0x90>)
 8006226:	429c      	cmp	r4, r3
 8006228:	d1d3      	bne.n	80061d2 <_putc_r+0x1e>
 800622a:	68f4      	ldr	r4, [r6, #12]
 800622c:	e7d1      	b.n	80061d2 <_putc_r+0x1e>
 800622e:	0029      	movs	r1, r5
 8006230:	0022      	movs	r2, r4
 8006232:	0030      	movs	r0, r6
 8006234:	f7ff f926 	bl	8005484 <__swbuf_r>
 8006238:	0005      	movs	r5, r0
 800623a:	e7e3      	b.n	8006204 <_putc_r+0x50>
 800623c:	08006c68 	.word	0x08006c68
 8006240:	08006c88 	.word	0x08006c88
 8006244:	08006c48 	.word	0x08006c48

08006248 <_sbrk_r>:
 8006248:	2300      	movs	r3, #0
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	4d06      	ldr	r5, [pc, #24]	; (8006268 <_sbrk_r+0x20>)
 800624e:	0004      	movs	r4, r0
 8006250:	0008      	movs	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fc f830 	bl	80022b8 <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d103      	bne.n	8006264 <_sbrk_r+0x1c>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d000      	beq.n	8006264 <_sbrk_r+0x1c>
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	200006f8 	.word	0x200006f8

0800626c <__sread>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	000c      	movs	r4, r1
 8006270:	250e      	movs	r5, #14
 8006272:	5f49      	ldrsh	r1, [r1, r5]
 8006274:	f000 f8c0 	bl	80063f8 <_read_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	db03      	blt.n	8006284 <__sread+0x18>
 800627c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800627e:	181b      	adds	r3, r3, r0
 8006280:	6563      	str	r3, [r4, #84]	; 0x54
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	4a02      	ldr	r2, [pc, #8]	; (8006290 <__sread+0x24>)
 8006288:	4013      	ands	r3, r2
 800628a:	81a3      	strh	r3, [r4, #12]
 800628c:	e7f9      	b.n	8006282 <__sread+0x16>
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	ffffefff 	.word	0xffffefff

08006294 <__swrite>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	001f      	movs	r7, r3
 8006298:	898b      	ldrh	r3, [r1, #12]
 800629a:	0005      	movs	r5, r0
 800629c:	000c      	movs	r4, r1
 800629e:	0016      	movs	r6, r2
 80062a0:	05db      	lsls	r3, r3, #23
 80062a2:	d505      	bpl.n	80062b0 <__swrite+0x1c>
 80062a4:	230e      	movs	r3, #14
 80062a6:	5ec9      	ldrsh	r1, [r1, r3]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2302      	movs	r3, #2
 80062ac:	f000 f874 	bl	8006398 <_lseek_r>
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <__swrite+0x34>)
 80062b4:	0028      	movs	r0, r5
 80062b6:	4013      	ands	r3, r2
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	0032      	movs	r2, r6
 80062bc:	230e      	movs	r3, #14
 80062be:	5ee1      	ldrsh	r1, [r4, r3]
 80062c0:	003b      	movs	r3, r7
 80062c2:	f000 f81f 	bl	8006304 <_write_r>
 80062c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c8:	ffffefff 	.word	0xffffefff

080062cc <__sseek>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	000c      	movs	r4, r1
 80062d0:	250e      	movs	r5, #14
 80062d2:	5f49      	ldrsh	r1, [r1, r5]
 80062d4:	f000 f860 	bl	8006398 <_lseek_r>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	1c42      	adds	r2, r0, #1
 80062dc:	d103      	bne.n	80062e6 <__sseek+0x1a>
 80062de:	4a05      	ldr	r2, [pc, #20]	; (80062f4 <__sseek+0x28>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	2280      	movs	r2, #128	; 0x80
 80062e8:	0152      	lsls	r2, r2, #5
 80062ea:	4313      	orrs	r3, r2
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	6560      	str	r0, [r4, #84]	; 0x54
 80062f0:	e7f8      	b.n	80062e4 <__sseek+0x18>
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	ffffefff 	.word	0xffffefff

080062f8 <__sclose>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	230e      	movs	r3, #14
 80062fc:	5ec9      	ldrsh	r1, [r1, r3]
 80062fe:	f000 f815 	bl	800632c <_close_r>
 8006302:	bd10      	pop	{r4, pc}

08006304 <_write_r>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	0004      	movs	r4, r0
 8006308:	0008      	movs	r0, r1
 800630a:	0011      	movs	r1, r2
 800630c:	001a      	movs	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	4d05      	ldr	r5, [pc, #20]	; (8006328 <_write_r+0x24>)
 8006312:	602b      	str	r3, [r5, #0]
 8006314:	f7fb ffb7 	bl	8002286 <_write>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d103      	bne.n	8006324 <_write_r+0x20>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d000      	beq.n	8006324 <_write_r+0x20>
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	200006f8 	.word	0x200006f8

0800632c <_close_r>:
 800632c:	2300      	movs	r3, #0
 800632e:	b570      	push	{r4, r5, r6, lr}
 8006330:	4d06      	ldr	r5, [pc, #24]	; (800634c <_close_r+0x20>)
 8006332:	0004      	movs	r4, r0
 8006334:	0008      	movs	r0, r1
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	f7fb ffb2 	bl	80022a0 <_close>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d103      	bne.n	8006348 <_close_r+0x1c>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d000      	beq.n	8006348 <_close_r+0x1c>
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	200006f8 	.word	0x200006f8

08006350 <_fstat_r>:
 8006350:	2300      	movs	r3, #0
 8006352:	b570      	push	{r4, r5, r6, lr}
 8006354:	4d06      	ldr	r5, [pc, #24]	; (8006370 <_fstat_r+0x20>)
 8006356:	0004      	movs	r4, r0
 8006358:	0008      	movs	r0, r1
 800635a:	0011      	movs	r1, r2
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	f7fb ffa2 	bl	80022a6 <_fstat>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	d103      	bne.n	800636e <_fstat_r+0x1e>
 8006366:	682b      	ldr	r3, [r5, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d000      	beq.n	800636e <_fstat_r+0x1e>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	200006f8 	.word	0x200006f8

08006374 <_isatty_r>:
 8006374:	2300      	movs	r3, #0
 8006376:	b570      	push	{r4, r5, r6, lr}
 8006378:	4d06      	ldr	r5, [pc, #24]	; (8006394 <_isatty_r+0x20>)
 800637a:	0004      	movs	r4, r0
 800637c:	0008      	movs	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fb ff96 	bl	80022b0 <_isatty>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d103      	bne.n	8006390 <_isatty_r+0x1c>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d000      	beq.n	8006390 <_isatty_r+0x1c>
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	bd70      	pop	{r4, r5, r6, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	200006f8 	.word	0x200006f8

08006398 <_lseek_r>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	0004      	movs	r4, r0
 800639c:	0008      	movs	r0, r1
 800639e:	0011      	movs	r1, r2
 80063a0:	001a      	movs	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	4d05      	ldr	r5, [pc, #20]	; (80063bc <_lseek_r+0x24>)
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb ff84 	bl	80022b4 <_lseek>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d103      	bne.n	80063b8 <_lseek_r+0x20>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d000      	beq.n	80063b8 <_lseek_r+0x20>
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	200006f8 	.word	0x200006f8

080063c0 <memchr>:
 80063c0:	b2c9      	uxtb	r1, r1
 80063c2:	1882      	adds	r2, r0, r2
 80063c4:	4290      	cmp	r0, r2
 80063c6:	d101      	bne.n	80063cc <memchr+0xc>
 80063c8:	2000      	movs	r0, #0
 80063ca:	4770      	bx	lr
 80063cc:	7803      	ldrb	r3, [r0, #0]
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d0fb      	beq.n	80063ca <memchr+0xa>
 80063d2:	3001      	adds	r0, #1
 80063d4:	e7f6      	b.n	80063c4 <memchr+0x4>
	...

080063d8 <__malloc_lock>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4802      	ldr	r0, [pc, #8]	; (80063e4 <__malloc_lock+0xc>)
 80063dc:	f7ff faef 	bl	80059be <__retarget_lock_acquire_recursive>
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	200006f0 	.word	0x200006f0

080063e8 <__malloc_unlock>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	4802      	ldr	r0, [pc, #8]	; (80063f4 <__malloc_unlock+0xc>)
 80063ec:	f7ff fae8 	bl	80059c0 <__retarget_lock_release_recursive>
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	200006f0 	.word	0x200006f0

080063f8 <_read_r>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	0004      	movs	r4, r0
 80063fc:	0008      	movs	r0, r1
 80063fe:	0011      	movs	r1, r2
 8006400:	001a      	movs	r2, r3
 8006402:	2300      	movs	r3, #0
 8006404:	4d05      	ldr	r5, [pc, #20]	; (800641c <_read_r+0x24>)
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fb ff30 	bl	800226c <_read>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d103      	bne.n	8006418 <_read_r+0x20>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d000      	beq.n	8006418 <_read_r+0x20>
 8006416:	6023      	str	r3, [r4, #0]
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	200006f8 	.word	0x200006f8

08006420 <_init>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

0800642c <_fini>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr
